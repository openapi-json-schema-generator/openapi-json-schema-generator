# coding: utf-8
{{> _helper_header }}

import dataclasses
import enum
import typing

class SecuritySchemeType(enum.Enum):
    API_KEY = 'apiKey'
    HTTP = 'http'
    MUTUAL_TLS = 'mutualTLS'
    OAUTH_2 = 'oauth2'
    OPENID_CONNECT = 'openIdConnect'


@dataclasses.dataclass
class __SecuritySchemeBase:
    type: SecuritySchemeType


class ApiKeyInLocation(enum.Enum):
    QUERY = 'query'
    HEADER = 'header'
    COOKIE = 'cookie'


class ApiKeySecurityScheme(__SecuritySchemeBase):
    type = SecuritySchemeType.API_KEY
    name: str
    in_location: ApiKeyInLocation


class HTTPSchemeType(enum.Enum):
    BASIC = 'basic'
    BEARER = 'bearer'
    DIGEST = 'digest'
    SIGNATURE = 'signature' # https://datatracker.ietf.org/doc/draft-cavage-http-signatures/


class HTTPSecurityScheme(__SecuritySchemeBase):
    type = SecuritySchemeType.HTTP
    scheme: HTTPSchemeType
    bearer_format: str


class MutualTLSSecurityScheme(__SecuritySchemeBase):
    type = SecuritySchemeType.MUTUAL_TLS


@dataclasses.dataclass
class OAuthFlowBase__:
    refresh_url: typing.Optional[str] = None
    scopes: typing.Dict[str, str]


@dataclasses.dataclass
class AuthorizationUrlBase__:
    authorization_url: str


class ImplicitOAuthFlow(OAuthFlowBase__, AuthorizationUrlBase__):
    pass


@dataclasses.dataclass
class TokenUrlBase__:
    token_url: str


class TokenUrlOauthFlow(OAuthFlowBase__, TokenUrlBase__):
    pass


class AuthorizationCodeOauthFlow(OAuthFlowBase__, AuthorizationUrlBase__, TokenUrlBase__):
    pass


@dataclasses.dataclass
class OAuthFlows:
    implicit: typing.Optional[ImplicitOAuthFlow] = None
    password: typing.Optional[TokenUrlOauthFlow] = None
    client_credentials: typing.Optional[TokenUrlOauthFlow] = None
    authorization_code: typing.Optional[AuthorizationCodeOauthFlow] = None


class OAuth2SecurityScheme(__SecuritySchemeBase):
    type = SecuritySchemeType.OAUTH_2
    flows: OAuthFlows


class OpenIdConnectSecurityScheme(__SecuritySchemeBase):
    type = SecuritySchemeType.OPENID_CONNECT
    openid_connect_url: str


class SecurityRequirementObject(dict[__SecuritySchemeBase, typing.List[str]]):
    """
    Key is the Security scheme class
    Value is the list of scopes
    """
    pass