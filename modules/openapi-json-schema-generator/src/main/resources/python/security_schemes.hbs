# coding: utf-8
{{> _helper_header }}

import base64
import dataclasses
import enum
import typing
import typing_extensions

from urllib3 import _collections
{{#if hasHttpSignatureSecurityScheme}}

from {{packageName}} import signing
{{/if}}


class SecuritySchemeType(enum.Enum):
    API_KEY = 'apiKey'
    HTTP = 'http'
    MUTUAL_TLS = 'mutualTLS'
    OAUTH_2 = 'oauth2'
    OPENID_CONNECT = 'openIdConnect'


@dataclasses.dataclass
class __SecuritySchemeBase:
    type: SecuritySchemeType


class ApiKeyInLocation(enum.Enum):
    QUERY = 'query'
    HEADER = 'header'
    COOKIE = 'cookie'


class ApiKeySecurityScheme(__SecuritySchemeBase):
    type = SecuritySchemeType.API_KEY
    name: str
    in_location: ApiKeyInLocation
    api_key: str  # this must be set by the developer

    def apply_auth(
        self,
        headers: _collections.HTTPHeaderDict,
        resource_path: str,
        method: str,
        body: typing.Optional[typing.Union[str, bytes]]
    ):
        if self.in_location is ApiKeyInLocation.COOKIE:
            headers.add('Cookie', self.api_key)
        elif self.in_location is ApiKeyInLocation.HEADER:
            headers.add(self.name, self.api_key)
        elif self.in_location is ApiKeyInLocation.QUERY:
            # todo add query handling
            raise NotImplementedError("ApiKeySecurityScheme in query not yet implemented")
        return


class HTTPSchemeType(enum.Enum):
    BASIC = 'basic'
    BEARER = 'bearer'
    DIGEST = 'digest'
    SIGNATURE = 'signature' # https://datatracker.ietf.org/doc/draft-cavage-http-signatures/


class __HTTPSecurityScheme(__SecuritySchemeBase):
    type: SecuritySchemeType = SecuritySchemeType.HTTP
    scheme: HTTPSchemeType
    bearer_format: typing.Optional[str] = None


class HTTPBasicSecurityScheme(__HTTPSecurityScheme):
    scheme: HTTPSchemeType = HTTPSchemeType.BASIC
    user_id: str  # user name
    password: str
    encoding: str = 'utf-8'
    """
    https://www.rfc-editor.org/rfc/rfc7617.html
    """

    def apply_auth(
        self,
        headers: _collections.HTTPHeaderDict,
        resource_path: str,
        method: str,
        body: typing.Optional[typing.Union[str, bytes]]
    ):
        user_pass = f"{self.user_id}:{self.password}"
        b64_user_pass = base64.encode(user_pass.encode(encoding=self.encoding))
        headers.add('Authorization', f"Bearer {b64_user_pass}")


class HTTPBearerSecurityScheme(__HTTPSecurityScheme):
    scheme: HTTPSchemeType = HTTPSchemeType.BEARER
    bearer_token: str

    def apply_auth(
        self,
        headers: _collections.HTTPHeaderDict,
        resource_path: str,
        method: str,
        body: typing.Optional[typing.Union[str, bytes]]
    ):
        headers.add('Authorization', f"Bearer {self.bearer_token}")
{{#if hasHttpSignatureSecurityScheme}}


class HTTPSignatureSecurityScheme(__HTTPSecurityScheme):
    scheme: HTTPSchemeType = HTTPSchemeType.SIGNATURE
    signing_info: signing.HttpSigningConfiguration

    def apply_auth(
        self,
        headers: _collections.HTTPHeaderDict,
        resource_path: str,
        method: str,
        body: typing.Optional[typing.Union[str, bytes]]
    ):
        query_params = tuple()
        auth_headers = self.signing_info.get_http_signature_headers(
                            resource_path, method, headers, body, query_params)
        for key, value in auth_headers.items():
            headers.add(key, value)
{{/if}}


class HTTPDigestSecurityScheme(__HTTPSecurityScheme):
    scheme: HTTPSchemeType = HTTPSchemeType.DIGEST

    def apply_auth(
        self,
        headers: _collections.HTTPHeaderDict,
        resource_path: str,
        method: str,
        body: typing.Optional[typing.Union[str, bytes]]
    ):
        raise NotImplementedError("HTTPDigestSecurityScheme not yet implemented")


class MutualTLSSecurityScheme(__SecuritySchemeBase):
    type = SecuritySchemeType.MUTUAL_TLS

    def apply_auth(
        self,
        headers: _collections.HTTPHeaderDict,
        resource_path: str,
        method: str,
        body: typing.Optional[typing.Union[str, bytes]]
    ):
        raise NotImplementedError("MutualTLSSecurityScheme not yet implemented")


@dataclasses.dataclass
class __OAuthFlowBase:
    scopes: typing.Dict[str, str]
    refresh_url: typing.Optional[str] = None


@dataclasses.dataclass
class __AuthorizationUrlBase:
    authorization_url: str


class ImplicitOAuthFlow(__OAuthFlowBase, __AuthorizationUrlBase):
    pass


@dataclasses.dataclass
class __TokenUrlBase:
    token_url: str


class TokenUrlOauthFlow(__OAuthFlowBase, __TokenUrlBase):
    pass


class AuthorizationCodeOauthFlow(__OAuthFlowBase, __AuthorizationUrlBase, __TokenUrlBase):
    pass


@dataclasses.dataclass
class OAuthFlows:
    implicit: typing.Optional[ImplicitOAuthFlow] = None
    password: typing.Optional[TokenUrlOauthFlow] = None
    client_credentials: typing.Optional[TokenUrlOauthFlow] = None
    authorization_code: typing.Optional[AuthorizationCodeOauthFlow] = None


class OAuth2SecurityScheme(__SecuritySchemeBase):
    type = SecuritySchemeType.OAUTH_2
    flows: OAuthFlows

    def apply_auth(
        self,
        headers: _collections.HTTPHeaderDict,
        resource_path: str,
        method: str,
        body: typing.Optional[typing.Union[str, bytes]]
    ):
        raise NotImplementedError("OAuth2SecurityScheme not yet implemented")


class OpenIdConnectSecurityScheme(__SecuritySchemeBase):
    type = SecuritySchemeType.OPENID_CONNECT
    openid_connect_url: str

    def apply_auth(
        self,
        headers: _collections.HTTPHeaderDict,
        resource_path: str,
        method: str,
        body: typing.Optional[typing.Union[str, bytes]]
    ):
        raise NotImplementedError("OpenIdConnectSecurityScheme not yet implemented")

"""
Key is the Security scheme class
Value is the list of scopes
"""
SecurityRequirementObject = typing_extensions.TypedDict(
    'SecurityRequirementObject',
    {
{{#each securitySchemes}}
        '{{@key}}': typing.List[str],
{{/each}}
    }
)