# coding: utf-8

{{>partial_header}}

import unittest
from unittest.mock import patch

import urllib3

import {{packageName}}
from {{packageName}}.paths.{{operation.nickname}} import {{operation.httpMethod}}  # noqa: E501
from {{packageName}} import configuration, schemas, api_client

from .. import ApiTestMixin


{{#with operation}}
class Test{{operationIdSnakeCase}}(ApiTestMixin, unittest.TestCase):
    """
    {{operationIdSnakeCase}} unit test stubs
{{#if summary}}
        {{{summary}}}  # noqa: E501
{{/if}}
    """
    configuration_ = configuration.Configuration()

    def setUp(self):
        used_api_client = api_client.ApiClient(configuration=self.configuration_)
        self.api = {{httpMethod}}.ApiFor{{httpMethod}}(api_client=used_api_client)  # noqa: E501

    def tearDown(self):
        pass

{{#each responses}}
    {{#if @first}}
    response_status = {{#eq @key "default"}}0{{else}}{{@key}}{{/eq}}
        {{#if refInfo}}
            {{#with refInfo.getRef}}
    {{> endpoint_test_response_content }}
            {{/with}}
        {{else}}
    {{> endpoint_test_response_content }}
        {{/if}}
    {{/if}}
{{/each}}
{{#if requestBody}}
{{#with requestBody}}
{{#if required}}
{{#each content}}
{{#if this.testCases}}
{{#each testCases}}
{{#with this }}

    def test_{{@key}}_{{#if valid}}passes{{else}}fails{{/if}}(self):
        content_type = '{{{../@key}}}'
        # {{description}}
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
{{#with data}}
                {{> model_templates/payload_renderer endChar='' }}
{{/with}}
            )
{{#if valid}}
            body = {{httpMethod}}.request_body.{{#with schema}}{{#if refInfo.refModule}}{{refInfo.refModule}}.{{refInfo.refClass}}{{else}}{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}{{/if}}{{/with}}.from_openapi_data_(
                payload,
                configuration_=self.configuration_
            )
            mock_request.return_value = self.response(
                self.json_bytes(self.response_body),
                status=self.response_status
            )
            {{> endpoint_test_partial }}

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)
{{else}}
            with self.assertRaises(({{packageName}}.ApiValueError, {{packageName}}.ApiTypeError)):
                body = {{httpMethod}}.request_body.{{#with schema}}{{#if refInfo.refModule}}{{refInfo.refModule}}.{{refInfo.refClass}}{{else}}{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}{{/if}}{{/with}}.from_openapi_data_(
                    payload,
                    configuration_=self.configuration_
                )
                self.api.{{httpMethod}}(body=body)
{{/if}}
{{/with}}
{{/each}}
{{/if}}
{{/each}}
{{/if}}
{{/with}}
{{else}}
    {{/if}}
{{/with}}

if __name__ == '__main__':
    unittest.main()
