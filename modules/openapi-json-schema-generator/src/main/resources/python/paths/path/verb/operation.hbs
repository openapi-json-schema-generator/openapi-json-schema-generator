# coding: utf-8

{{> _helper_header }}

from dataclasses import dataclass
import typing_extensions
import urllib3
{{#with operation}}
{{#or headerParams requestBody produces}}
from urllib3._collections import HTTPHeaderDict
{{/or}}
{{/with}}

from {{packageName}} import api_client, exceptions
{{> _helper_imports_schema_types }}
{{> _helper_imports }}
{{#with operation}}

{{#unless isStub}}
from .. import path
{{/unless}}
{{#each responses}}
from .responses import response_{{@key}}
{{/each}}
{{#with requestBody}}
from . import request_body
{{/with}}
{{#each allParams}}
from .parameters import {{name.snakeCaseName}}
{{/each}}

{{#or queryParams headerParams pathParams cookieParams}}
    {{#if queryParams}}
{{> paths/path/verb/_helper_operation_parameter_schema_and_def xParams=queryParams xParamsName="RequestQueryParameters" }}
    {{/if}}
    {{#if headerParams}}
{{> paths/path/verb/_helper_operation_parameter_schema_and_def xParams=headerParams xParamsName="RequestHeaderParameters" }}
    {{/if}}
    {{#if pathParams}}
{{> paths/path/verb/_helper_operation_parameter_schema_and_def xParams=pathParams xParamsName="RequestPathParameters" }}
    {{/if}}
    {{#if cookieParams}}
{{> paths/path/verb/_helper_operation_parameter_schema_and_def xParams=cookieParams xParamsName="RequestCookieParameters" }}
    {{/if}}
{{/or}}
{{#unless isStub}}
{{#each authMethods}}
{{#if @first}}

_auth = [
{{/if}}
    '{{name}}',
{{#if @last}}
]
{{/if}}
{{/each}}
{{#each servers}}
{{#if @first}}

_servers = (
{{/if}}
    {
        'url': "{{{url}}}",
        'description': "{{#unless description}}No description provided{{else}}{{{description}}}{{/unless}}",
        {{#each variables}}
        {{#if @first}}
        'variables': {
        {{/if}}
            '{{{name}}}': {
                'description': "{{#unless description}}No description provided{{else}}{{{description}}}{{/unless}}",
                'default_value': "{{{defaultValue}}}",
                {{#each enumValues}}
                {{#if @first}}
                'enum_values': [
                {{/if}}
                    "{{{.}}}"{{#unless @last}},{{/unless}}
                {{#if @last}}
                ]
                {{/if}}
                {{/each}}
                }{{#unless @last}},{{/unless}}
        {{#if @last}}
            }
        {{/if}}
        {{/each}}
    },
{{#if @last}}
)
{{/if}}
{{/each}}
{{/unless}}
{{#unless isStub}}


{{#if defaultResponse}}
{{#with defaultResponse}}
default_response = response_default.{{name.camelCaseName}}
{{/with}}
{{/if}}
{{#if nonDefaultResponses}}
__StatusCodeToResponse = typing_extensions.TypedDict(
    '__StatusCodeToResponse',
    {
{{#each nonDefaultResponses}}
        '{{@key}}': response_{{@key}}.{{name.camelCaseName}},
{{/each}}
    }
)
_status_code_to_response: __StatusCodeToResponse = {
{{#each nonDefaultResponses}}
    '{{@key}}': response_{{@key}}.{{name.camelCaseName}},
{{/each}}
}
{{/if}}
{{/unless}}
{{#each produces}}
{{#if @first}}
_all_accept_content_types = (
{{/if}}
    '{{{this.mediaType}}}',
{{#if @last}}
)
{{/if}}
{{/each}}


class BaseApi(api_client.Api):
{{#if requestBody}}
    {{#each getContentTypeToOperation}}
    {{> paths/path/verb/_helper_operation_args_baseapi_wrapper contentType=@key this=this}}

    {{/each}}
    {{> paths/path/verb/_helper_operation_args_baseapi_wrapper contentType="null" this=this}}

{{else}}
    @typing.overload
    def _{{operationId.snakeCaseName}}(
    {{> paths/path/verb/_helper_operation_args isOverload=true skipDeserialization="False" contentType="null"}}
{{/if}}

    @typing.overload
    def _{{operationId.snakeCaseName}}(
    {{> paths/path/verb/_helper_operation_args isOverload=true skipDeserialization="True" contentType="null"}}

    @typing.overload
    def _{{operationId.snakeCaseName}}(
    {{> paths/path/verb/_helper_operation_args isOverload=true skipDeserialization="null" contentType="null"}}

    def _{{operationId.snakeCaseName}}(
    {{> paths/path/verb/_helper_operation_args isOverload=false skipDeserialization="null" contentType="null"}}
        """
    {{#if summary}}
        {{summary}}
    {{/if}}
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
    {{#if queryParams}}
        self._verify_typed_dict_inputs(RequestQueryParameters.Params, query_params)
    {{/if}}
    {{#if headerParams}}
        self._verify_typed_dict_inputs(RequestHeaderParameters.Params, header_params)
    {{/if}}
    {{#if pathParams}}
        self._verify_typed_dict_inputs(RequestPathParameters.Params, path_params)
    {{/if}}
    {{#if cookieParams}}
        self._verify_typed_dict_inputs(RequestCookieParameters.Params, cookie_params)
    {{/if}}
        used_path = path
    {{#if pathParams}}

        _path_params = {}
        for parameter in RequestPathParameters.parameters:
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    {{/if}}
    {{#if queryParams}}

        prefix_separator_iterator = None
        for parameter in RequestQueryParameters.parameters:
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    {{/if}}
    {{#or headerParams requestBody produces}}

        _headers = HTTPHeaderDict()
    {{else}}
    {{/or}}
    {{#if headerParams}}
        for parameter in RequestHeaderParameters.parameters:
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
    {{/if}}
        # TODO add cookie handling
    {{#if produces}}
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
    {{/if}}
    {{#with requestBody}}

    {{#if refInfo}}
        {{#if getDeepestRef.required}}
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        {{/if}}
    {{else}}
        {{#if required}}
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        {{/if}}
    {{/if}}
        _fields = None
        _body = None
    {{#if refInfo}}
        {{#if getDeepestRef.required}}
        {{> paths/path/verb/_helper_operation_body_serialization }}
        {{else}}
        if body is not schemas.unset:
            {{> paths/path/verb/_helper_operation_body_serialization }}
        {{/if}}
    {{else}}
        {{#if required}}
        {{> paths/path/verb/_helper_operation_body_serialization }}
        {{else}}
        if body is not schemas.unset:
            {{> paths/path/verb/_helper_operation_body_serialization }}
        {{/if}}
    {{/if}}
    {{/with}}
    {{#if servers}}

        host = self._get_host('{{operationId.snakeCaseName}}', _servers, host_index)
    {{/if}}

        response = self.api_client.call_api(
            resource_path=used_path,
            method='{{httpMethod.name}}'.upper(),
    {{#or headerParams requestBody produces}}
            headers=_headers,
    {{/or}}
    {{#if requestBody}}
            fields=_fields,
            body=_body,
    {{/if}}
    {{#if authMethods}}
            auth_settings=_auth,
    {{/if}}
    {{#if servers}}
            host=host,
    {{/if}}
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
{{#if nonDefaultResponses}}
            status = str(response.status)
            if status in _status_code_to_response:
                status: typing_extensions.Literal[
{{#each nonDefaultResponses}}
                    '{{@key}}',
{{/each}}
                ]
                api_response = _status_code_to_response[status].deserialize(response, self.api_client.configuration)
            else:
                {{#if defaultResponse}}
                api_response = default_response.deserialize(response, self.api_client.configuration)
                {{else}}
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)
                {{/if}}
{{else}}
            {{#if defaultResponse}}
            api_response = default_response.deserialize(response, self.api_client.configuration)
            {{else}}
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
            {{/if}}
{{/if}}

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class {{operationId.camelCaseName}}(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId.snakeCaseName fn names

{{#if requestBody}}
    {{#each getContentTypeToOperation}}
    {{> paths/path/verb/_helper_operation_args_operationid_wrapper contentType=@key this=this}}

    {{/each}}
    {{> paths/path/verb/_helper_operation_args_operationid_wrapper contentType="null" this=this}}

{{else}}
    @typing.overload
    def {{operationId.snakeCaseName}}(
    {{> paths/path/verb/_helper_operation_args isOverload=true skipDeserialization="False" contentType="null"}}
{{/if}}

    @typing.overload
    def {{operationId.snakeCaseName}}(
    {{> paths/path/verb/_helper_operation_args isOverload=true skipDeserialization="True" contentType="null"}}

    @typing.overload
    def {{operationId.snakeCaseName}}(
    {{> paths/path/verb/_helper_operation_args isOverload=true skipDeserialization="null" contentType="null"}}

    def {{operationId.snakeCaseName}}(
    {{> paths/path/verb/_helper_operation_args isOverload=false skipDeserialization="null" contentType="null"}}
        return self._{{operationId.snakeCaseName}}(
            {{> paths/path/verb/_helper_operation_args_passed }}
        )


class ApiFor{{httpMethod.camelCaseName}}(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

{{#if requestBody}}
    {{#each getContentTypeToOperation}}
    {{> paths/path/verb/_helper_operation_args_httpmethod_wrapper contentType=@key this=this}}

    {{/each}}
    {{> paths/path/verb/_helper_operation_args_httpmethod_wrapper contentType="null" this=this}}

{{else}}
    @typing.overload
    def {{httpMethod.name}}(
    {{> paths/path/verb/_helper_operation_args isOverload=true skipDeserialization="False" contentType="null"}}
{{/if}}

    @typing.overload
    def {{httpMethod.name}}(
    {{> paths/path/verb/_helper_operation_args isOverload=true skipDeserialization="True" contentType="null"}}

    @typing.overload
    def {{httpMethod.name}}(
    {{> paths/path/verb/_helper_operation_args isOverload=true skipDeserialization="null" contentType="null"}}

    def {{httpMethod.name}}(
    {{> paths/path/verb/_helper_operation_args isOverload=false skipDeserialization="null" contentType="null"}}
        return self._{{operationId.snakeCaseName}}(
            {{> paths/path/verb/_helper_operation_args_passed }}
        )


{{/with}}
