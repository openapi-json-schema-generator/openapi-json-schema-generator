

class {{xParamsName}}:
    RequiredParams = typing_extensions.TypedDict(
        'RequiredParams',
        {
{{#each xParams}}
{{#if refInfo}}
    {{#if getDeepestRef.required}}
        {{#if getDeepestRef.schema}}
            '{{getDeepestRef.name}}': typing.Union[{{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}}.schema, {{#with getDeepestRef.schema}}{{> _helper_schema_python_types }}{{/with}}],
        {{else}}
            '{{getDeepestRef.name}}': typing.Union[{{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}}.content["{{#each getDeepestRef.content}}{{{@key.original}}}"].schema, {{#with this}}{{#with schema}}{{> _helper_schema_python_types }}{{/with}}{{/with}}{{/each}}],
        {{/if}}
    {{/if}}
{{else}}
    {{#if required}}
        {{#if schema}}
            '{{name}}': typing.Union[{{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}}.schema, {{#with schema}}{{> _helper_schema_python_types }}{{/with}}],
        {{else}}
            '{{name}}': typing.Union[{{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}}.content["{{#each content}}{{{@key.original}}}"].schema, {{#with this}}{{#with schema}}{{> _helper_schema_python_types }}{{/with}}{{/with}}{{/each}}],
        {{/if}}
    {{/if}}
{{/if}}
{{/each}}
        }
    )
    OptionalParams = typing_extensions.TypedDict(
        'OptionalParams',
        {
{{#each xParams}}
{{#if refInfo}}
    {{#unless getDeepestRef.required}}
        {{#if getDeepestRef.schema}}
            '{{getDeepestRef.name}}': typing.Union[{{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}}.schema, {{#with getDeepestRef.schema}}{{> _helper_schema_python_types }}{{/with}}],
        {{else}}
            '{{getDeepestRef.name}}': typing.Union[{{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}}.content["{{#each getDeepestRef.content}}{{{@key.original}}}"].schema, {{#with this}}{{#with schema}}{{> _helper_schema_python_types }}{{/with}}{{/with}}{{/each}}],
        {{/if}}
    {{/unless}}
{{else}}
    {{#unless required}}
        {{#if schema}}
            '{{name}}': typing.Union[{{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}}.schema, {{#with schema}}{{> _helper_schema_python_types }}{{/with}}],
        {{else}}
            '{{name}}': typing.Union[{{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}}.content["{{#each content}}{{{@key.original}}}"].schema, {{#with this}}{{#with schema}}{{> _helper_schema_python_types }}{{/with}}{{/with}}{{/each}}],
        {{/if}}
    {{/unless}}
{{/if}}
{{/each}}
        },
        total=False
    )


    class Params(RequiredParams, OptionalParams):
        pass


    parameters = (
    {{#each xParams}}
        {{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}},
    {{/each}}
    )