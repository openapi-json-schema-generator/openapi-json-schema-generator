{{#if allOf}}

class all_of:
{{#each allOf}}
{{#unless refClass}}
    {{> model_templates/schema }}
{{else}}

    @staticmethod
    def {{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}() -> typing.Type['{{refClass}}']:
        return {{refClass}}
{{/unless}}
{{/each}}
    classes = [
{{#each allOf}}
    {{#if name.getNameIsValid}}
        {{name.getName}},
    {{else}}
        {{name.getSnakeCaseName}},
    {{/if}}
{{/each}}
    ]
{{/if}}
{{#if oneOf}}

class one_of:
{{#each oneOf}}
{{#unless refClass}}
    {{> model_templates/schema }}
{{else}}

    @staticmethod
    def {{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}() -> typing.Type['{{refClass}}']:
        return {{refClass}}
{{/unless}}
{{/each}}
    classes = [
{{#each oneOf}}
    {{#if name.getNameIsValid}}
        {{name.getName}},
    {{else}}
        {{name.getSnakeCaseName}},
    {{/if}}
{{/each}}
    ]
{{/if}}
{{#if anyOf}}

class any_of:
{{#each anyOf}}
{{#unless refClass}}
    {{> model_templates/schema }}
{{else}}

    @staticmethod
    def {{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}() -> typing.Type['{{refClass}}']:
        return {{refClass}}
{{/unless}}
{{/each}}
    classes = [
{{#each anyOf}}
    {{#if name.getNameIsValid}}
        {{name.getName}},
    {{else}}
        {{name.getSnakeCaseName}},
    {{/if}}
{{/each}}
    ]
{{/if}}
{{#if not}}
{{#with not}}
{{#if refClass}}

@staticmethod
def {{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}() -> typing.Type['{{refClass}}']:
    return {{refClass}}
{{else}}
{{> model_templates/schema }}
{{/if}}
{{/with}}
{{/if}}
