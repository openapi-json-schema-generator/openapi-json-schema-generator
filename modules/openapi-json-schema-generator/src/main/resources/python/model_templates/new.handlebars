def __new__(
    cls,
{{#if getHasMultipleTypes}}
    *_args: typing.Union[{{> model_templates/schema_python_types }}],
{{else}}
{{#if isArray }}
    _arg: typing.Union[typing.Tuple[{{#with items}}{{#if refClass}}'{{refClass}}'{{else}}typing.Union[MetaOapg.{{name.getName}}, {{> model_templates/schema_python_types }}]{{/if}}{{/with}}], typing.List[{{#with items}}{{#if refClass}}'{{refClass}}'{{else}}typing.Union[MetaOapg.{{name.getName}}, {{> model_templates/schema_python_types }}]{{/if}}{{/with}}]],
{{else}}
    *_args: typing.Union[{{> model_templates/schema_python_types }}],
{{/if}}
{{/if}}
{{#unless isNull}}
{{#if requiredProperties}}
{{#each getRequiredProperties}}
{{#with this}}
{{#if refClass}}
    {{@key}}: '{{refClass}}',
{{else}}
    {{#and name name.getNameIsValid}}
        {{#if schemaIsFromAdditionalProperties}}
    {{@key}}: typing.Union[MetaOapg.{{name.getName}}, {{> model_templates/schema_python_types }}],
        {{else}}
            {{#if name.getNameIsValid}}
    {{@key}}: typing.Union[MetaOapg.properties.{{name.getName}}, {{> model_templates/schema_python_types }}],
            {{/if}}
        {{/if}}
    {{else}}
    {{@key}}: typing.Union[schemas.AnyTypeSchema, {{> model_templates/schema_python_types }}],
    {{/and}}
{{/if}}
{{/with}}
{{/each}}
{{/if}}
{{/unless}}
{{#each optionalProperties}}
{{#if name.getNameIsValid}}
{{#if refClass}}
    {{@key}}: typing.Union['{{refClass}}', schemas.Unset] = schemas.unset,
{{else}}
    {{@key}}: typing.Union[MetaOapg.properties.{{@key}}, {{> model_templates/schema_python_types }}schemas.Unset] = schemas.unset,
{{/if}}
{{/if}}
{{/each}}
    _configuration: typing.Optional[schemas.Configuration] = None,
{{#with additionalProperties}}
{{#unless getIsBooleanSchemaFalse}}
{{#if refClass}}
    **kwargs: '{{refClass}}',
{{else}}
    **kwargs: typing.Union[MetaOapg.{{name.getName}}, {{> model_templates/schema_python_types }}],
{{/if}}
{{/unless}}
{{else}}
{{#or isMap isAnyType}}
    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
{{/or}}
{{/with}}
) -> '{{> model_templates/classname }}':
    return super().__new__(
        cls,
{{#if getHasMultipleTypes}}
        *_args,
{{else}}
{{#if isArray }}
        _arg,
{{else}}
        *_args,
{{/if}}
{{/if}}
{{#unless isNull}}
{{#if requiredProperties}}
{{#each getRequiredProperties}}
{{#with this}}
{{#if name}}
{{#if name.getNameIsValid}}
        {{@key}}={{@key}},
{{/if}}
{{else}}
        {{@key}}={{@key}},
{{/if}}
{{/with}}
{{/each}}
{{/if}}
{{/unless}}
{{#each optionalProperties}}
{{#if name.getNameIsValid}}
        {{@key}}={{@key}},
{{/if}}
{{/each}}
        _configuration=_configuration,
{{#with additionalProperties}}
{{#unless getIsBooleanSchemaFalse}}
        **kwargs,
{{/unless}}
{{else}}
{{#or isMap isAnyType}}
        **kwargs,
{{/or}}
{{/with}}
    )
