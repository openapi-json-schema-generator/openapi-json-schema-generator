def __new__(
    cls,
{{#if getHasMultipleTypes}}
    *_args: typing.Union[{{> model_templates/schema_python_types }}],
{{else}}
{{#if isArray }}
    _arg: typing.Union[typing.Tuple[{{#with items}}{{#if refClass}}'{{> refclass_with_module }}'{{else}}typing.Union[MetaOapg.{{name.getCamelCaseName}}, {{> model_templates/schema_python_types }}]{{/if}}{{/with}}], typing.List[{{#with items}}{{#if refClass}}'{{> refclass_with_module }}'{{else}}typing.Union[MetaOapg.{{name.getCamelCaseName}}, {{> model_templates/schema_python_types }}]{{/if}}{{/with}}]],
{{else}}
    *_args: typing.Union[{{> model_templates/schema_python_types }}],
{{/if}}
{{/if}}
{{#unless isNull}}
{{#if requiredProperties}}
{{#each getRequiredProperties}}
{{#if @key.getNameIsValid}}
{{#with this}}
{{#if refClass}}
    {{@key.getName}}: '{{> refclass_with_module }}',
{{else}}
    {{#if name}}
        {{#if schemaIsFromAdditionalProperties}}
    {{@key.getName}}: typing.Union[MetaOapg.{{name.getCamelCaseName}}, {{> model_templates/schema_python_types }}],
        {{else}}
    {{@key.getName}}: typing.Union[MetaOapg.Properties.{{name.getCamelCaseName}}, {{> model_templates/schema_python_types }}],
        {{/if}}
    {{else}}
    {{@key.getName}}: typing.Union[schemas.AnyTypeSchema, {{> model_templates/schema_python_types }}],
    {{/if}}
{{/if}}
{{/with}}
{{/if}}
{{/each}}
{{/if}}
{{/unless}}
{{#each optionalProperties}}
{{#if @key.getNameIsValid}}
{{#if refClass}}
    {{@key.getName}}: typing.Union['{{> refclass_with_module }}', schemas.Unset] = schemas.unset,
{{else}}
    {{@key.getName}}: typing.Union[MetaOapg.Properties.{{name.getCamelCaseName}}, {{> model_templates/schema_python_types }}schemas.Unset] = schemas.unset,
{{/if}}
{{/if}}
{{/each}}
    _configuration: typing.Optional[schemas.Configuration] = None,
{{#with additionalProperties}}
{{#unless getIsBooleanSchemaFalse}}
{{#if refClass}}
    **kwargs: '{{> refclass_with_module }}',
{{else}}
    **kwargs: typing.Union[MetaOapg.{{name.getCamelCaseName}}, {{> model_templates/schema_python_types }}],
{{/if}}
{{/unless}}
{{else}}
{{#or isMap isAnyType}}
    **kwargs: typing.Union[{{> types_all_incl_schema_oneline }}],
{{/or}}
{{/with}}
) -> '{{name.getCamelCaseName}}':
    return super().__new__(
        cls,
{{#if getHasMultipleTypes}}
        *_args,
{{else}}
{{#if isArray }}
        _arg,
{{else}}
        *_args,
{{/if}}
{{/if}}
{{#unless isNull}}
{{#if requiredProperties}}
{{#each getRequiredProperties}}
{{#if @key.getNameIsValid}}
{{#with this}}
        {{@key.getName}}={{@key.getName}},
{{/with}}
{{/if}}
{{/each}}
{{/if}}
{{/unless}}
{{#each optionalProperties}}
{{#if @key.getNameIsValid}}
        {{@key.getName}}={{@key.getName}},
{{/if}}
{{/each}}
        _configuration=_configuration,
{{#with additionalProperties}}
{{#unless getIsBooleanSchemaFalse}}
        **kwargs,
{{/unless}}
{{else}}
{{#or isMap isAnyType}}
        **kwargs,
{{/or}}
{{/with}}
    )
