# coding: utf-8

{{>partial_header}}

{{#with response}}
{{#if refInfo}}
{{> model_templates/imports }}
{{name.getCamelCaseName}} = {{refInfo.refModule}}.{{refInfo.refClass}}
{{else}}
import dataclasses
import datetime
import decimal
import io
import typing
import uuid

import frozendict
import typing_extensions
import urllib3

from {{packageName}} import api_client
from {{packageName}} import schemas
    {{#if getContent}}
    {{#each content}}
        {{#with this.schema}}
from .content.{{../@key.getSnakeCaseName}} import {{name.getSnakeCaseName}} as {{../@key.getSnakeCaseName}}_{{name.getSnakeCaseName}}
        {{/with}}
    {{/each}}
    {{/if}}
    {{#each headers}}
from .headers import {{name.getSnakeCaseName}}
    {{/each}}
    {{#if headers}}
{{> response_header_schema_and_def xParams=headers xParamsName="Header" }}
    {{/if}}


@dataclasses.dataclass
class _ApiResponse(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    {{#and headers content}}
    body: typing.Union[
    {{#each content}}
    {{#if this.schema}}
        {{#with this.schema}}
        {{../@key.getSnakeCaseName}}_{{name.getSnakeCaseName}}.{{name.getCamelCaseName}},
        {{/with}}
    {{else}}
        schemas.Unset,
    {{/if}}
    {{/each}}
    ]
    headers: Header.Params
    {{else}}
    {{#or headers content}}
    {{#if headers}}
    headers: Header.Params
    body: schemas.Unset = schemas.unset
    {{else}}
    body: typing.Union[
    {{#each content}}
    {{#if this.schema}}
        {{#with this.schema}}
        {{../@key.getSnakeCaseName}}_{{name.getSnakeCaseName}}.{{name.getCamelCaseName}},
        {{/with}}
    {{else}}
        schemas.Unset,
    {{/if}}
    {{/each}}
    ]
    headers: schemas.Unset = schemas.unset
    {{/if}}
    {{/or}}
    {{/and}}
    {{#unless headers}}
    {{#unless content}}
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset
    {{/unless}}
    {{/unless}}


class {{name.getCamelCaseName}}(api_client.OpenApiResponse[_ApiResponse]):
    response_cls = _ApiResponse
    {{#each content}}


    class __{{@key.getCamelCaseName}}MediaType(api_client.MediaType):
        {{#with this}}
            {{#with schema}}
        schema: typing.Type[{{../@key.getSnakeCaseName}}_{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}] = {{../@key.getSnakeCaseName}}_{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}
            {{else}}
        pass
            {{/with}}
        {{/with}}
    {{/each}}
    {{#if content}}
    __Content = typing_extensions.TypedDict(
        '__Content',
        {
        {{#each content}}
            '{{{@key.getName}}}': typing.Type[__{{@key.getCamelCaseName}}MediaType],
        {{/each}}
        }
    )
    content: __Content = {
        {{#each content}}
        '{{{@key.getName}}}': __{{@key.getCamelCaseName}}MediaType,
        {{/each}}
    }
    {{/if}}
    {{#if headers}}
    headers=Header.parameters
    {{/if}}
{{/if}}
{{/with}}