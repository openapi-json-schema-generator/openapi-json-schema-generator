import dataclasses
import datetime
import decimal
import io
import typing
import uuid

import frozendict
import typing_extensions
import urllib3

from {{packageName}} import api_client
from {{packageName}} import schemas
{{#with response}}
{{> model_templates/imports }}
{{#if getContent}}
{{#each content}}
    {{#with this.schema}}
        {{#unless refInfo.refModule}}
from .content.{{../@key.getSnakeCaseName}} import {{name.getSnakeCaseName}} as {{../@key.getSnakeCaseName}}_{{name.getSnakeCaseName}}
        {{/unless}}
    {{/with}}
{{/each}}
{{/if}}
{{#each headers}}
{{#if refInfo.refModule}}
from {{packageName}}.components.headers import {{refInfo.refModule}}
{{else}}
from .headers import {{name.getSnakeCaseName}}
{{/if}}
{{/each}}
{{#if headers}}
{{> response_header_schema_and_def xParams=headers xParamsName="Header" }}
{{/if}}


@dataclasses.dataclass
class ApiResponse(api_client.ApiResponse):
    response: urllib3.HTTPResponse
{{#and headers content}}
    body: typing.Union[
{{#each content}}
{{#if this.schema}}
    {{#with this.schema}}
        {{#if refInfo.refModule}}
        {{refInfo.refModule}}.{{refInfo.refClass}},
        {{else}}
        {{../@key.getSnakeCaseName}}_{{name.getSnakeCaseName}}.{{name.getCamelCaseName}},
        {{/if}}
    {{/with}}
{{else}}
        schemas.Unset,
{{/if}}
{{/each}}
    ]
    headers: Header.Params
{{else}}
{{#or headers content}}
{{#if headers}}
    headers: Header.Params
    body: schemas.Unset = schemas.unset
{{else}}
    body: typing.Union[
{{#each content}}
{{#if this.schema}}
    {{#with this.schema}}
        {{#if refInfo.refModule}}
        {{refInfo.refModule}}.{{refInfo.refClass}},
        {{else}}
        {{../@key.getSnakeCaseName}}_{{name.getSnakeCaseName}}.{{name.getCamelCaseName}},
        {{/if}}
    {{/with}}
{{else}}
        schemas.Unset,
{{/if}}
{{/each}}
    ]
    headers: schemas.Unset = schemas.unset
{{/if}}
{{/or}}
{{/and}}
{{#unless headers}}
{{#unless content}}
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset
{{/unless}}
{{/unless}}


class {{name.getCamelCaseName}}(api_client.OpenApiResponse[ApiResponse]):
    response_cls = ApiResponse
{{#each content}}


    class __{{@key.getCamelCaseName}}MediaType(api_client.MediaType):
    {{#with this}}
        {{#with schema}}
            {{#if refInfo.getRefModule}}
        schema: typing.Type[{{refInfo.getRefModule}}.{{refInfo.getRefClass}}] = {{refInfo.getRefModule}}.{{refInfo.getRefClass}}
            {{else}}
        schema: typing.Type[{{../@key.getSnakeCaseName}}_{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}] = {{../@key.getSnakeCaseName}}_{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}
            {{/if}}
        {{else}}
        pass
        {{/with}}
    {{/with}}
{{/each}}
{{#if content}}
    __Content = typing_extensions.TypedDict(
        '__Content',
        {
    {{#each content}}
            '{{{@key.getName}}}': __{{@key.getCamelCaseName}}MediaType,
    {{/each}}
        }
    )
    content: __Content = {
    {{#each content}}
        '{{{@key.getName}}}': __{{@key.getCamelCaseName}}MediaType,
    {{/each}}
    }
{{/if}}
{{#if headers}}
    headers=Header.parameters
{{/if}}
{{/with}}