
{{#if description}}
{{&description}}

{{/if}}
## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
{{> model_templates/schema_python_types }} | {{> model_templates/schema_accessed_types }} | {{#if description}}{{description}}{{/if}} |{{> model_templates/notes_msg }}
{{#or properties additionalProperties requiredProperties}}

### Dictionary Keys
Key | Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | ------------- | -------------
    {{#each getRequiredProperties}}
**{{@key}}** | {{#if refClass}}{{> refclass_partial }}{{else}}{{#if isComplicated}}[{{/if}}{{> model_templates/schema_python_types }}{{#if isComplicated}}](#{{@key}}){{/if}}{{/if}} | {{#if refClass}}{{> refclass_partial }}{{else}}{{#if isComplicated}}[{{/if}}{{> model_templates/schema_accessed_types }}{{#if isComplicated}}](#{{@key}}){{/if}}{{/if}} | {{#if description}}{{description}}{{/if}} |{{> model_templates/notes_msg }}
    {{/each}}
    {{#each optionalProperties}}
**{{@key}}** | {{#if refClass}}{{> refclass_partial }}{{else}}{{#if isComplicated}}[{{/if}}{{> model_templates/schema_python_types }}{{#if isComplicated}}](#{{@key}}){{/if}}{{/if}} | {{#if refClass}}{{> refclass_partial }}{{else}}{{#if isComplicated}}[{{/if}}{{> model_templates/schema_accessed_types }}{{#if isComplicated}}](#{{@key}}){{/if}}{{/if}} | {{#if description}}{{description}}{{/if}} | [optional]{{> model_templates/notes_msg }}
    {{/each}}
    {{#with additionalProperties}}
    {{#unless getIsBooleanSchemaFalse}}
    {{#if getIsBooleanSchemaTrue}}
**any_string_name** | {{> model_templates/schema_python_types }} | {{> model_templates/schema_accessed_types }} | any string name can be used but the value must be the correct type{{#if description}} {{description}}{{/if}} | [optional]
    {{else}}
**any_string_name** | {{#unless refClass}}{{> model_templates/schema_python_types }}{{/unless}}{{#if refClass}}{{> refclass_partial }}{{/if}} | {{#unless refClass}}{{> model_templates/schema_accessed_types }}{{/unless}}{{#if refClass}}{{> refclass_partial }}{{/if}} | any string name can be used but the value must be the correct type{{#if description}} {{description}}{{/if}} | [optional]{{> model_templates/notes_msg }}
    {{/if}}
    {{/unless}}
    {{else}}
**any_string_name** | dict, frozendict.frozendict, str, date, datetime, int, float, bool, decimal.Decimal, None, list, tuple, bytes, io.FileIO, io.BufferedReader | frozendict.frozendict, str, BoolClass, decimal.Decimal, NoneClass, tuple, bytes, FileIO | any string name can be used but the value must be the correct type | [optional]
    {{/with}}
{{/or}}
{{#each requiredProperties}}
{{#if this}}
{{#unless refClass}}
{{#if isComplicated}}

# {{@key}}
{{> schema_doc }}
{{/if}}
{{/unless}}
{{/if}}
{{/each}}
{{#each optionalProperties}}
{{#unless refClass}}
{{#if isComplicated}}

# {{@key}}
{{> schema_doc }}
{{/if}}
{{/unless}}
{{/each}}
{{#with additionalProperties}}
{{#unless getIsBooleanSchemaFalse}}
{{#unless getIsBooleanSchemaTrue}}
{{#unless refClass}}
{{#if isComplicated}}

# any_string_name
{{> schema_doc }}
{{/if}}
{{/unless}}
{{/unless}}
{{/unless}}
{{/with}}
{{#if items}}

### Tuple Items
Class Name | Input Type | Accessed Type | Description | Notes
------------- | ------------- | ------------- | ------------- | -------------
{{#with items}}
{{#unless refClass}}{{#or isArray isMap allOf anyOf oneOf not}}[{{/or}}{{name.getName}}{{#or isArray isMap allOf anyOf oneOf not}}](#{{name.getName}}){{/or}}{{/unless}}{{#if refClass}}{{> refclass_partial }}{{/if}} | {{#unless refClass}}{{> model_templates/schema_python_types }}{{/unless}}{{#if refClass}}{{> refclass_partial }}{{/if}} | {{#unless refClass}}{{> model_templates/schema_accessed_types }}{{/unless}}{{#if refClass}}{{> refclass_partial }}{{/if}} | {{#if description}}{{description}}{{/if}} |{{> model_templates/notes_msg }}
{{#unless refClass}}
{{#if isComplicated}}

# {{name.getName}}
{{> schema_doc }}
{{/if}}
{{/unless}}
{{/with}}
{{/if}}
{{#or allOf anyOf oneOf not}}

### Composed Schemas (allOf/anyOf/oneOf/not)
{{#if allOf}}
#### allOf
Class Name | Input Type | Accessed Type | Description | Notes
------------- | ------------- | ------------- | ------------- | -------------
{{#each allOf}}
{{#if refClass}}{{> refclass_partial }}{{else}}[{{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}](#{{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}){{/if}} | {{#unless refClass}}{{> model_templates/schema_python_types }}{{/unless}}{{#if refClass}}{{> refclass_partial }}{{/if}} | {{#unless refClass}}{{> model_templates/schema_accessed_types }}{{/unless}}{{#if refClass}}{{> refclass_partial }}{{/if}} | {{#if description}}{{description}}{{/if}} |{{> model_templates/notes_msg }}
{{/each}}
{{#each allOf}}
{{#unless refClass}}

# {{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}
{{> schema_doc }}
{{/unless}}
{{/each}}
{{/if}}
{{#if anyOf}}
#### anyOf
Class Name | Input Type | Accessed Type | Description | Notes
------------- | ------------- | ------------- | ------------- | -------------
{{#each anyOf}}
{{#if refClass}}{{> refclass_partial }}{{else}}[{{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}](#{{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}){{/if}} | {{#unless refClass}}{{> model_templates/schema_python_types }}{{/unless}}{{#if refClass}}{{> refclass_partial }}{{/if}} | {{#unless refClass}}{{> model_templates/schema_accessed_types }}{{/unless}}{{#if refClass}}{{> refclass_partial }}{{/if}} | {{#if description}}{{description}}{{/if}} |{{> model_templates/notes_msg }}
{{/each}}
{{#each anyOf}}
{{#unless refClass}}

# {{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}
{{> schema_doc }}
{{/unless}}
{{/each}}
{{/if}}
{{#if oneOf}}
#### oneOf
Class Name | Input Type | Accessed Type | Description | Notes
------------- | ------------- | ------------- | ------------- | -------------
{{#each oneOf}}
{{#if refClass}}{{> refclass_partial }}{{else}}[{{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}](#{{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}){{/if}} | {{#unless refClass}}{{> model_templates/schema_python_types }}{{/unless}}{{#if refClass}}{{> refclass_partial }}{{/if}} | {{#unless refClass}}{{> model_templates/schema_accessed_types }}{{/unless}}{{#if refClass}}{{> refclass_partial }}{{/if}} | {{#if description}}{{description}}{{/if}} |{{> model_templates/notes_msg }}
{{/each}}
{{#each oneOf}}
{{#unless refClass}}

# {{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}
{{> schema_doc }}
{{/unless}}
{{/each}}
{{/if}}
{{#if not}}
#### not
Class Name | Input Type | Accessed Type | Description | Notes
------------- | ------------- | ------------- | ------------- | -------------
{{#with not}}
{{#if refClass}}{{> refclass_partial }}{{else}}[{{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}](#{{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}){{/if}} | {{#unless refClass}}{{> model_templates/schema_python_types }}{{/unless}}{{#if refClass}}{{> refclass_partial }}{{/if}} | {{#unless refClass}}{{> model_templates/schema_accessed_types }}{{/unless}}{{#if refClass}}{{> refclass_partial }}{{/if}} | {{#if description}}{{description}}{{/if}} |{{> model_templates/notes_msg }}
{{#unless refClass}}

# {{#if name.getNameIsValid}}{{name.getName}}{{else}}{{name.getSnakeCaseName}}{{/if}}
{{> schema_doc }}
{{/unless}}
{{/with}}
{{/if}}
{{/or}}