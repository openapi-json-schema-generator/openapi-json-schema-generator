{{#if requiredProperties}}
required = {
{{#each requiredProperties}}
    "{{{@key.name}}}",
{{/each}}
}
{{/if}}
{{#if hasDiscriminatorWithNonEmptyMapping}}
{{#with discriminator}}
{{#each mappedModels}}
{{#if @first}}

@staticmethod
def discriminator():
    return {
        '{{{propertyBaseName}}}': {
{{/if}}
            '{{mappingName}}': {{{modelName}}},
{{#if @last}}
        }
    }
{{/if}}
{{/each}}
{{/with}}
{{/if}}
{{#if properties}}

class Properties:
{{#each properties}}
{{#if refInfo.refClass}}

    {{> components/schemas/_helper_refclass_staticmethod }}
{{else}}
    {{> components/schemas/_helper_schema_switch_case }}
{{/if}}
{{/each}}
    __annotations__ = {
{{#each properties}}
{{#if refInfo.refClass}}
        "{{{@key.name}}}": {{name.snakeCase}},
{{else}}
        "{{{@key.name}}}": {{name.camelCase}},
{{/if}}
{{/each}}
    }
{{/if}}
{{#with additionalProperties}}
{{#if refInfo.refClass}}

{{> components/schemas/_helper_refclass_staticmethod }}
{{else}}
{{> components/schemas/_helper_schema_switch_case }}
{{/if}}
{{/with}}
