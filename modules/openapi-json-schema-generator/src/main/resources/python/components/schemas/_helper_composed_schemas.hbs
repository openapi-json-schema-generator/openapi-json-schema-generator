{{#if allOf}}

all_of: typing.Tuple[
    {{#each allOf}}
        {{#if refInfo.refClass}}
    typing.Type[{{#if refInfo.refModule}}{{refInfo.refModule}}.{{/if}}{{refInfo.refClass}}],
        {{else}}
    typing.Type[{{jsonPathPiece.camelCase}}],
        {{/if}}
    {{/each}}
] = dataclasses.field(default_factory=lambda: (
    {{#each allOf}}
        {{#if refInfo.refClass}}
    {{#if refInfo.refModule}}{{refInfo.refModule}}.{{/if}}{{refInfo.refClass}},
        {{else}}
    {{jsonPathPiece.camelCase}},
        {{/if}}
    {{/each}}
)) # type: ignore
{{/if}}
{{#if oneOf}}

one_of: typing.Tuple[
    {{#each oneOf}}
        {{#if refInfo.refClass}}
    typing.Type[{{#if refInfo.refModule}}{{refInfo.refModule}}.{{/if}}{{refInfo.refClass}}],
        {{else}}
    typing.Type[{{jsonPathPiece.camelCase}}],
        {{/if}}
    {{/each}}
] = dataclasses.field(default_factory=lambda: (
    {{#each oneOf}}
        {{#if refInfo.refClass}}
    {{#if refInfo.refModule}}{{refInfo.refModule}}.{{/if}}{{refInfo.refClass}},
        {{else}}
    {{jsonPathPiece.camelCase}},
        {{/if}}
    {{/each}}
)) # type: ignore
{{/if}}
{{#if anyOf}}

any_of: typing.Tuple[
    {{#each anyOf}}
        {{#if refInfo.refClass}}
    typing.Type[{{#if refInfo.refModule}}{{refInfo.refModule}}.{{/if}}{{refInfo.refClass}}],
        {{else}}
    typing.Type[{{jsonPathPiece.camelCase}}],
        {{/if}}
    {{/each}}
] = dataclasses.field(default_factory=lambda: (
    {{#each anyOf}}
        {{#if refInfo.refClass}}
    {{#if refInfo.refModule}}{{refInfo.refModule}}.{{/if}}{{refInfo.refClass}},
        {{else}}
    {{jsonPathPiece.camelCase}},
        {{/if}}
    {{/each}}
)) # type: ignore
{{/if}}
{{#if not}}
{{#with not}}

@staticmethod
def not_():
    {{#if refInfo.refClass}}
    return {{#if refInfo.refModule}}{{refInfo.refModule}}.{{/if}}{{refInfo.refClass}}
    {{else}}
    return {{jsonPathPiece.camelCase}}
    {{/if}}
{{/with}}
{{/if}}
