{{#if allOf}}
all_of: {{jsonPathPiece.camelCase}}AllOf = dataclasses.field(default_factory=lambda: schemas.tuple_to_instance({{jsonPathPiece.camelCase}}AllOf)) # type: ignore
{{/if}}
{{#if anyOf}}
any_of: {{jsonPathPiece.camelCase}}AnyOf = dataclasses.field(default_factory=lambda: schemas.tuple_to_instance({{jsonPathPiece.camelCase}}AnyOf)) # type: ignore
{{/if}}
{{#if oneOf}}
one_of: {{jsonPathPiece.camelCase}}OneOf = dataclasses.field(default_factory=lambda: schemas.tuple_to_instance({{jsonPathPiece.camelCase}}OneOf)) # type: ignore
{{/if}}
{{#if not}}
{{#with not}}
not_: typing.Type[{{#if refInfo.refClass}}{{#if refInfo.refModule}}{{refInfo.refModule}}.{{/if}}{{refInfo.refClass}}{{else}}{{jsonPathPiece.camelCase}}{{/if}}] = dataclasses.field(default_factory=lambda: {{#if refInfo.refClass}}{{#if refInfo.refModule}}{{refInfo.refModule}}.{{/if}}{{refInfo.refClass}}{{else}}{{jsonPathPiece.camelCase}}{{/if}}) # type: ignore
{{/with}}
{{/if}}
