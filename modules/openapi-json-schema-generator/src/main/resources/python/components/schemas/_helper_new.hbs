{{#if types}}
    {{#gt types.size 1}}
        {{#each types}}
@typing.overload
def __new__(
    {{> components/schemas/_helper_new_args }}
) -> {{../jsonPathPiece.camelCase}}{{> components/schemas/_helper_new_generic_type }}
        {{/each}}
    {{/gt}}
{{else}}
    {{#each allTypes}}
@typing.overload
def __new__(
    {{> components/schemas/_helper_new_args }}
) -> {{../jsonPathPiece.camelCase}}{{> components/schemas/_helper_new_generic_type }}
    {{/each}}
{{/if}}
def __new__(
{{#if types}}
    {{#eq types.size 1}}
        {{#each types}}
    {{> components/schemas/_helper_new_args }}
        {{/each}}
    {{else}}
    cls,
    arg: typing.Union[
        {{#each types}}
            {{#eq this "object"}}
        {{mapInputJsonPathPiece.camelCase}},
        {{jsonPathPiece.camelCase}}[frozendict.frozendict],
            {{else}}
        {{> _helper_schema_python_type_newline }}
            {{/eq}}
        {{/each}}
    ],
    configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    {{/eq}}
{{else}}
    cls,
    arg: schemas.INPUT_TYPES_ALL_INCL_SCHEMA,
    configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
{{/if}}
{{#if types}}
    {{#eq types.size 1}}
) -> {{jsonPathPiece.camelCase}}[{{> components/schemas/_helper_schema_python_base_types }}]:
    {{else}}
):
    {{/eq}}
{{else}}
):
{{/if}}
    return super().__new__(
        cls,
        arg,
        configuration=configuration,
    )
