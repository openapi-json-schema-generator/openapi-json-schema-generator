def __new__(
    cls,
{{#if types}}
    {{#eq types.size 1}}
        {{#contains types "array" }}
    arg_: typing.Union[
        typing.Tuple[
            {{#with items}}{{#if refInfo.refClass}}'{{> components/schemas/_helper_refclass_with_module }}'{{else}}typing.Union[Schema_.{{name.camelCaseName}}, {{> _helper_schema_python_types }}]{{/if}}{{/with}}, ...
        ],
        typing.List[
            {{#with items}}{{#if refInfo.refClass}}'{{> components/schemas/_helper_refclass_with_module }}'{{else}}typing.Union[Schema_.{{name.camelCaseName}}, {{> _helper_schema_python_types }}]{{/if}}{{/with}}
        ],
    ],
        {{else}}
    *args_: typing.Union[{{> _helper_schema_python_types }}],
        {{/contains}}
    {{else}}
    *args_: typing.Union[{{> _helper_schema_python_types }}],
    {{/eq}}
{{else}}
    *args_: typing.Union[{{> _helper_schema_python_types }}],
{{/if}}
{{#unless isNull}}
    {{#if requiredProperties}}
        {{#each requiredProperties}}
            {{#if @key.nameIsValid}}
                {{#with this}}
                    {{#if refInfo.refClass}}
    {{@key.name}}: '{{> components/schemas/_helper_refclass_with_module }}',
                    {{else}}
                        {{#if name}}
                            {{#if schemaIsFromAdditionalProperties}}
    {{@key.name}}: typing.Union[Schema_.{{name.camelCaseName}}, {{> _helper_schema_python_types }}],
                            {{else}}
    {{@key.name}}: typing.Union[Schema_.Properties.{{name.camelCaseName}}, {{> _helper_schema_python_types }}],
                            {{/if}}
                        {{else}}
    {{@key.name}}: typing.Union[schemas.AnyTypeSchema, {{> _helper_schema_python_types }}],
                        {{/if}}
                    {{/if}}
                {{/with}}
            {{/if}}
        {{/each}}
    {{/if}}
{{/unless}}
{{#each optionalProperties}}
    {{#if @key.nameIsValid}}
        {{#if refInfo.refClass}}
    {{@key.name}}: typing.Union['{{> components/schemas/_helper_refclass_with_module }}', schemas.Unset] = schemas.unset,
        {{else}}
    {{@key.name}}: typing.Union[Schema_.Properties.{{name.camelCaseName}}, {{> _helper_schema_python_types }}schemas.Unset] = schemas.unset,
        {{/if}}
    {{/if}}
{{/each}}
    configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
{{#with additionalProperties}}
    {{#unless isBooleanSchemaFalse}}
        {{#if refInfo.refClass}}
    **kwargs: '{{> components/schemas/_helper_refclass_with_module }}',
        {{else}}
    **kwargs: typing.Union[Schema_.{{name.camelCaseName}}, {{> _helper_schema_python_types }}],
        {{/if}}
    {{/unless}}
{{else}}
    {{#eq types null}}
    **kwargs: typing.Union[{{> components/schemas/_helper_types_all_incl_schema_oneline }}],
    {{else}}
        {{#contains types "object"}}
    **kwargs: typing.Union[{{> components/schemas/_helper_types_all_incl_schema_oneline }}],
        {{/contains}}
    {{/eq}}
{{/with}}
) -> '{{name.camelCaseName}}':
    return super().__new__(
        cls,
{{#if hasMultipleTypes}}
        *args_,
{{else}}
{{#if types}}
    {{#eq types.size 1}}
        {{#contains types "array"}}
        arg_,
        {{else}}
        *args_,
        {{/contains}}
    {{else}}
        *args_,
    {{/eq}}
{{else}}
        *args_,
{{/if}}
{{/if}}
{{#unless isNull}}
{{#if requiredProperties}}
{{#each requiredProperties}}
{{#if @key.nameIsValid}}
{{#with this}}
        {{@key.name}}={{@key.name}},
{{/with}}
{{/if}}
{{/each}}
{{/if}}
{{/unless}}
{{#each optionalProperties}}
{{#if @key.nameIsValid}}
        {{@key.name}}={{@key.name}},
{{/if}}
{{/each}}
        configuration_=configuration_,
{{#with additionalProperties}}
    {{#unless isBooleanSchemaFalse}}
        **kwargs,
    {{/unless}}
{{else}}
    {{#eq types null}}
        **kwargs,
    {{else}}
        {{#contains types "object"}}
        **kwargs,
        {{/contains}}
    {{/eq}}
{{/with}}
    )
