{{#each getSchemas}}
{{> components/schemas/_helper_schema_switch_case identifierPieces=(append identifierPieces jsonPathPiece) }}
{{/each}}
{{#if imports}}

{{> _helper_imports }}
{{/if}}
{{#each getSchemas}}
    {{#if allOf}}
{{allOf.jsonPathPiece.camelCase}} = typing.Tuple[
        {{#each allOf}}
            {{#if refInfo.refClass}}
    typing.Type[{{#if refInfo.refModule}}{{refInfo.refModule}}.{{/if}}{{refInfo.refClass}}],
            {{else}}
    typing.Type[{{jsonPathPiece.camelCase}}],
            {{/if}}
        {{/each}}
]
    {{/if}}
    {{#if anyOf}}
{{anyOf.jsonPathPiece.camelCase}} = typing.Tuple[
        {{#each anyOf}}
            {{#if refInfo.refClass}}
    typing.Type[{{#if refInfo.refModule}}{{refInfo.refModule}}.{{/if}}{{refInfo.refClass}}],
            {{else}}
    typing.Type[{{jsonPathPiece.camelCase}}],
            {{/if}}
        {{/each}}
]
    {{/if}}
    {{#if oneOf}}
{{oneOf.jsonPathPiece.camelCase}} = typing.Tuple[
        {{#each oneOf}}
            {{#if refInfo.refClass}}
    typing.Type[{{#if refInfo.refModule}}{{refInfo.refModule}}.{{/if}}{{refInfo.refClass}}],
            {{else}}
    typing.Type[{{jsonPathPiece.camelCase}}],
            {{/if}}
        {{/each}}
]
    {{/if}}
    {{#if properties}}
{{properties.jsonPathPiece.camelCase}} = typing_extensions.TypedDict(
    '{{jsonPathPiece.camelCase}}Properties',
    {
        {{#each properties}}
            {{#if refInfo.refClass}}
        "{{{@key.original}}}": typing.Type[{{#if refInfo.refModule}}{{refInfo.refModule}}.{{/if}}{{refInfo.refClass}}],
            {{else}}
        "{{{@key.original}}}": typing.Type[{{jsonPathPiece.camelCase}}],
            {{/if}}
        {{/each}}
    }
)
    {{/if}}
{{/each}}