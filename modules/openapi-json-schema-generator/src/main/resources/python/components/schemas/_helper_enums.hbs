{{#if enumValueToName}}
{{#each enumValueToName}}

@schemas.classproperty
    {{#eq @key.type "string"}}
def {{this}}(cls) -> {{jsonPathPiece.camelCase}}[str]:
    return cls("{{{@key.value}}}") # type: ignore
    {{/eq}}
    {{#eq @key.type "number"}}
def {{this}}(cls) -> {{jsonPathPiece.camelCase}}[decimal.Decimal]:
    return cls({{{@key.value}}}) # type: ignore
    {{/eq}}
    {{#eq @key.type "integer"}}
def {{this}}(cls) -> {{jsonPathPiece.camelCase}}[decimal.Decimal]:
    return cls({{{@key.value}}}) # type: ignore
    {{/eq}}
    {{#eq @key.type "boolean"}}
def {{this}}(cls) -> {{jsonPathPiece.camelCase}}[schemas.BoolClass]:
        {{#if @key.value}}
    return cls(True) # type: ignore
        {{else}}
    return cls(False) # type: ignore
        {{/if}}
    {{/eq}}
    {{#eq @key.type "null"}}
def {{this}}(cls) -> {{jsonPathPiece.camelCase}}[schemas.NoneClass]:
    return cls(None) # type: ignore
    {{/eq}}
{{/each}}
{{/if}}