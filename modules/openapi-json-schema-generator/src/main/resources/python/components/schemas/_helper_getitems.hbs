{{#if requiredProperties}}
{{#each requiredProperties}}
{{#with this}}

@typing.overload
{{#if refInfo.refClass}}
{{> components/schemas/_helper_getitem_refclass literal=true key=@key.original overload=true }}
{{else}}
    {{#if jsonPathPiece}}
        {{#if schemaIsFromAdditionalProperties}}
{{> components/schemas/_helper_getitem_property literal=true key=@key.original overload=true }}
        {{else}}
{{> components/schemas/_helper_getitem_property literal=true key=@key.original overload=true }}
        {{/if}}
    {{else}}
        {{! for when additionalProperties is unset, use schemas.AnyTypeSchema because val is not always schemas.UnsetAnyTypeSchema }}
def __getitem__(self, name: typing_extensions.Literal["{{{@key.original}}}"]) -> schemas.AnyTypeSchema[typing.Union[
    {{> components/schemas/_helper_schema_python_base_types_newline }}
]]: ...
    {{/if}}
{{/if}}
{{/with}}
{{/each}}
{{/if}}
{{#if optionalProperties}}
    {{#each optionalProperties}}

@typing.overload
        {{#if refInfo.refClass}}
{{> components/schemas/_helper_getitem_refclass literal=true key=@key.original overload=true }}
        {{else}}
{{> components/schemas/_helper_getitem_property literal=true key=@key.original overload=true }}
        {{/if}}
    {{/each}}
{{/if}}
{{#or properties requiredProperties}}
    {{#with additionalProperties}}
        {{#unless isBooleanSchemaFalse}}

@typing.overload
            {{#if refInfo.refClass}}
{{> components/schemas/_helper_getitem_refclass literal=false key="str" overload=true }}
            {{else}}
{{> components/schemas/_helper_getitem_property literal=false key="str" overload=true }}
            {{/if}}
        {{/unless}}
    {{else}}
        {{! for when additionalProperties is unset, use schemas.AnyTypeSchema because val is not always schemas.UnsetAnyTypeSchema }}

@typing.overload
def __getitem__(self, name: str) -> schemas.AnyTypeSchema[typing.Union[
    frozendict.frozendict,
    str,
    decimal.Decimal,
    schemas.BoolClass,
    schemas.NoneClass,
    tuple,
    bytes,
    schemas.FileIO
]]: ...
    {{/with}}

def __getitem__(
    self,
    name: typing.Union[
    {{#each requiredProperties}}
        {{#if this}}
        typing_extensions.Literal["{{{@key.original}}}"],
        {{/if}}
    {{/each}}
    {{#each optionalProperties}}
        typing_extensions.Literal["{{{@key.original}}}"],
    {{/each}}
    {{#with additionalProperties}}
        {{#unless isBooleanSchemaFalse}}
        str
        {{/unless}}
    {{else}}
        str
    {{/with}}
    ]
):
    # dict_instance[name] accessor
    return super().__getitem__(name)
{{else}}
    {{! no properties or requiredProperties }}
    {{#with additionalProperties}}
        {{#unless isBooleanSchemaFalse}}

            {{#if refInfo.refClass}}
{{> components/schemas/_helper_getitem_refclass literal=false key="str" overload=false }}
            {{else}}
{{> components/schemas/_helper_getitem_property literal=false key="str" overload=false }}
            {{/if}}
    # dict_instance[name] accessor
    return super().__getitem__(name)
        {{/unless}}
    {{/with}}
{{/or}}