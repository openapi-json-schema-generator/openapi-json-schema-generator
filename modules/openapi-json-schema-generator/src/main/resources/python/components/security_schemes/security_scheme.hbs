# coding: utf-8

{{> _helper_header }}

{{#with securityScheme}}
    {{#if refInfo}}
        {{#if imports}}

        {{/if}}
{{> _helper_imports }}
{{jsonPathPiece.camelCase}} = {{refInfo.refModule}}.{{refInfo.refClass}}
    {{else}}
import dataclasses
import typing
import typing_extensions
        {{#eq type "oauth2"}}
from urllib import parse
        {{/eq}}

from {{packageName}} import security_schemes
        {{#eq type "apiKey"}}


@dataclasses.dataclass
class {{jsonPathPiece.camelCase}}(security_schemes.ApiKeySecurityScheme):
            {{#if description}}
    '''
    {{description}}
    '''
            {{/if}}
    name: str = "{{name}}"
            {{#eq in "query"}}
    in_location: security_schemes.ApiKeyInLocation = security_schemes.ApiKeyInLocation.QUERY
            {{else}}
                {{#eq in "header"}}
    in_location: security_schemes.ApiKeyInLocation = security_schemes.ApiKeyInLocation.HEADER
                {{else}}
                    {{#eq in "cookie"}}
    in_location: security_schemes.ApiKeyInLocation = security_schemes.ApiKeyInLocation.COOKIE
                    {{/eq}}
                {{/eq}}
            {{/eq}}
        {{else}}
            {{#eq type "http"}}


@dataclasses.dataclass
class {{jsonPathPiece.camelCase}}(security_schemes.HTTP{{#eq scheme "basic"}}Basic{{/eq}}{{#eq scheme "bearer"}}Bearer{{/eq}}{{#eq scheme "signature"}}Signature{{/eq}}{{#eq scheme "digest"}}Digest{{/eq}}SecurityScheme):
                {{#if description}}
    '''
    {{description}}
    '''
                {{/if}}
                {{#eq scheme "bearer"}}
    bearer_format = "{{bearerFormat}}"
                {{/eq}}
            {{else}}
                {{#eq type "mutualTLS"}}


@dataclasses.dataclass
class {{jsonPathPiece.camelCase}}(security_schemes.MutualTLSSecurityScheme):
                    {{#if description}}
    '''
    {{description}}
    '''
                    {{else}}
    pass
                    {{/if}}
                {{else}}
                    {{#eq type "oauth2"}}
                        {{#with flows}}
                            {{#with implicit}}


@dataclasses.dataclass
class ImplicitOAuthFlow(security_schemes.ImplicitOAuthFlow):
    authorization_url: parse.ParseResult = parse.ParseResult(
                                {{#with authorizationUrl}}
        scheme="{{getProtocol}}",
        netloc="{{getAuthority}}",
        path="{{getPath}}",
        params='',
        query='',
        fragment=''
                                {{/with}}
    )
    scopes: typing.Dict[str, str] = dataclasses.field(default_factory=lambda: {
                                {{#each scopes}}
        "{{@key}}": "{{this}}",
                                {{/each}}
    })
                                {{#if refreshUrl}}
    refresh_url: str = "{{refreshUrl}}"
                                {{/if}}
                            {{/with}}
                            {{#with password}}


@dataclasses.dataclass
class PasswordOauthFlow(security_schemes.PasswordOauthFlow):
    token_url: parse.ParseResult = parse.ParseResult(
                                {{#with tokenUrl}}
        scheme="{{getProtocol}}",
        netloc="{{getAuthority}}",
        path="{{getPath}}",
        params='',
        query='',
        fragment=''
                                {{/with}}
    )
    scopes: typing.Dict[str, str] = dataclasses.field(default_factory=lambda: {
                                {{#each scopes}}
        "{{@key}}": "{{this}}",
                                {{/each}}
    })
                                {{#if refreshUrl}}
    refresh_url: str = "{{refreshUrl}}"
                                {{/if}}
                            {{/with}}
                            {{#with clientCredentials}}


@dataclasses.dataclass
class ClientCredentialsOauthFlow(security_schemes.ClientCredentialsOauthFlow):
    token_url: parse.ParseResult = parse.ParseResult(
                                {{#with tokenUrl}}
        scheme="{{getProtocol}}",
        netloc="{{getAuthority}}",
        path="{{getPath}}",
        params='',
        query='',
        fragment=''
                                {{/with}}
    )
    scopes: typing.Dict[str, str] = dataclasses.field(default_factory=lambda: {
                                {{#each scopes}}
        "{{@key}}": "{{this}}",
                                {{/each}}
    })

                                {{#if refreshUrl}}
    refresh_url: str = "{{refreshUrl}}"
                                {{/if}}
                            {{/with}}
                            {{#with authorizationCode}}


@dataclasses.dataclass
class AuthorizationCodeOauthFlow(security_schemes.AuthorizationCodeOauthFlow):
    authorization_url: parse.ParseResult = parse.ParseResult(
                                {{#with authorizationUrl}}
        scheme="{{getProtocol}}",
        netloc="{{getAuthority}}",
        path="{{getPath}}",
        params='',
        query='',
        fragment=''
                                {{/with}}
    )
    token_url: parse.ParseResult = parse.ParseResult(
                                {{#with tokenUrl}}
        scheme="{{getProtocol}}",
        netloc="{{getAuthority}}",
        path="{{getPath}}",
        params='',
        query='',
        fragment=''
                                {{/with}}
    )
    scopes: typing.Dict[str, str] = dataclasses.field(default_factory=lambda: {
                                {{#each scopes}}
        "{{@key}}": "{{this}}",
                                {{/each}}
    })
                                {{#if refreshUrl}}
    refresh_url: str = "{{refreshUrl}}"
                                {{/if}}
                            {{/with}}
                        {{/with}}


class OAuthFlows(security_schemes.OAuthFlows):
                        {{#with flows}}
                            {{#if password}}
    password: PasswordOauthFlow
                            {{/if}}
                            {{#if implicit}}
    implicit: ImplicitOAuthFlow = ImplicitOAuthFlow()
                            {{/if}}
                            {{#if clientCredentials}}
    client_credentials: ClientCredentialsOauthFlow = ClientCredentialsOauthFlow()
                            {{/if}}
                            {{#if authorizationCode}}
    authorization_code: AuthorizationCodeOauthFlow = AuthorizationCodeOauthFlow()
                            {{/if}}
                        {{/with}}



@dataclasses.dataclass
class {{jsonPathPiece.camelCase}}(security_schemes.OAuth2SecurityScheme):
                        {{#if description}}
    '''
    {{description}}
    '''
                        {{/if}}
    flows: OAuthFlows
                    {{else}}
                        {{#eq type "openIdConnect"}}


@dataclasses.dataclass
class {{jsonPathPiece.camelCase}}(security_schemes.OpenIdConnectSecurityScheme):
                            {{#if description}}
    '''
    {{description}}
    '''
                            {{/if}}
    openid_connect_url = "{{openIdConnectUrl}}"
                        {{/eq}}
                    {{/eq}}
                {{/eq}}
            {{/eq}}
        {{/eq}}
    {{/if}}
{{/with}}
