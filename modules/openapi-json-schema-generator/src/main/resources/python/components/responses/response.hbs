# coding: utf-8

{{> _helper_header }}

{{#with response}}
{{#if refInfo}}
    {{#if imports}}

    {{/if}}
{{> _helper_imports }}
{{jsonPathPiece.camelCase}} = {{refInfo.refModule}}.{{refInfo.refClass}}
{{else}}
from {{packageName}}.shared_imports.response_imports import *
    {{#if content}}

    {{#each content}}
        {{#with this.schema}}
from .content.{{../@key.snakeCase}} import {{jsonPathPiece.snakeCase}} as {{../@key.snakeCase}}_{{jsonPathPiece.snakeCase}}
        {{/with}}
    {{/each}}
    {{/if}}
    {{#if headers}}
        {{#unless content}}

        {{/unless}}
        {{#each headers}}
from .headers import {{jsonPathPiece.snakeCase}}
        {{/each}}
{{> components/responses/_helper_header_schema_and_def xParams=headers xParamsName="Header" }}
    {{/if}}


@dataclasses.dataclass
class Api{{jsonPathPiece.camelCase}}(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    {{#and headers content}}
        {{#if hasContentSchema}}
            {{#gt content.size 1}}
    body: typing.Union[
                {{#each content}}
                    {{#if this.schema}}
                        {{#with this.schema}}
        {{> components/_helper_content_schema_type paramName=null modulePrefix=../@key.snakeCase }}
                        {{/with}}
                    {{else}}
        schemas.Unset,
                    {{/if}}
                {{/each}}
    ]
            {{else}}
                {{#each content}}
                    {{#if this.schema}}
                        {{#with this.schema}}
    {{> components/_helper_content_schema_type paramName="body" modulePrefix=../@key.snakeCase }}
                        {{/with}}
                    {{else}}
    body: schemas.Unset
                    {{/if}}
                {{/each}}
            {{/gt}}
        {{else}}
    body: schemas.Unset = schemas.unset
        {{/if}}
    headers: Header.Params
    {{else}}
        {{#or headers content}}
            {{#if headers}}
    headers: Header.Params
    body: schemas.Unset = schemas.unset
            {{else}}
                {{#if hasContentSchema}}
                    {{#gt content.size 1}}
    body: typing.Union[
                        {{#each content}}
                            {{#if this.schema}}
                                {{#with this.schema}}
        {{> components/_helper_content_schema_type paramName=null modulePrefix=../@key.snakeCase }}
                                {{/with}}
                            {{else}}
        schemas.Unset,
                            {{/if}}
                        {{/each}}
    ]
                    {{else}}
                        {{#each content}}
                            {{#if this.schema}}
                                {{#with this.schema}}
    {{> components/_helper_content_schema_type paramName="body" modulePrefix=../@key.snakeCase }}
                                {{/with}}
                            {{else}}
    body: schemas.Unset
                            {{/if}}
                        {{/each}}
                    {{/gt}}
                {{else}}
    body: schemas.Unset = schemas.unset
                {{/if}}
    headers: schemas.Unset = schemas.unset
            {{/if}}
        {{/or}}
    {{/and}}
    {{#unless headers}}
    {{#unless content}}
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset
    {{/unless}}
    {{/unless}}


class {{jsonPathPiece.camelCase}}(api_client.OpenApiResponse[Api{{jsonPathPiece.camelCase}}]):
    response_cls = Api{{jsonPathPiece.camelCase}}
    {{#each content}}


    class {{@key.camelCase}}MediaType(api_client.MediaType):
        {{#with this}}
            {{#with schema}}
        {{> components/_helper_content_schema_type paramName="schema" modulePrefix=../@key.snakeCase }}
            {{else}}
        pass
            {{/with}}
        {{/with}}
    {{/each}}
    {{#if content}}
    Content = typing_extensions.TypedDict(
        'Content',
        {
        {{#each content}}
            '{{{@key.original}}}': typing.Type[{{@key.camelCase}}MediaType],
        {{/each}}
        }
    )
    content: Content = {
        {{#each content}}
        '{{{@key.original}}}': {{@key.camelCase}}MediaType,
        {{/each}}
    }
    {{/if}}
    {{#if headers}}
    headers=Header.parameters
    {{/if}}
{{/if}}
{{/with}}