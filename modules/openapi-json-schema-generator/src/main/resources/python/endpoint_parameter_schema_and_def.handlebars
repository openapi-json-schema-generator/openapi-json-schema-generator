

class {{xParamsName}}:
    RequiredParams = typing_extensions.TypedDict(
        'RequiredParams',
        {
{{#each xParams}}
{{#if ref}}
    {{#if ref.getRef.required}}
        {{#if ref.getRef.schema}}
            '{{ref.getRef.baseName}}': {{#with ref.getRef.schema}}typing.Union[{{#if ../refModule}}{{../refModule}}{{else}}{{../name.getSnakeCaseName}}{{/if}}.{{#if refModule}}{{refModule}}.{{refClass}}{{else}}{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}{{/if}}, {{> model_templates/schema_python_types }}],{{/with}}
        {{else}}
            '{{ref.getRef.baseName}}': {{#each ref.getRef.getContent}}{{#with this}}{{#with schema}}typing.Union[{{#if ../refModule}}{{../refModule}}{{else}}{{../name.getSnakeCaseName}}{{/if}}.{{#if refModule}}{{refModule}}.{{refClass}}{{else}}{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}{{/if}}, {{> model_templates/schema_python_types }}],{{/with}}{{/with}}{{/each}}
        {{/if}}
    {{/if}}
{{else}}
    {{#if required}}
        {{#if schema}}
            '{{baseName}}': {{#with schema}}typing.Union[{{#if ../refModule}}{{../refModule}}{{else}}{{../name.getSnakeCaseName}}{{/if}}.{{#if refModule}}{{refModule}}.{{refClass}}{{else}}{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}{{/if}}, {{> model_templates/schema_python_types }}],{{/with}}
        {{else}}
            '{{baseName}}': {{#each getContent}}{{#with this}}{{#with schema}}typing.Union[{{#if ../refModule}}{{../refModule}}{{else}}{{../name.getSnakeCaseName}}{{/if}}.{{#if refModule}}{{refModule}}.{{refClass}}{{else}}{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}{{/if}}, {{> model_templates/schema_python_types }}],{{/with}}{{/with}}{{/each}}
        {{/if}}
    {{/if}}
{{/if}}
{{/each}}
        }
    )
    OptionalParams = typing_extensions.TypedDict(
        'OptionalParams',
        {
{{#each xParams}}
{{#if ref}}
    {{#unless ref.getRef.required}}
        {{#if ref.getRef.schema}}
            '{{ref.getRef.baseName}}': {{#with ref.getRef.schema}}typing.Union[{{#if ../refModule}}{{../refModule}}{{else}}{{../name.getSnakeCaseName}}{{/if}}.{{#if refModule}}{{refModule}}.{{refClass}}{{else}}{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}{{/if}}, {{> model_templates/schema_python_types }}],{{/with}}
        {{else}}
            '{{ref.getRef.baseName}}': {{#each ref.getRef.getContent}}{{#with this}}{{#with schema}}typing.Union[{{#if ../refModule}}{{../refModule}}{{else}}{{../name.getSnakeCaseName}}{{/if}}.{{#if refModule}}{{refModule}}.{{refClass}}{{else}}{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}{{/if}}, {{> model_templates/schema_python_types }}],{{/with}}{{/with}}{{/each}}
        {{/if}}
    {{/unless}}
{{else}}
    {{#unless required}}
        {{#if schema}}
            '{{baseName}}': {{#with schema}}typing.Union[{{#if ../refModule}}{{../refModule}}{{else}}{{../name.getSnakeCaseName}}{{/if}}.{{#if refModule}}{{refModule}}.{{refClass}}{{else}}{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}{{/if}}, {{> model_templates/schema_python_types }}],{{/with}}
        {{else}}
            '{{baseName}}': {{#each getContent}}{{#with this}}{{#with schema}}typing.Union[{{#if ../refModule}}{{../refModule}}{{else}}{{../name.getSnakeCaseName}}{{/if}}.{{#if refModule}}{{refModule}}.{{refClass}}{{else}}{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}{{/if}}, {{> model_templates/schema_python_types }}],{{/with}}{{/with}}{{/each}}
        {{/if}}
    {{/unless}}
{{/if}}
{{/each}}
        },
        total=False
    )


    class Params(RequiredParams, OptionalParams):
        pass


    parameters = [
    {{#each xParams}}
        {{#if refModule}}{{refModule}}{{else}}{{name.getSnakeCaseName}}{{/if}}.{{#if refClass}}{{refClass}}{{else}}{{name.getCamelCaseName}}{{/if}},
    {{/each}}
    ]