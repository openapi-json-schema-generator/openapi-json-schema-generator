

class {{xParamsName}}:
    class Schemas:
{{#each xParams}}
    {{#if schema}}
        {{#with schema}}
        {{> model_templates/schema }}
        {{/with}}
    {{else}}
        {{#if getContent}}
            {{#each getContent}}
                {{#with this}}
                    {{#with schema}}
        {{> model_templates/schema }}
                    {{/with}}
                {{/with}}
            {{/each}}
        {{/if}}
    {{/if}}
{{/each}}


    RequiredParams = typing_extensions.TypedDict(
        'RequiredParams',
        {
{{#each xParams}}
{{#if required}}
{{#if schema}}
            '{{baseName}}': {{#with schema}}typing.Union[Schemas.{{#if nameInSnakeCase}}{{name}}{{else}}{{baseName}}{{/if}}, {{> model_templates/schema_python_types }}],{{/with}}
{{else}}
            '{{baseName}}': {{#each getContent}}{{#with this}}{{#with schema}}typing.Union[Schemas.{{#if nameInSnakeCase}}{{name}}{{else}}{{baseName}}{{/if}}, {{> model_templates/schema_python_types }}],{{/with}}{{/with}}{{/each}}
{{/if}}
{{/if}}
{{/each}}
        }
    )
    OptionalParams = typing_extensions.TypedDict(
        'OptionalParams',
        {
{{#each xParams}}
{{#unless required}}
{{#if schema}}
            '{{baseName}}': {{#with schema}}typing.Union[Schemas.{{#if nameInSnakeCase}}{{name}}{{else}}{{baseName}}{{/if}}, {{> model_templates/schema_python_types }}],{{/with}}
{{else}}
            '{{baseName}}': {{#each getContent}}{{#with this}}{{#with schema}}typing.Union[Schemas.{{#if nameInSnakeCase}}{{name}}{{else}}{{baseName}}{{/if}}, {{> model_templates/schema_python_types }}],{{/with}}{{/with}}{{/each}}
{{/if}}
{{/unless}}
{{/each}}
        },
        total=False
    )


    class Params(RequiredParams, OptionalParams):
        pass


    parameters = [
    {{#each xParams}}
        {{> endpoint_parameter }}
    {{/each}}
    ]