

class {{xParamsName}}:
    RequiredParams = typing_extensions.TypedDict(
        'RequiredParams',
        {
{{#each xParams}}
{{#if refInfo}}
    {{#if getDeepestRef.required}}
        {{#if getDeepestRef.schema}}
            '{{refInfo.getRef.baseName}}': typing.Union[{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}.schema, {{#with getDeepestRef.schema}}{{> model_templates/schema_python_types }}{{/with}}],
        {{else}}
            '{{refInfo.getRef.baseName}}': {{#each getDeepestRef.getContent}}{{#with this}}{{#with schema}}typing.Union[{{../../../name.getSnakeCaseName}}.{{../../../name.getCamelCaseName}}.content["{{{../@key.getName}}}"].schema, {{> model_templates/schema_python_types }}],{{/with}}{{/with}}{{/each}}
        {{/if}}
    {{/if}}
{{else}}
    {{#if required}}
        {{#if schema}}
            '{{baseName}}': {{#with schema}}typing.Union[{{../name.getSnakeCaseName}}.{{../name.getCamelCaseName}}.schema, {{> model_templates/schema_python_types }}],{{/with}}
        {{else}}
            '{{baseName}}': {{#each getContent}}{{#with this}}{{#with schema}}typing.Union[{{../name.getSnakeCaseName}}.{{../name.getCamelCaseName}}.content["{{{../@key.getName}}}"].schema, {{> model_templates/schema_python_types }}],{{/with}}{{/with}}{{/each}}
        {{/if}}
    {{/if}}
{{/if}}
{{/each}}
        }
    )
    OptionalParams = typing_extensions.TypedDict(
        'OptionalParams',
        {
{{#each xParams}}
{{#if refInfo}}
    {{#unless getDeepestRef.required}}
        {{#if getDeepestRef.schema}}
            '{{refInfo.getRef.baseName}}': typing.Union[{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}.schema, {{#with getDeepestRef.schema}}{{> model_templates/schema_python_types }}{{/with}}],
        {{else}}
            '{{refInfo.getRef.baseName}}': {{#each getDeepestRef.getContent}}{{#with this}}{{#with schema}}typing.Union[{{../../../name.getSnakeCaseName}}.{{../../../name.getCamelCaseName}}.content["{{{../@key.getName}}}"].schema, {{> model_templates/schema_python_types }}],{{/with}}{{/with}}{{/each}}
        {{/if}}
    {{/unless}}
{{else}}
    {{#unless required}}
        {{#if schema}}
            '{{baseName}}': typing.Union[{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}.schema, {{#with schema}}{{> model_templates/schema_python_types }}{{/with}}],
        {{else}}
            '{{baseName}}': {{#each getContent}}{{#with this}}{{#with schema}}typing.Union[{{../name.getSnakeCaseName}}.{{../name.getCamelCaseName}}.content["{{{../@key.getName}}}"].schema, {{> model_templates/schema_python_types }}],{{/with}}{{/with}}{{/each}}
        {{/if}}
    {{/unless}}
{{/if}}
{{/each}}
        },
        total=False
    )


    class Params(RequiredParams, OptionalParams):
        pass


    parameters = [
    {{#each xParams}}
        {{name.getSnakeCaseName}}.{{name.getCamelCaseName}},
    {{/each}}
    ]