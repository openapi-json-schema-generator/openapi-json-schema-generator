# coding: utf-8

{{>partial_header}}

import typing

from {{packageName}} import api_client, exceptions
{{#with requestBody}}
{{> model_templates/imports }}
{{#each content}}
{{#with this}}
    {{#with schema}}
        {{#unless refInfo.getRefModule}}
from .content.{{../@key.getSnakeCaseName}} import {{name.getSnakeCaseName}} as {{../@key.getSnakeCaseName}}_{{name.getSnakeCaseName}}
        {{/unless}}
    {{/with}}
{{/with}}
{{/each}}

class {{name.getCamelCaseName}}(api_client.RequestBody):
{{#each content}}


    class __{{@key.getCamelCaseName}}MediaType(api_client.MediaType):
    {{#with this}}
        {{#with schema}}
            {{#if refInfo.getRefModule}}
        schema: typing.Type[{{refInfo.getRefModule}}.{{refInfo.getRefClass}}] = {{refInfo.getRefModule}}.{{refInfo.getRefClass}}
            {{else}}
        schema: typing.Type[{{../@key.getSnakeCaseName}}_{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}] = {{../@key.getSnakeCaseName}}_{{name.getSnakeCaseName}}.{{name.getCamelCaseName}}
            {{/if}}
        {{/with}}
    {{/with}}
{{/each}}
    __Content = typing.TypedDict(
        '__Content',
        {
{{#each content}}
            '{{{@key.getName}}}': __{{@key.getCamelCaseName}}MediaType,
{{/each}}
        }
    )
    content: __Content = {
{{#each content}}
        '{{{@key.getName}}}': __{{@key.getCamelCaseName}}MediaType,
{{/each}}
    }
{{#if required}}
    required = True
{{/if}}
{{/with}}
