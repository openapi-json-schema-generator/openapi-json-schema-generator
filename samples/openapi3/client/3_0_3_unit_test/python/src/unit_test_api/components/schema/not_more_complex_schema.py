# coding: utf-8

"""
    openapi 3.0.3 sample spec
    sample spec for testing openapi functionality, built from json schema tests for draft6  # noqa: E501
    The version of the OpenAPI document: 0.0.1
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from unit_test_api.shared_imports.schema_imports import *


class NotMoreComplexSchema(
    schemas.AnyTypeSchema[schemas.T],
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """


    class Schema_:
        # any type
        
        
        class _Not(
            schemas.DictSchema[schemas.T]
        ):
        
        
            class Schema_:
                types = {frozendict.frozendict}
                
                class Properties:
                    Foo: typing_extensions.TypeAlias = schemas.StrSchema[U]
                    __annotations__ = {
                        "foo": Foo,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["foo"]) -> Schema_.Properties.Foo[str]: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.AnyTypeSchema[typing.Union[
                frozendict.frozendict,
                str,
                decimal.Decimal,
                schemas.BoolClass,
                schemas.NoneClass,
                tuple,
                bytes,
                schemas.FileIO
            ]]: ...
            
            def __getitem__(
                self,
                name: typing.Union[
                    typing_extensions.Literal["foo"],
                    str
                ]
            ):
                # dict_instance[name] accessor
                return super().__getitem__(name)
        
            def __new__(
                cls,
                *args_: typing.Union[dict, frozendict.frozendict],
                foo: typing.Union[Schema_.Properties.Foo, str, schemas.Unset] = schemas.unset,
                configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
                **kwargs: typing.Union[dict, frozendict.frozendict, list, tuple, decimal.Decimal, float, int, str, datetime.date, datetime.datetime, uuid.UUID, bool, None, bytes, io.FileIO, io.BufferedReader, schemas.Schema],
            ) -> NotMoreComplexSchema.Schema_._Not[frozendict.frozendict]:
                inst = super().__new__(
                    cls,
                    *args_,
                    foo=foo,
                    configuration_=configuration_,
                    **kwargs,
                )
                inst = typing.cast(
                    NotMoreComplexSchema.Schema_._Not[frozendict.frozendict],
                    inst
                )
                return inst


    def __new__(
        cls,
        *args_: typing.Union[dict, frozendict.frozendict, str, datetime.date, datetime.datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader],
        configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
        **kwargs: typing.Union[dict, frozendict.frozendict, list, tuple, decimal.Decimal, float, int, str, datetime.date, datetime.datetime, uuid.UUID, bool, None, bytes, io.FileIO, io.BufferedReader, schemas.Schema],
    ) -> NotMoreComplexSchema[
        typing.Union[
            frozendict.frozendict,
            str,
            decimal.Decimal,
            schemas.BoolClass,
            schemas.NoneClass,
            tuple,
            bytes,
            schemas.FileIO
        ]
    ]:
        inst = super().__new__(
            cls,
            *args_,
            configuration_=configuration_,
            **kwargs,
        )
        inst = typing.cast(
            NotMoreComplexSchema[
                typing.Union[
                    frozendict.frozendict,
                    str,
                    decimal.Decimal,
                    schemas.BoolClass,
                    schemas.NoneClass,
                    tuple,
                    bytes,
                    schemas.FileIO
                ]
            ],
            inst
        )
        return inst
