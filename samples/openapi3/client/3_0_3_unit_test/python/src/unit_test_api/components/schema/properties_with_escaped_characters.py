# coding: utf-8

"""
    openapi 3.0.3 sample spec
    sample spec for testing openapi functionality, built from json schema tests for draft6  # noqa: E501
    The version of the OpenAPI document: 0.0.1
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from unit_test_api.shared_imports.schema_imports import *


class PropertiesWithEscapedCharacters(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """


    class Schema_:
        # any type
        
        class Properties:
            FooNbar = schemas.NumberSchema
            FooBar = schemas.NumberSchema
            FooBar = schemas.NumberSchema
            FooRbar = schemas.NumberSchema
            FooTbar = schemas.NumberSchema
            FooFbar = schemas.NumberSchema
            __annotations__ = {
                "foo\nbar": FooNbar,
                "foo\"bar": FooBar,
                "foo\\bar": FooBar,
                "foo\rbar": FooRbar,
                "foo\tbar": FooTbar,
                "foo\fbar": FooFbar,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foo\nbar"]) -> Schema_.Properties.FooNbar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foo\"bar"]) -> Schema_.Properties.FooBar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foo\\bar"]) -> Schema_.Properties.FooBar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foo\rbar"]) -> Schema_.Properties.FooRbar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foo\tbar"]) -> Schema_.Properties.FooTbar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foo\fbar"]) -> Schema_.Properties.FooFbar: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["foo\nbar"],
            typing_extensions.Literal["foo\"bar"],
            typing_extensions.Literal["foo\\bar"],
            typing_extensions.Literal["foo\rbar"],
            typing_extensions.Literal["foo\tbar"],
            typing_extensions.Literal["foo\fbar"],
            str
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

