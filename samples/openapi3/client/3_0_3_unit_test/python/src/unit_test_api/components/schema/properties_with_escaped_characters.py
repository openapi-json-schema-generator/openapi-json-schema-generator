# coding: utf-8

"""
    openapi 3.0.3 sample spec
    sample spec for testing openapi functionality, built from json schema tests for draft6  # noqa: E501
    The version of the OpenAPI document: 0.0.1
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from unit_test_api.shared_imports.schema_imports import *

FooNbar: typing_extensions.TypeAlias = schemas.NumberSchema[U]
FooBar: typing_extensions.TypeAlias = schemas.NumberSchema[U]
FooBar: typing_extensions.TypeAlias = schemas.NumberSchema[U]
FooRbar: typing_extensions.TypeAlias = schemas.NumberSchema[U]
FooTbar: typing_extensions.TypeAlias = schemas.NumberSchema[U]
FooFbar: typing_extensions.TypeAlias = schemas.NumberSchema[U]
Properties = typing_extensions.TypedDict(
    'Properties',
    {
        "foo\nbar": typing.Type[FooNbar],
        "foo\"bar": typing.Type[FooBar],
        "foo\\bar": typing.Type[FooBar],
        "foo\rbar": typing.Type[FooRbar],
        "foo\tbar": typing.Type[FooTbar],
        "foo\fbar": typing.Type[FooFbar],
    }
)
DictInput = typing.Mapping[
    str,
    typing.Union[
        typing.Union[
            FooNbar[decimal.Decimal],
            decimal.Decimal,
            int,
            float
        ],
        typing.Union[
            FooBar[decimal.Decimal],
            decimal.Decimal,
            int,
            float
        ],
        typing.Union[
            FooBar[decimal.Decimal],
            decimal.Decimal,
            int,
            float
        ],
        typing.Union[
            FooRbar[decimal.Decimal],
            decimal.Decimal,
            int,
            float
        ],
        typing.Union[
            FooTbar[decimal.Decimal],
            decimal.Decimal,
            int,
            float
        ],
        typing.Union[
            FooFbar[decimal.Decimal],
            decimal.Decimal,
            int,
            float
        ],
        schemas.INPUT_TYPES_ALL_INCL_SCHEMA
    ]
]


class PropertiesWithEscapedCharacters(
    schemas.AnyTypeSchema[schemas.T],
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """


    @dataclasses.dataclass(frozen=True)
    class Schema_(metaclass=schemas.SingletonMeta):
        # any type
        properties: Properties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(Properties)) # type: ignore

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foo\nbar"]) -> FooNbar[decimal.Decimal]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foo\"bar"]) -> FooBar[decimal.Decimal]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foo\\bar"]) -> FooBar[decimal.Decimal]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foo\rbar"]) -> FooRbar[decimal.Decimal]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foo\tbar"]) -> FooTbar[decimal.Decimal]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foo\fbar"]) -> FooFbar[decimal.Decimal]: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.AnyTypeSchema[typing.Union[
        frozendict.frozendict,
        str,
        decimal.Decimal,
        schemas.BoolClass,
        schemas.NoneClass,
        tuple,
        bytes,
        schemas.FileIO
    ]]: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["foo\nbar"],
            typing_extensions.Literal["foo\"bar"],
            typing_extensions.Literal["foo\\bar"],
            typing_extensions.Literal["foo\rbar"],
            typing_extensions.Literal["foo\tbar"],
            typing_extensions.Literal["foo\fbar"],
            str
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    def __new__(
        cls,
        arg: typing.Union[
            DictInput,
            schemas.INPUT_TYPES_ALL_INCL_SCHEMA
        ],
        configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    ) -> PropertiesWithEscapedCharacters[
        typing.Union[
            frozendict.frozendict,
            str,
            decimal.Decimal,
            schemas.BoolClass,
            schemas.NoneClass,
            tuple,
            bytes,
            schemas.FileIO
        ]
    ]:
        inst = super().__new__(
            cls,
            arg,
            configuration=configuration,
        )
        inst = typing.cast(
            PropertiesWithEscapedCharacters[
                typing.Union[
                    frozendict.frozendict,
                    str,
                    decimal.Decimal,
                    schemas.BoolClass,
                    schemas.NoneClass,
                    tuple,
                    bytes,
                    schemas.FileIO
                ]
            ],
            inst
        )
        return inst

