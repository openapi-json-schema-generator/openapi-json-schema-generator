# coding: utf-8

"""
    openapi 3.0.3 sample spec

    sample spec for testing openapi functionality, built from json schema tests for draft6  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

import unittest

import unit_test_api
from unit_test_api.components.schema.root_pointer_ref_oapg import RootPointerRef
from unit_test_api import configuration


class TestRootPointerRef(unittest.TestCase):
    """RootPointerRef unit test stubs"""
    _configuration = configuration.Configuration()

    def test_recursive_mismatch_fails(self):
        # recursive mismatch
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
            RootPointerRef.from_openapi_data_oapg(
                {
                    "foo":
                        {
                            "bar":
                                False,
                        },
                },
                _configuration=self._configuration
            )

    def test_mismatch_fails(self):
        # mismatch
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
            RootPointerRef.from_openapi_data_oapg(
                {
                    "bar":
                        False,
                },
                _configuration=self._configuration
            )

    def test_match_passes(self):
        # match
        RootPointerRef.from_openapi_data_oapg(
            {
                "foo":
                    {
                    },
            },
            _configuration=self._configuration
        )

    def test_recursive_match_passes(self):
        # recursive match
        RootPointerRef.from_openapi_data_oapg(
            {
                "foo":
                    {
                        "foo":
                            {
                            },
                    },
            },
            _configuration=self._configuration
        )


if __name__ == '__main__':
    unittest.main()
