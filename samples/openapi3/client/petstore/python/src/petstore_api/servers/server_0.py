# coding: utf-8
"""
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from petstore_api.shared_imports.server_imports import *


class _Variables:
    
    
    class Server(
        schemas.StrSchema[schemas.T]
    ):
    
    
        @dataclasses.dataclass(frozen=True)
        class Schema_:
            types: typing.FrozenSet[typing.Type] = frozenset({
                str,
            })
            default: str = "petstore"
            enum_value_to_name: typing.Mapping[typing.Union[int, float, str, schemas.BoolClass, schemas.NoneClass], str] = dataclasses.field(
                default_factory=lambda: {
                    "petstore": "PETSTORE",
                    "qa-petstore": "QA_HYPHEN_MINUS_PETSTORE",
                    "dev-petstore": "DEV_HYPHEN_MINUS_PETSTORE",
                }
            )
        
        @schemas.classproperty
        def PETSTORE(cls) -> Server[str]:
            return cls("petstore") # type: ignore
        
        @schemas.classproperty
        def QA_HYPHEN_MINUS_PETSTORE(cls) -> Server[str]:
            return cls("qa-petstore") # type: ignore
        
        @schemas.classproperty
        def DEV_HYPHEN_MINUS_PETSTORE(cls) -> Server[str]:
            return cls("dev-petstore") # type: ignore
    
    
    class Port(
        schemas.StrSchema[schemas.T]
    ):
    
    
        @dataclasses.dataclass(frozen=True)
        class Schema_:
            types: typing.FrozenSet[typing.Type] = frozenset({
                str,
            })
            default: str = "80"
            enum_value_to_name: typing.Mapping[typing.Union[int, float, str, schemas.BoolClass, schemas.NoneClass], str] = dataclasses.field(
                default_factory=lambda: {
                    "80": "POSITIVE_80",
                    "8080": "POSITIVE_8080",
                }
            )
        
        @schemas.classproperty
        def POSITIVE_80(cls) -> Port[str]:
            return cls("80") # type: ignore
        
        @schemas.classproperty
        def POSITIVE_8080(cls) -> Port[str]:
            return cls("8080") # type: ignore

_VariablesSchemas = typing_extensions.TypedDict(
    '_VariablesSchemas',
    {
        "server": typing.Type[_Variables.Server],
        "port": typing.Type[_Variables.Port],
    },
    total=False
)

Variables = typing_extensions.TypedDict(
    'Variables',
    {
        "server": typing_extensions.Literal[
            "petstore",
            "qa-petstore",
            "dev-petstore",
        ],
        "port": typing_extensions.Literal[
            "80",
            "8080",
        ],
    },
    total=False
)

def _default_variable_schemas() -> _VariablesSchemas:
    return {
        "server": _Variables.Server,
        "port": _Variables.Port,
    }


@dataclasses.dataclass
class Server0(server.Server):
    '''
    petstore server
    '''
    variables: typing.Optional[Variables] = None
    variable_schemas: _VariablesSchemas = dataclasses.field(default_factory=_default_variable_schemas)
    _url: str = "http://{server}.swagger.io:{port}/v2"
