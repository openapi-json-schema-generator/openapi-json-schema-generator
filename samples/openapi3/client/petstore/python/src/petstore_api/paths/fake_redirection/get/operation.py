# coding: utf-8

"""
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from petstore_api import api_client
from petstore_api.shared_imports.operation_imports import *

from .. import path
from .responses import (
    response_303,
    response_3xx,
)



__StatusCodeToResponse = typing_extensions.TypedDict(
    '__StatusCodeToResponse',
    {
        '303': typing.Type[response_303.ResponseFor303],
    }
)
_status_code_to_response: __StatusCodeToResponse = {
    '303': response_303.ResponseFor303,
}
__RangedStatusCodeToResponse = typing_extensions.TypedDict(
    '__RangedStatusCodeToResponse',
    {
        '3': typing.Type[response_3xx.ResponseFor3XX],
    }
)
_ranged_status_code_to_response: __RangedStatusCodeToResponse = {
    '3': response_3xx.ResponseFor3XX,
}


class BaseApi(api_client.Api):
    @typing.overload
    def _redirection(
        self,
        server_index: typing.Optional[int] = None,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        response_3xx.ResponseFor3XX.response_cls,
        response_303.ResponseFor303.response_cls,
    ]: ...

    @typing.overload
    def _redirection(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        server_index: typing.Optional[int] = None,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _redirection(
        self,
        server_index: typing.Optional[int] = None,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        response_3xx.ResponseFor3XX.response_cls,
        response_303.ResponseFor303.response_cls,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _redirection(
        self,
        server_index: typing.Optional[int] = None,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        operation with redirection responses
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path
        # TODO add cookie handling
        host = self.api_client.configuration.get_server_url(
            'servers', server_index
        )

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get',
            host=host,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            status = str(response.status)
            ranged_response_status_code = status[0]
            if status in _status_code_to_response:
                status: typing_extensions.Literal[
                    '303',
                ]
                api_response = _status_code_to_response[status].deserialize(
                    response, self.api_client.schema_configuration)
            elif ranged_response_status_code in _ranged_status_code_to_response:
                ranged_response_status_code: typing_extensions.Literal[
                    '3',
                ]
                api_response = _ranged_status_code_to_response[ranged_response_status_code].deserialize(
                    response, self.api_client.schema_configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        self._verify_response_status(api_response)

        return api_response


class Redirection(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId.snakeCase fn names
    redirection = BaseApi._redirection


class ApiForGet(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names
    get = BaseApi._redirection
