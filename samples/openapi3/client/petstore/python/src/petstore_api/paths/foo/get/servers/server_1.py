# coding: utf-8
"""
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from petstore_api.shared_imports.schema_imports import *
from petstore_api.shared_imports.server_imports import *


class Version(
    schemas.StrSchema[schemas.T]
):


    @dataclasses.dataclass(frozen=True)
    class Schema_(metaclass=schemas.SchemaBase):
        types: typing.FrozenSet[typing.Type] = frozenset({
            str,
        })
        default: str = "v1"
        enum_value_to_name: typing.Mapping[typing.Union[int, float, str, schemas.BoolClass, schemas.NoneClass], str] = dataclasses.field(
            default_factory=lambda: {
                "v1": "V1",
                "v2": "V2",
            }
        )
    
    @schemas.classproperty
    def V1(cls) -> Version[str]:
        return cls("v1") # type: ignore
    
    @schemas.classproperty
    def V2(cls) -> Version[str]:
        return cls("v2") # type: ignore


class Variables(
    schemas.DictSchema[schemas.T]
):


    @dataclasses.dataclass(frozen=True)
    class Schema_(metaclass=schemas.SchemaBase):
        types: typing.FrozenSet[typing.Type] = frozenset({frozendict.frozendict})
        properties: VariablesProperties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(VariablesProperties)) # type: ignore
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> Version[str]: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.AnyTypeSchema[typing.Union[
        frozendict.frozendict,
        str,
        decimal.Decimal,
        schemas.BoolClass,
        schemas.NoneClass,
        tuple,
        bytes,
        schemas.FileIO
    ]]: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["version"],
            str
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    def __new__(
        cls,
        *args_: typing.Union[dict, frozendict.frozendict],
        version: typing.Union[
            Version[str],
            schemas.Unset,
            str
        ] = schemas.unset,
        configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
        **kwargs: typing.Union[
            dict,
            frozendict.frozendict,
            list,
            tuple,
            decimal.Decimal,
            float,
            int,
            str,
            datetime.date,
            datetime.datetime,
            uuid.UUID,
            bool,
            None,
            bytes,
            io.FileIO,
            io.BufferedReader,
            schemas.Schema
        ],
    ) -> Variables[frozendict.frozendict]:
        inst = super().__new__(
            cls,
            *args_,
            version=version,
            configuration_=configuration_,
            **kwargs,
        )
        inst = typing.cast(
            Variables[frozendict.frozendict],
            inst
        )
        return inst

VariablesProperties = typing_extensions.TypedDict(
    'VariablesProperties',
    {
        "version": typing.Type[Version],
    }
)


_VariablesSchemas = typing_extensions.TypedDict(
    '_VariablesSchemas',
    {
        "version": typing.Type[_Variables.Version],
    },
    total=False
)

Variables = typing_extensions.TypedDict(
    'Variables',
    {
        "version": typing_extensions.Literal[
            "v1",
            "v2",
        ],
    },
    total=False
)

def _default_variable_schemas() -> _VariablesSchemas:
    return {
        "": _Variables.Variables,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Variables,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
        "": _Variables.Server1,
    }


@dataclasses.dataclass
class Server1(server.Server):
    variables: typing.Optional[Variables] = None
    variable_schemas: _VariablesSchemas = dataclasses.field(default_factory=_default_variable_schemas)
    _url: str = "https://petstore.swagger.io/{version}"
