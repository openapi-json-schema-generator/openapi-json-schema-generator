# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

import datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401


class (
    schemas.DictSchema
):


    class Schema_:
        types = {frozendict.frozendict}
        required = {
            "",
            "",
            "",
            "",
        }
        
        class Properties:
            
            
            class (
            ):
            
            
                class Schema_:
                    types = {
                    }
                    format = 'int'
                    inclusive_maximum = 100
                    inclusive_minimum = 10
            
            
            class (
            ):
            
            
                class Schema_:
                    types = {
                    }
                    format = 'int32'
                    inclusive_maximum = 200
                    inclusive_minimum = 20
             = schemas.Schema
            
            
            class (
                schemas.NumberSchema
            ):
            
            
                class Schema_:
                    types = {
                        decimal.Decimal,
                    }
                    inclusive_maximum = 543.2
                    inclusive_minimum = 32.1
            
            
            class (
                schemas.Float32Schema
            ):
            
            
                class Schema_:
                    types = {
                        decimal.Decimal,
                    }
                    format = 'float'
                    inclusive_maximum = 987.6
            
            
            class (
                schemas.Float64Schema
            ):
            
            
                class Schema_:
                    types = {
                        decimal.Decimal,
                    }
                    format = 'double'
                    inclusive_maximum = 123.4
                    inclusive_minimum = 67.8
            
            
            class (
                schemas.StrSchema
            ):
            
            
                class Schema_:
                    types = {
                        str,
                    }
                    regex={
                        'pattern': r'[a-z]',  # noqa: E501
                        'flags': (
                            re.IGNORECASE
                        )
                    }
            
            
            class (
                schemas.StrSchema
            ):
            
            
                class Schema_:
                    types = {
                        str,
                    }
                    regex={
                        'pattern': r'^[A-Z].*',  # noqa: E501
                    }
             = schemas.StrSchema
             = schemas.BinarySchema
             = schemas.DateSchema
             = schemas.DateTimeSchema
            
            
            class (
                schemas.StrSchema
            ):
            
            
                class Schema_:
                    types = {
                        str,
                    }
                    format = 'password'
                    max_length = 64
                    min_length = 10
             = schemas.StrSchema
            __annotations__ = {
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
            }
    
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            str
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_(
        self,
        name: typing.Union[
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            str
        ]
    ):
        return super().get_item_(name)

    def __new__(
        cls,
        *args_: typing.Union[dict, frozendict.frozendict, ],
        configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
        **kwargs: typing.Union[dict, frozendict.frozendict, list, tuple, decimal.Decimal, float, int, str, datetime.date, datetime.datetime, uuid.UUID, bool, None, bytes, io.FileIO, io.BufferedReader, schemas.Schema],
    ) -> '':
        return super().__new__(
            cls,
            *args_,
            configuration_=configuration_,
            **kwargs,
        )
