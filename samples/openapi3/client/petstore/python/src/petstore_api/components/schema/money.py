# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from petstore_api.shared_imports.schema_imports import *

AdditionalProperties: typing_extensions.TypeAlias = schemas.NotAnyTypeSchema
Amount: typing_extensions.TypeAlias = schemas.DecimalSchema

from petstore_api.components.schema import currency
Properties = typing_extensions.TypedDict(
    'Properties',
    {
        "amount": typing.Type[Amount],
        "currency": typing.Type[currency.Currency],
    }
)


class MoneyDict(schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]):
    
    @property
    def amount(self) -> str:
        return self.__getitem__("amount")
    
    @property
    def currency(self) -> typing_extensions.Literal["eur", "usd"]:
        return self.__getitem__("currency")
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> str:
        ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> typing_extensions.Literal["eur", "usd"]:
        ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["amount"],
            typing_extensions.Literal["currency"],
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    def __new__(cls, arg: MoneyDictInput, configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None):
        return Money.validate(arg, configuration=configuration)
MoneyDictInput = typing_extensions.TypedDict(
    'MoneyDictInput',
    {
        "amount": typing.Union[
            str
        ],
        "currency": str,
    }
)


@dataclasses.dataclass(frozen=True)
class Money(
    schemas.DictSchema[MoneyDict]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    required: typing.FrozenSet[str] = frozenset({
        "amount",
        "currency",
    })
    properties: Properties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(Properties)) # type: ignore
    additional_properties: typing.Type[AdditionalProperties] = dataclasses.field(default_factory=lambda: AdditionalProperties) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: MoneyDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            MoneyDictInput,
            MoneyDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> MoneyDict:
        return super().validate(
            arg,
            configuration=configuration,
        )

