# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from petstore_api.shared_imports.schema_imports import *


class Animal(
    schemas.DictSchema[schemas.T]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """


    class Schema_:
        types = {frozendict.frozendict}
        required = {
            "className",
        }
        
        @staticmethod
        def discriminator():
            return {
                'className': {
                    'Cat': cat.Cat,
                    'Dog': dog.Dog,
                }
            }
        
        class Properties:
            ClassName: typing_extensions.TypeAlias = schemas.StrSchema[U]
            
            
            class Color(
                schemas.StrSchema[schemas.T]
            ):
            
            
                class Schema_:
                    types = {
                        str,
                    }
                    default = "red"
            __annotations__ = {
                "className": ClassName,
                "color": Color,
            }
    
    @property
    def className(self) -> Schema_.Properties.ClassName[str]:
        return self.__getitem__("className")
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["className"]) -> Schema_.Properties.ClassName[str]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> Schema_.Properties.Color[str]: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.AnyTypeSchema[typing.Union[
        frozendict.frozendict,
        str,
        decimal.Decimal,
        schemas.BoolClass,
        schemas.NoneClass,
        tuple,
        bytes,
        schemas.FileIO
    ]]: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["className"],
            typing_extensions.Literal["color"],
            str
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    def __new__(
        cls,
        *args_: typing.Union[dict, frozendict.frozendict],
        className: typing.Union[
            Schema_.Properties.ClassName[str],
            str
        ],
        color: typing.Union[
            Schema_.Properties.Color[str],
            schemas.Unset,
            str
        ] = schemas.unset,
        configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
        **kwargs: typing.Union[
            dict,
            frozendict.frozendict,
            list,
            tuple,
            decimal.Decimal,
            float,
            int,
            str,
            datetime.date,
            datetime.datetime,
            uuid.UUID,
            bool,
            None,
            bytes,
            io.FileIO,
            io.BufferedReader,
            schemas.Schema
        ],
    ) -> Animal[frozendict.frozendict]:
        inst = super().__new__(
            cls,
            *args_,
            className=className,
            color=color,
            configuration_=configuration_,
            **kwargs,
        )
        inst = typing.cast(
            Animal[frozendict.frozendict],
            inst
        )
        return inst

from petstore_api.components.schema import cat
from petstore_api.components.schema import dog
