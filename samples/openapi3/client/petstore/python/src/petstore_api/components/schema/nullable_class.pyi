# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

import datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401


class (
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """


    class Schema_:
        
        class Properties:
            
            
            class (
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneMixin
            ):
            
            
                class Schema_:
                    types = {
                        schemas.NoneClass,
                    }
                    format = 'int'
            
            
                def __new__(
                    cls,
                    *args_: typing.Union[None, ],
                    configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                ) -> '':
                    return super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                    )
            
            
            class (
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class Schema_:
                    types = {
                        schemas.NoneClass,
                        decimal.Decimal,
                    }
            
            
                def __new__(
                    cls,
                    *args_: typing.Union[None, decimal.Decimal, int, float, ],
                    configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                ) -> '':
                    return super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                    )
            
            
            class (
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                class Schema_:
                    types = {
                        schemas.NoneClass,
                        schemas.BoolClass,
                    }
            
            
                def __new__(
                    cls,
                    *args_: typing.Union[None, bool, ],
                    configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                ) -> '':
                    return super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                    )
            
            
            class (
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class Schema_:
                    types = {
                        schemas.NoneClass,
                        str,
                    }
            
            
                def __new__(
                    cls,
                    *args_: typing.Union[None, str, ],
                    configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                ) -> '':
                    return super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                    )
            
            
            class (
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class Schema_:
                    types = {
                        schemas.NoneClass,
                        str,
                    }
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *args_: typing.Union[None, str, datetime.date, ],
                    configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                ) -> '':
                    return super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                    )
            
            
            class (
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class Schema_:
                    types = {
                        schemas.NoneClass,
                        str,
                    }
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args_: typing.Union[None, str, datetime.datetime, ],
                    configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                ) -> '':
                    return super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                    )
            
            
            class (
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class Schema_:
                    types = {
                        schemas.NoneClass,
                        tuple,
                    }
                     = schemas.DictSchema
            
            
                def __new__(
                    cls,
                    *args_: typing.Union[list, tuple, None, ],
                    configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                ) -> '':
                    return super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                    )
            
            
            class (
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class Schema_:
                    types = {
                        schemas.NoneClass,
                        tuple,
                    }
                    
                    
                    class (
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        class Schema_:
                            types = {
                                schemas.NoneClass,
                                frozendict.frozendict,
                            }
                    
                    
                        def __new__(
                            cls,
                            *args_: typing.Union[dict, frozendict.frozendict, None, ],
                            configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                            **kwargs: typing.Union[dict, frozendict.frozendict, list, tuple, decimal.Decimal, float, int, str, datetime.date, datetime.datetime, uuid.UUID, bool, None, bytes, io.FileIO, io.BufferedReader, schemas.Schema],
                        ) -> '':
                            return super().__new__(
                                cls,
                                *args_,
                                configuration_=configuration_,
                                **kwargs,
                            )
            
            
                def __new__(
                    cls,
                    *args_: typing.Union[list, tuple, None, ],
                    configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                ) -> '':
                    return super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                    )
            
            
            class (
                schemas.ListSchema
            ):
            
            
                class Schema_:
                    types = {tuple}
                    
                    
                    class (
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        class Schema_:
                            types = {
                                schemas.NoneClass,
                                frozendict.frozendict,
                            }
                    
                    
                        def __new__(
                            cls,
                            *args_: typing.Union[dict, frozendict.frozendict, None, ],
                            configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                            **kwargs: typing.Union[dict, frozendict.frozendict, list, tuple, decimal.Decimal, float, int, str, datetime.date, datetime.datetime, uuid.UUID, bool, None, bytes, io.FileIO, io.BufferedReader, schemas.Schema],
                        ) -> '':
                            return super().__new__(
                                cls,
                                *args_,
                                configuration_=configuration_,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg_: typing.Union[typing.Tuple[typing.Union[Schema_., dict, frozendict.frozendict, None, ]], typing.List[typing.Union[Schema_., dict, frozendict.frozendict, None, ]]],
                    configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                ) -> '':
                    return super().__new__(
                        cls,
                        arg_,
                        configuration_=configuration_,
                    )
            
                def __getitem__(self, i: int) -> Schema_.:
                    return super().__getitem__(i)
            
            
            class (
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class Schema_:
                    types = {
                        schemas.NoneClass,
                        frozendict.frozendict,
                    }
                     = schemas.DictSchema
            
                
                def __getitem__(self, name: str) -> Schema_.:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_(self, name: str) -> Schema_.:
                    return super().get_item_(name)
            
                def __new__(
                    cls,
                    *args_: typing.Union[dict, frozendict.frozendict, None, ],
                    configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                    **kwargs: typing.Union[Schema_., dict, frozendict.frozendict, ],
                ) -> '':
                    return super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                        **kwargs,
                    )
            
            
            class (
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class Schema_:
                    types = {
                        schemas.NoneClass,
                        frozendict.frozendict,
                    }
                    
                    
                    class (
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        class Schema_:
                            types = {
                                schemas.NoneClass,
                                frozendict.frozendict,
                            }
                    
                    
                        def __new__(
                            cls,
                            *args_: typing.Union[dict, frozendict.frozendict, None, ],
                            configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                            **kwargs: typing.Union[dict, frozendict.frozendict, list, tuple, decimal.Decimal, float, int, str, datetime.date, datetime.datetime, uuid.UUID, bool, None, bytes, io.FileIO, io.BufferedReader, schemas.Schema],
                        ) -> '':
                            return super().__new__(
                                cls,
                                *args_,
                                configuration_=configuration_,
                                **kwargs,
                            )
            
                
                def __getitem__(self, name: str) -> Schema_.:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_(self, name: str) -> Schema_.:
                    return super().get_item_(name)
            
                def __new__(
                    cls,
                    *args_: typing.Union[dict, frozendict.frozendict, None, ],
                    configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                    **kwargs: typing.Union[Schema_., dict, frozendict.frozendict, None, ],
                ) -> '':
                    return super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                        **kwargs,
                    )
            
            
            class (
                schemas.DictSchema
            ):
            
            
                class Schema_:
                    
                    
                    class (
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        class Schema_:
                            types = {
                                schemas.NoneClass,
                                frozendict.frozendict,
                            }
                    
                    
                        def __new__(
                            cls,
                            *args_: typing.Union[dict, frozendict.frozendict, None, ],
                            configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                            **kwargs: typing.Union[dict, frozendict.frozendict, list, tuple, decimal.Decimal, float, int, str, datetime.date, datetime.datetime, uuid.UUID, bool, None, bytes, io.FileIO, io.BufferedReader, schemas.Schema],
                        ) -> '':
                            return super().__new__(
                                cls,
                                *args_,
                                configuration_=configuration_,
                                **kwargs,
                            )
                
                def __getitem__(self, name: str) -> Schema_.:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_(self, name: str) -> Schema_.:
                    return super().get_item_(name)
            
                def __new__(
                    cls,
                    *args_: typing.Union[dict, frozendict.frozendict, ],
                    configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                    **kwargs: typing.Union[Schema_., dict, frozendict.frozendict, None, ],
                ) -> '':
                    return super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                        **kwargs,
                    )
            __annotations__ = {
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
                "": ,
            }
        
        
        class (
            schemas.DictBase,
            schemas.NoneBase,
            schemas.Schema,
            schemas.NoneFrozenDictMixin
        ):
        
        
            class Schema_:
                types = {
                    schemas.NoneClass,
                    frozendict.frozendict,
                }
        
        
            def __new__(
                cls,
                *args_: typing.Union[dict, frozendict.frozendict, None, ],
                configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
                **kwargs: typing.Union[dict, frozendict.frozendict, list, tuple, decimal.Decimal, float, int, str, datetime.date, datetime.datetime, uuid.UUID, bool, None, bytes, io.FileIO, io.BufferedReader, schemas.Schema],
            ) -> '':
                return super().__new__(
                    cls,
                    *args_,
                    configuration_=configuration_,
                    **kwargs,
                )
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal[""]) -> Schema_.Properties.: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> Schema_.: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            str
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: typing_extensions.Literal[""]) -> typing.Union[Schema_.Properties., schemas.Unset]: ...
    
    @typing.overload
    def get_item_(self, name: str) -> typing.Union[Schema_., schemas.Unset]: ...
    
    def get_item_(
        self,
        name: typing.Union[
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            typing_extensions.Literal[""],
            str
        ]
    ):
        return super().get_item_(name)

    def __new__(
        cls,
        *args_: typing.Union[dict, frozendict.frozendict, ],
        configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
        **kwargs: typing.Union[Schema_., dict, frozendict.frozendict, None, ],
    ) -> '':
        return super().__new__(
            cls,
            *args_,
            configuration_=configuration_,
            **kwargs,
        )
