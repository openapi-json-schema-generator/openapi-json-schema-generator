# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from petstore_api.shared_imports.schema_imports import *


from petstore_api.components.schema import file


class FilesTuple(
    typing.Tuple[
        file.FileDict,
        ...
    ]
):

    def __new__(cls, arg: FilesTupleInput, configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None):
        return Files.validate(arg, configuration=configuration)
FilesTupleInput = typing.Union[
    typing.List[
        typing.Union[
            file.FileDict,
            dict,
            schemas.immutabledict
        ],
    ],
    typing.Tuple[
        typing.Union[
            file.FileDict,
            dict,
            schemas.immutabledict
        ],
        ...
    ]
]


@dataclasses.dataclass(frozen=True)
class Files(
    schemas.Schema[schemas.immutabledict, FilesTuple]
):
    types: typing.FrozenSet[typing.Type] = frozenset({tuple})
    items: typing.Type[file.File] = dataclasses.field(default_factory=lambda: file.File) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            tuple: FilesTuple
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            FilesTupleInput,
            FilesTuple,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> FilesTuple:
        return super().validate_base(
            arg,
            configuration=configuration,
        )
Properties = typing_extensions.TypedDict(
    'Properties',
    {
        "file": typing.Type[file.File],
        "files": typing.Type[Files],
    }
)


class FileSchemaTestClassDict(schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]):
    
    @typing.overload
    def file(self) -> file.FileDict:
        return self.__getitem__("file")
    
    @typing.overload
    def files(self) -> FilesTuple:
        return self.__getitem__("files")
    
    def get_property(self, name):
        return self.__getitem__(name)
    
    def get_additional_property(self, name: str) -> schemas.OUTPUT_BASE_TYPES:
        return self.__getitem__(name)

    def __new__(cls, arg: FileSchemaTestClassDictInput, configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None):
        return FileSchemaTestClass.validate(arg, configuration=configuration)
FileSchemaTestClassDictInput = typing.Mapping[str, schemas.INPUT_TYPES_ALL_INCL_SCHEMA]


@dataclasses.dataclass(frozen=True)
class FileSchemaTestClass(
    schemas.Schema[FileSchemaTestClassDict, tuple]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    properties: Properties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(Properties)) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: FileSchemaTestClassDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            FileSchemaTestClassDictInput,
            FileSchemaTestClassDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> FileSchemaTestClassDict:
        return super().validate_base(
            arg,
            configuration=configuration,
        )

