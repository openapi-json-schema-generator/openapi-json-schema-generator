# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

import datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401


class (
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """


    class Schema_:
        types = {frozendict.frozendict}
        
        
        class (
            schemas.ListSchema
        ):
        
        
            class Schema_:
                types = {tuple}
                
                @staticmethod
                def () -> typing.Type['enum_class.EnumClass']:
                    return enum_class.EnumClass
        
            def __new__(
                cls,
                arg_: typing.Union[typing.Tuple['enum_class.EnumClass'], typing.List['enum_class.EnumClass']],
                configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
            ) -> '':
                return super().__new__(
                    cls,
                    arg_,
                    configuration_=configuration_,
                )
        
            def __getitem__(self, i: int) -> 'enum_class.EnumClass':
                return super().__getitem__(i)
    
    def __getitem__(self, name: str) -> Schema_.:
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    def get_item_(self, name: str) -> Schema_.:
        return super().get_item_(name)

    def __new__(
        cls,
        *args_: typing.Union[dict, frozendict.frozendict, ],
        configuration_: typing.Optional[schemas.configuration_module.Configuration] = None,
        **kwargs: typing.Union[Schema_., list, tuple, ],
    ) -> '':
        return super().__new__(
            cls,
            *args_,
            configuration_=configuration_,
            **kwargs,
        )

from petstore_api.components.schema import enum_class
