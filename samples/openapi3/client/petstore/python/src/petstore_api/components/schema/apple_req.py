# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from petstore_api.shared_imports.schema_imports import *


class AppleReq(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """


    class Schema_:
        types = {frozendict.frozendict}
        required = {
            "cultivar",
        }
        
        class Properties:
            Cultivar = schemas.StrSchema
            Mealy = schemas.BoolSchema
            __annotations__ = {
                "cultivar": Cultivar,
                "mealy": Mealy,
            }
        AdditionalProperties = schemas.NotAnyTypeSchema
    
    @property
    def cultivar(self) -> Schema_.Properties.Cultivar:
        return self.__getitem__("cultivar")
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cultivar"]) -> Schema_.Properties.Cultivar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mealy"]) -> Schema_.Properties.Mealy: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["cultivar"],
            typing_extensions.Literal["mealy"],
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    def __new__(
        cls,
        *args_: typing.Union[dict, frozendict.frozendict],
        cultivar: typing.Union[Schema_.Properties.Cultivar, str],
        mealy: typing.Union[Schema_.Properties.Mealy, bool, schemas.Unset] = schemas.unset,
        configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
    ) -> 'AppleReq':
        return super().__new__(
            cls,
            *args_,
            cultivar=cultivar,
            mealy=mealy,
            configuration_=configuration_,
        )
