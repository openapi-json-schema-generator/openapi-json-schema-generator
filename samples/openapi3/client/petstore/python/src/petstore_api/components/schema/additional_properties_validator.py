# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from petstore_api.shared_imports.schema_imports import *


class AdditionalPropertiesValidator(
    schemas.DictSchema[schemas.T]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """


    class Schema_:
        types = {
            frozendict.frozendict,
        }
        
        class AllOf:
            
            
            class _0(
                schemas.DictSchema[schemas.T]
            ):
            
            
                class Schema_:
                    types = {frozendict.frozendict}
                    AdditionalProperties: typing_extensions.TypeAlias = schemas.AnyTypeSchema[U]
                
                def __getitem__(self, name: str) -> Schema_.AdditionalProperties[typing.Union[
                    frozendict.frozendict,
                    str,
                    decimal.Decimal,
                    schemas.BoolClass,
                    schemas.NoneClass,
                    tuple,
                    bytes,
                    schemas.FileIO
                ]]:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
            
                def __new__(
                    cls,
                    *args_: typing.Union[dict, frozendict.frozendict],
                    configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
                    **kwargs: typing.Union[
                        Schema_.AdditionalProperties[typing.Union[
                            frozendict.frozendict,
                            str,
                            decimal.Decimal,
                            schemas.BoolClass,
                            schemas.NoneClass,
                            tuple,
                            bytes,
                            schemas.FileIO
                        ]],
                        dict,
                        frozendict.frozendict,
                        str,
                        datetime.date,
                        datetime.datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader
                    ],
                ) -> AdditionalPropertiesValidator.Schema_.AllOf._0[frozendict.frozendict]:
                    inst = super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                        **kwargs,
                    )
                    inst = typing.cast(
                        AdditionalPropertiesValidator.Schema_.AllOf._0[frozendict.frozendict],
                        inst
                    )
                    return inst
            
            
            class _1(
                schemas.DictSchema[schemas.T]
            ):
            
            
                class Schema_:
                    types = {frozendict.frozendict}
                    
                    
                    class AdditionalProperties(
                        schemas.AnyTypeSchema[schemas.T],
                    ):
                    
                    
                        class Schema_:
                            # any type
                            min_length = 3
                    
                    
                        def __new__(
                            cls,
                            *args_: typing.Union[
                                dict,
                                frozendict.frozendict,
                                str,
                                datetime.date,
                                datetime.datetime,
                                uuid.UUID,
                                int,
                                float,
                                decimal.Decimal,
                                bool,
                                None,
                                list,
                                tuple,
                                bytes,
                                io.FileIO,
                                io.BufferedReader
                            ],
                            configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
                            **kwargs: typing.Union[
                                dict,
                                frozendict.frozendict,
                                list,
                                tuple,
                                decimal.Decimal,
                                float,
                                int,
                                str,
                                datetime.date,
                                datetime.datetime,
                                uuid.UUID,
                                bool,
                                None,
                                bytes,
                                io.FileIO,
                                io.BufferedReader,
                                schemas.Schema
                            ],
                        ) -> AdditionalPropertiesValidator.Schema_.AllOf._1.Schema_.AdditionalProperties[
                            typing.Union[
                                frozendict.frozendict,
                                str,
                                decimal.Decimal,
                                schemas.BoolClass,
                                schemas.NoneClass,
                                tuple,
                                bytes,
                                schemas.FileIO
                            ]
                        ]:
                            inst = super().__new__(
                                cls,
                                *args_,
                                configuration_=configuration_,
                                **kwargs,
                            )
                            inst = typing.cast(
                                AdditionalPropertiesValidator.Schema_.AllOf._1.Schema_.AdditionalProperties[
                                    typing.Union[
                                        frozendict.frozendict,
                                        str,
                                        decimal.Decimal,
                                        schemas.BoolClass,
                                        schemas.NoneClass,
                                        tuple,
                                        bytes,
                                        schemas.FileIO
                                    ]
                                ],
                                inst
                            )
                            return inst
                
                def __getitem__(self, name: str) -> Schema_.AdditionalProperties[typing.Union[
                    frozendict.frozendict,
                    str,
                    decimal.Decimal,
                    schemas.BoolClass,
                    schemas.NoneClass,
                    tuple,
                    bytes,
                    schemas.FileIO
                ]]:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
            
                def __new__(
                    cls,
                    *args_: typing.Union[dict, frozendict.frozendict],
                    configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
                    **kwargs: typing.Union[
                        Schema_.AdditionalProperties[typing.Union[
                            frozendict.frozendict,
                            str,
                            decimal.Decimal,
                            schemas.BoolClass,
                            schemas.NoneClass,
                            tuple,
                            bytes,
                            schemas.FileIO
                        ]],
                        dict,
                        frozendict.frozendict,
                        str,
                        datetime.date,
                        datetime.datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader
                    ],
                ) -> AdditionalPropertiesValidator.Schema_.AllOf._1[frozendict.frozendict]:
                    inst = super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                        **kwargs,
                    )
                    inst = typing.cast(
                        AdditionalPropertiesValidator.Schema_.AllOf._1[frozendict.frozendict],
                        inst
                    )
                    return inst
            
            
            class _2(
                schemas.DictSchema[schemas.T]
            ):
            
            
                class Schema_:
                    types = {frozendict.frozendict}
                    
                    
                    class AdditionalProperties(
                        schemas.AnyTypeSchema[schemas.T],
                    ):
                    
                    
                        class Schema_:
                            # any type
                            max_length = 5
                    
                    
                        def __new__(
                            cls,
                            *args_: typing.Union[
                                dict,
                                frozendict.frozendict,
                                str,
                                datetime.date,
                                datetime.datetime,
                                uuid.UUID,
                                int,
                                float,
                                decimal.Decimal,
                                bool,
                                None,
                                list,
                                tuple,
                                bytes,
                                io.FileIO,
                                io.BufferedReader
                            ],
                            configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
                            **kwargs: typing.Union[
                                dict,
                                frozendict.frozendict,
                                list,
                                tuple,
                                decimal.Decimal,
                                float,
                                int,
                                str,
                                datetime.date,
                                datetime.datetime,
                                uuid.UUID,
                                bool,
                                None,
                                bytes,
                                io.FileIO,
                                io.BufferedReader,
                                schemas.Schema
                            ],
                        ) -> AdditionalPropertiesValidator.Schema_.AllOf._2.Schema_.AdditionalProperties[
                            typing.Union[
                                frozendict.frozendict,
                                str,
                                decimal.Decimal,
                                schemas.BoolClass,
                                schemas.NoneClass,
                                tuple,
                                bytes,
                                schemas.FileIO
                            ]
                        ]:
                            inst = super().__new__(
                                cls,
                                *args_,
                                configuration_=configuration_,
                                **kwargs,
                            )
                            inst = typing.cast(
                                AdditionalPropertiesValidator.Schema_.AllOf._2.Schema_.AdditionalProperties[
                                    typing.Union[
                                        frozendict.frozendict,
                                        str,
                                        decimal.Decimal,
                                        schemas.BoolClass,
                                        schemas.NoneClass,
                                        tuple,
                                        bytes,
                                        schemas.FileIO
                                    ]
                                ],
                                inst
                            )
                            return inst
                
                def __getitem__(self, name: str) -> Schema_.AdditionalProperties[typing.Union[
                    frozendict.frozendict,
                    str,
                    decimal.Decimal,
                    schemas.BoolClass,
                    schemas.NoneClass,
                    tuple,
                    bytes,
                    schemas.FileIO
                ]]:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
            
                def __new__(
                    cls,
                    *args_: typing.Union[dict, frozendict.frozendict],
                    configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
                    **kwargs: typing.Union[
                        Schema_.AdditionalProperties[typing.Union[
                            frozendict.frozendict,
                            str,
                            decimal.Decimal,
                            schemas.BoolClass,
                            schemas.NoneClass,
                            tuple,
                            bytes,
                            schemas.FileIO
                        ]],
                        dict,
                        frozendict.frozendict,
                        str,
                        datetime.date,
                        datetime.datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader
                    ],
                ) -> AdditionalPropertiesValidator.Schema_.AllOf._2[frozendict.frozendict]:
                    inst = super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                        **kwargs,
                    )
                    inst = typing.cast(
                        AdditionalPropertiesValidator.Schema_.AllOf._2[frozendict.frozendict],
                        inst
                    )
                    return inst
            classes = [
                _0,
                _1,
                _2,
            ]


    def __new__(
        cls,
        *args_: typing.Union[dict, frozendict.frozendict],
        configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
        **kwargs: typing.Union[
            dict,
            frozendict.frozendict,
            list,
            tuple,
            decimal.Decimal,
            float,
            int,
            str,
            datetime.date,
            datetime.datetime,
            uuid.UUID,
            bool,
            None,
            bytes,
            io.FileIO,
            io.BufferedReader,
            schemas.Schema
        ],
    ) -> AdditionalPropertiesValidator[frozendict.frozendict]:
        inst = super().__new__(
            cls,
            *args_,
            configuration_=configuration_,
            **kwargs,
        )
        inst = typing.cast(
            AdditionalPropertiesValidator[frozendict.frozendict],
            inst
        )
        return inst
