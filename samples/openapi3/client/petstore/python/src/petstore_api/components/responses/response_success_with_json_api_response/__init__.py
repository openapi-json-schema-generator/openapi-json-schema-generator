# coding: utf-8

"""
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from petstore_api.shared_imports.response_imports import *

from .content.application_json import schema as application_json_schema
from .headers import header_ref_schema_header
from .headers import header_int32
from .headers import header_ref_content_schema_header
from .headers import header_string_header
from .headers import header_number_header


class Header:
    RequiredParams = typing_extensions.TypedDict(
        'RequiredParams',
        {
            'ref-schema-header': typing.Union[header_ref_schema_header.RefSchemaHeader.schema, dict, frozendict.frozendict, str, datetime.date, datetime.datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader],
            'int32': typing.Union[header_int32.Int32.content["application/json"].schema, decimal.Decimal, int],
            'ref-content-schema-header': typing.Union[header_ref_content_schema_header.RefContentSchemaHeader.content["application/json"].schema, dict, frozendict.frozendict, str, datetime.date, datetime.datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader],
            'stringHeader': typing.Union[header_string_header.StringHeader.schema, str],
        }
    )
    OptionalParams = typing_extensions.TypedDict(
        'OptionalParams',
        {
            'numberHeader': typing.Union[header_number_header.NumberHeader.schema, str],
        },
        total=False
    )


    class Params(RequiredParams, OptionalParams):
        pass


    parameters: typing.Dict[str, typing.Type[api_client.HeaderParameterWithoutName]] = {
        'ref-schema-header': header_ref_schema_header.RefSchemaHeader,
        'int32': header_int32.Int32,
        'ref-content-schema-header': header_ref_content_schema_header.RefContentSchemaHeader,
        'stringHeader': header_string_header.StringHeader,
        'numberHeader': header_number_header.NumberHeader,
    }

@dataclasses.dataclass
class ApiSuccessWithJsonApiResponse(api_response.ApiResponse):
    response: urllib3.HTTPResponse
    body: application_json_schema.Schema[frozendict.frozendict]
    headers: Header.Params


class SuccessWithJsonApiResponse(api_client.OpenApiResponse[ApiSuccessWithJsonApiResponse]):
    response_cls = ApiSuccessWithJsonApiResponse


    class ApplicationJsonMediaType(api_client.MediaType):
        schema: typing_extensions.TypeAlias = application_json_schema.Schema[frozendict.frozendict]
    Content = typing_extensions.TypedDict(
        'Content',
        {
            'application/json': typing.Type[ApplicationJsonMediaType],
        }
    )
    content: Content = {
        'application/json': ApplicationJsonMediaType,
    }
    headers=Header.parameters
