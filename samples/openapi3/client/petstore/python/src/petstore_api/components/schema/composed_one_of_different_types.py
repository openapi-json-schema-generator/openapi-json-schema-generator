# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from petstore_api.shared_imports.schema_imports import *


class ComposedOneOfDifferentTypes(
    schemas.AnyTypeSchema[schemas.T],
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.

    this is a model that allows payloads of type object or number
    """


    class Schema_:
        # any type
        
        class OneOf:
        
            @staticmethod
            def _0() -> typing.Type[number_with_validations.NumberWithValidations]:
                return number_with_validations.NumberWithValidations
        
            @staticmethod
            def _1() -> typing.Type[animal.Animal]:
                return animal.Animal
            _2: typing_extensions.TypeAlias = schemas.NoneSchema[U]
            _3: typing_extensions.TypeAlias = schemas.DateSchema[U]
            
            
            class _4(
                schemas.DictSchema[schemas.T]
            ):
            
            
                class Schema_:
                    types = {frozendict.frozendict}
                    max_properties = 4
                    min_properties = 4
            
                def __new__(
                    cls,
                    *args_: typing.Union[dict, frozendict.frozendict],
                    configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
                    **kwargs: typing.Union[
                        dict,
                        frozendict.frozendict,
                        list,
                        tuple,
                        decimal.Decimal,
                        float,
                        int,
                        str,
                        datetime.date,
                        datetime.datetime,
                        uuid.UUID,
                        bool,
                        None,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                        schemas.Schema
                    ],
                ) -> ComposedOneOfDifferentTypes.Schema_.OneOf._4[frozendict.frozendict]:
                    inst = super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                        **kwargs,
                    )
                    inst = typing.cast(
                        ComposedOneOfDifferentTypes.Schema_.OneOf._4[frozendict.frozendict],
                        inst
                    )
                    return inst
            
            
            class _5(
                schemas.ListSchema[schemas.T]
            ):
            
            
                class Schema_:
                    types = {tuple}
                    max_items = 4
                    min_items = 4
                    Items: typing_extensions.TypeAlias = schemas.AnyTypeSchema[U]
            
                def __new__(
                    cls,
                    arg_: typing.Sequence[
                        typing.Union[
                            Schema_.Items[typing.Union[
                                frozendict.frozendict,
                                str,
                                decimal.Decimal,
                                schemas.BoolClass,
                                schemas.NoneClass,
                                tuple,
                                bytes,
                                schemas.FileIO
                            ]],
                            dict,
                            frozendict.frozendict,
                            str,
                            datetime.date,
                            datetime.datetime,
                            uuid.UUID,
                            int,
                            float,
                            decimal.Decimal,
                            bool,
                            None,
                            list,
                            tuple,
                            bytes,
                            io.FileIO,
                            io.BufferedReader
                        ]
                    ],
                    configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
                ) -> ComposedOneOfDifferentTypes.Schema_.OneOf._5[tuple]:
                    inst = super().__new__(
                        cls,
                        arg_,
                        configuration_=configuration_,
                    )
                    inst = typing.cast(
                        ComposedOneOfDifferentTypes.Schema_.OneOf._5[tuple],
                        inst
                    )
                    return inst
            
                def __getitem__(self, name: int) -> Schema_.Items[typing.Union[
                    frozendict.frozendict,
                    str,
                    decimal.Decimal,
                    schemas.BoolClass,
                    schemas.NoneClass,
                    tuple,
                    bytes,
                    schemas.FileIO
                ]]:
                    return super().__getitem__(name)
            
            
            class _6(
                schemas.DateTimeSchema[schemas.T]
            ):
            
            
                class Schema_:
                    types = {
                        str,
                    }
                    format = 'date-time'
                    regex={
                        'pattern': r'^2020.*',  # noqa: E501
                    }
            classes = [
                _0,
                _1,
                _2,
                _3,
                _4,
                _5,
                _6,
            ]


    def __new__(
        cls,
        *args_: typing.Union[
            dict,
            frozendict.frozendict,
            str,
            datetime.date,
            datetime.datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader
        ],
        configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
        **kwargs: typing.Union[
            dict,
            frozendict.frozendict,
            list,
            tuple,
            decimal.Decimal,
            float,
            int,
            str,
            datetime.date,
            datetime.datetime,
            uuid.UUID,
            bool,
            None,
            bytes,
            io.FileIO,
            io.BufferedReader,
            schemas.Schema
        ],
    ) -> ComposedOneOfDifferentTypes[
        typing.Union[
            frozendict.frozendict,
            str,
            decimal.Decimal,
            schemas.BoolClass,
            schemas.NoneClass,
            tuple,
            bytes,
            schemas.FileIO
        ]
    ]:
        inst = super().__new__(
            cls,
            *args_,
            configuration_=configuration_,
            **kwargs,
        )
        inst = typing.cast(
            ComposedOneOfDifferentTypes[
                typing.Union[
                    frozendict.frozendict,
                    str,
                    decimal.Decimal,
                    schemas.BoolClass,
                    schemas.NoneClass,
                    tuple,
                    bytes,
                    schemas.FileIO
                ]
            ],
            inst
        )
        return inst

from petstore_api.components.schema import animal
from petstore_api.components.schema import number_with_validations
