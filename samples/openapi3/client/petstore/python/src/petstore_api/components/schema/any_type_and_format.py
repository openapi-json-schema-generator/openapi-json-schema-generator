# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from petstore_api.shared_imports.schema_imports import *


class AnyTypeAndFormat(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """


    class Schema_:
        types = {frozendict.frozendict}
        
        class Properties:
            
            
            class Uuid(
                schemas.UUIDBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class Schema_:
                    # any type
                    format = 'uuid'
            
            
            
            
            class Date(
                schemas.DateBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class Schema_:
                    # any type
                    format = 'date'
            
            
            
            
            class DateTime(
                schemas.DateTimeBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class Schema_:
                    # any type
                    format = 'date-time'
            
            
            
            
            class Number(
                schemas.DecimalBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class Schema_:
                    # any type
                    format = 'number'
            
            
            
            
            class Binary(
                schemas.AnyTypeSchema,
            ):
            
            
                class Schema_:
                    # any type
                    format = 'binary'
            
            
            
            
            class Int32(
                schemas.AnyTypeSchema,
            ):
            
            
                class Schema_:
                    # any type
                    format = 'int32'
            
            
            
            
            class Int64(
                schemas.AnyTypeSchema,
            ):
            
            
                class Schema_:
                    # any type
                    format = 'int64'
            
            
            
            
            class Double(
                schemas.AnyTypeSchema,
            ):
            
            
                class Schema_:
                    # any type
                    format = 'double'
            
            
            
            
            class _Float(
                schemas.AnyTypeSchema,
            ):
            
            
                class Schema_:
                    # any type
                    format = 'float'
            
            
            __annotations__ = {
                "uuid": Uuid,
                "date": Date,
                "date-time": DateTime,
                "number": Number,
                "binary": Binary,
                "int32": Int32,
                "int64": Int64,
                "double": Double,
                "float": _Float,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> Schema_.Properties.Uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> Schema_.Properties.Date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date-time"]) -> Schema_.Properties.DateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> Schema_.Properties.Number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["binary"]) -> Schema_.Properties.Binary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["int32"]) -> Schema_.Properties.Int32: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["int64"]) -> Schema_.Properties.Int64: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["double"]) -> Schema_.Properties.Double: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["float"]) -> Schema_.Properties._Float: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["uuid"],
            typing_extensions.Literal["date"],
            typing_extensions.Literal["date-time"],
            typing_extensions.Literal["number"],
            typing_extensions.Literal["binary"],
            typing_extensions.Literal["int32"],
            typing_extensions.Literal["int64"],
            typing_extensions.Literal["double"],
            typing_extensions.Literal["float"],
            str
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    def __new__(
        cls,
        *args_: typing.Union[dict, frozendict.frozendict],
        uuid: typing.Union[Schema_.Properties.Uuid, dict, frozendict.frozendict, str, datetime.date, datetime.datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        date: typing.Union[Schema_.Properties.Date, dict, frozendict.frozendict, str, datetime.date, datetime.datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        number: typing.Union[Schema_.Properties.Number, dict, frozendict.frozendict, str, datetime.date, datetime.datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        binary: typing.Union[Schema_.Properties.Binary, dict, frozendict.frozendict, str, datetime.date, datetime.datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        int32: typing.Union[Schema_.Properties.Int32, dict, frozendict.frozendict, str, datetime.date, datetime.datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        int64: typing.Union[Schema_.Properties.Int64, dict, frozendict.frozendict, str, datetime.date, datetime.datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        double: typing.Union[Schema_.Properties.Double, dict, frozendict.frozendict, str, datetime.date, datetime.datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
        **kwargs: typing.Union[dict, frozendict.frozendict, list, tuple, decimal.Decimal, float, int, str, datetime.date, datetime.datetime, uuid.UUID, bool, None, bytes, io.FileIO, io.BufferedReader, schemas.Schema],
    ) -> 'AnyTypeAndFormat':
        return super().__new__(
            cls,
            *args_,
            uuid=uuid,
            date=date,
            number=number,
            binary=binary,
            int32=int32,
            int64=int64,
            double=double,
            configuration_=configuration_,
            **kwargs,
        )
