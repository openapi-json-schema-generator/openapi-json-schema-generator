# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

import datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401


class ObjectWithDecimalProperties(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """


    class Schema_:
        types = {frozendict.frozendict}
        
        class Properties:
        
            @staticmethod
            def length() -> typing.Type['decimal_payload.DecimalPayload']:
                return decimal_payload.DecimalPayload
            Width = schemas.DecimalSchema
        
            @staticmethod
            def cost() -> typing.Type['money.Money']:
                return money.Money
            __annotations__ = {
                "length": length,
                "width": Width,
                "cost": cost,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> 'decimal_payload.DecimalPayload': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> Schema_.Properties.Width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost"]) -> 'money.Money': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["length"],
            typing_extensions.Literal["width"],
            typing_extensions.Literal["cost"],
            str
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    def __new__(
        cls,
        *args_: typing.Union[dict, frozendict.frozendict],
        length: typing.Union['decimal_payload.DecimalPayload', str, schemas.Unset] = schemas.unset,
        width: typing.Union[Schema_.Properties.Width, str, schemas.Unset] = schemas.unset,
        cost: typing.Union['money.Money', dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
        **kwargs: typing.Union[dict, frozendict.frozendict, list, tuple, decimal.Decimal, float, int, str, datetime.date, datetime.datetime, uuid.UUID, bool, None, bytes, io.FileIO, io.BufferedReader, schemas.Schema],
    ) -> 'ObjectWithDecimalProperties':
        return super().__new__(
            cls,
            *args_,
            length=length,
            width=width,
            cost=cost,
            configuration_=configuration_,
            **kwargs,
        )

from petstore_api.components.schema import decimal_payload
from petstore_api.components.schema import money
