# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from petstore_api.shared_imports.schema_imports import *


class User(
    schemas.DictSchema[schemas.T]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """


    class Schema_:
        types = {frozendict.frozendict}
        
        class Properties:
            Id: typing_extensions.TypeAlias = schemas.Int64Schema[U]
            Username: typing_extensions.TypeAlias = schemas.StrSchema[U]
            FirstName: typing_extensions.TypeAlias = schemas.StrSchema[U]
            LastName: typing_extensions.TypeAlias = schemas.StrSchema[U]
            Email: typing_extensions.TypeAlias = schemas.StrSchema[U]
            Password: typing_extensions.TypeAlias = schemas.StrSchema[U]
            Phone: typing_extensions.TypeAlias = schemas.StrSchema[U]
            UserStatus: typing_extensions.TypeAlias = schemas.Int32Schema[U]
            ObjectWithNoDeclaredProps: typing_extensions.TypeAlias = schemas.DictSchema[U]
            
            
            class ObjectWithNoDeclaredPropsNullable(
                schemas.NoneBase,
                schemas.DictBase,
                schemas.Schema[schemas.T],
                schemas.NoneFrozenDictMixin
            ):
            
            
                class Schema_:
                    types = {
                        schemas.NoneClass,
                        frozendict.frozendict,
                    }
            
            
                def __new__(
                    cls,
                    *args_: typing.Union[
                        None,
                        dict,
                        frozendict.frozendict
                    ],
                    configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
                    **kwargs: typing.Union[
                        dict,
                        frozendict.frozendict,
                        list,
                        tuple,
                        decimal.Decimal,
                        float,
                        int,
                        str,
                        datetime.date,
                        datetime.datetime,
                        uuid.UUID,
                        bool,
                        None,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                        schemas.Schema
                    ],
                ) -> User.Schema_.Properties.ObjectWithNoDeclaredPropsNullable[
                    typing.Union[
                        schemas.NoneClass,
                        frozendict.frozendict
                    ]
                ]:
                    inst = super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                        **kwargs,
                    )
                    inst = typing.cast(
                        User.Schema_.Properties.ObjectWithNoDeclaredPropsNullable[
                            typing.Union[
                                schemas.NoneClass,
                                frozendict.frozendict
                            ]
                        ],
                        inst
                    )
                    return inst
            AnyTypeProp: typing_extensions.TypeAlias = schemas.AnyTypeSchema[U]
            
            
            class AnyTypeExceptNullProp(
                schemas.AnyTypeSchema[schemas.T],
            ):
            
            
                class Schema_:
                    # any type
                    _Not: typing_extensions.TypeAlias = schemas.NoneSchema[U]
            
            
                def __new__(
                    cls,
                    *args_: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        datetime.date,
                        datetime.datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader
                    ],
                    configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
                    **kwargs: typing.Union[
                        dict,
                        frozendict.frozendict,
                        list,
                        tuple,
                        decimal.Decimal,
                        float,
                        int,
                        str,
                        datetime.date,
                        datetime.datetime,
                        uuid.UUID,
                        bool,
                        None,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                        schemas.Schema
                    ],
                ) -> User.Schema_.Properties.AnyTypeExceptNullProp[
                    typing.Union[
                        frozendict.frozendict,
                        str,
                        decimal.Decimal,
                        schemas.BoolClass,
                        schemas.NoneClass,
                        tuple,
                        bytes,
                        schemas.FileIO
                    ]
                ]:
                    inst = super().__new__(
                        cls,
                        *args_,
                        configuration_=configuration_,
                        **kwargs,
                    )
                    inst = typing.cast(
                        User.Schema_.Properties.AnyTypeExceptNullProp[
                            typing.Union[
                                frozendict.frozendict,
                                str,
                                decimal.Decimal,
                                schemas.BoolClass,
                                schemas.NoneClass,
                                tuple,
                                bytes,
                                schemas.FileIO
                            ]
                        ],
                        inst
                    )
                    return inst
            AnyTypePropNullable: typing_extensions.TypeAlias = schemas.AnyTypeSchema[U]
            __annotations__ = {
                "id": Id,
                "username": Username,
                "firstName": FirstName,
                "lastName": LastName,
                "email": Email,
                "password": Password,
                "phone": Phone,
                "userStatus": UserStatus,
                "objectWithNoDeclaredProps": ObjectWithNoDeclaredProps,
                "objectWithNoDeclaredPropsNullable": ObjectWithNoDeclaredPropsNullable,
                "anyTypeProp": AnyTypeProp,
                "anyTypeExceptNullProp": AnyTypeExceptNullProp,
                "anyTypePropNullable": AnyTypePropNullable,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> Schema_.Properties.Id[decimal.Decimal]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> Schema_.Properties.Username[str]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> Schema_.Properties.FirstName[str]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> Schema_.Properties.LastName[str]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> Schema_.Properties.Email[str]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> Schema_.Properties.Password[str]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> Schema_.Properties.Phone[str]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userStatus"]) -> Schema_.Properties.UserStatus[decimal.Decimal]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectWithNoDeclaredProps"]) -> Schema_.Properties.ObjectWithNoDeclaredProps[frozendict.frozendict]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectWithNoDeclaredPropsNullable"]) -> Schema_.Properties.ObjectWithNoDeclaredPropsNullable[typing.Union[
        schemas.NoneClass,
        frozendict.frozendict
    ]]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anyTypeProp"]) -> Schema_.Properties.AnyTypeProp[typing.Union[
        frozendict.frozendict,
        str,
        decimal.Decimal,
        schemas.BoolClass,
        schemas.NoneClass,
        tuple,
        bytes,
        schemas.FileIO
    ]]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anyTypeExceptNullProp"]) -> Schema_.Properties.AnyTypeExceptNullProp[typing.Union[
        frozendict.frozendict,
        str,
        decimal.Decimal,
        schemas.BoolClass,
        schemas.NoneClass,
        tuple,
        bytes,
        schemas.FileIO
    ]]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anyTypePropNullable"]) -> Schema_.Properties.AnyTypePropNullable[typing.Union[
        frozendict.frozendict,
        str,
        decimal.Decimal,
        schemas.BoolClass,
        schemas.NoneClass,
        tuple,
        bytes,
        schemas.FileIO
    ]]: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.AnyTypeSchema[typing.Union[
        frozendict.frozendict,
        str,
        decimal.Decimal,
        schemas.BoolClass,
        schemas.NoneClass,
        tuple,
        bytes,
        schemas.FileIO
    ]]: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["id"],
            typing_extensions.Literal["username"],
            typing_extensions.Literal["firstName"],
            typing_extensions.Literal["lastName"],
            typing_extensions.Literal["email"],
            typing_extensions.Literal["password"],
            typing_extensions.Literal["phone"],
            typing_extensions.Literal["userStatus"],
            typing_extensions.Literal["objectWithNoDeclaredProps"],
            typing_extensions.Literal["objectWithNoDeclaredPropsNullable"],
            typing_extensions.Literal["anyTypeProp"],
            typing_extensions.Literal["anyTypeExceptNullProp"],
            typing_extensions.Literal["anyTypePropNullable"],
            str
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    def __new__(
        cls,
        *args_: typing.Union[dict, frozendict.frozendict],
        id: typing.Union[
            Schema_.Properties.Id[decimal.Decimal],
            schemas.Unset,
            decimal.Decimal,
            int
        ] = schemas.unset,
        username: typing.Union[
            Schema_.Properties.Username[str],
            schemas.Unset,
            str
        ] = schemas.unset,
        firstName: typing.Union[
            Schema_.Properties.FirstName[str],
            schemas.Unset,
            str
        ] = schemas.unset,
        lastName: typing.Union[
            Schema_.Properties.LastName[str],
            schemas.Unset,
            str
        ] = schemas.unset,
        email: typing.Union[
            Schema_.Properties.Email[str],
            schemas.Unset,
            str
        ] = schemas.unset,
        password: typing.Union[
            Schema_.Properties.Password[str],
            schemas.Unset,
            str
        ] = schemas.unset,
        phone: typing.Union[
            Schema_.Properties.Phone[str],
            schemas.Unset,
            str
        ] = schemas.unset,
        userStatus: typing.Union[
            Schema_.Properties.UserStatus[decimal.Decimal],
            schemas.Unset,
            decimal.Decimal,
            int
        ] = schemas.unset,
        objectWithNoDeclaredProps: typing.Union[
            Schema_.Properties.ObjectWithNoDeclaredProps[frozendict.frozendict],
            schemas.Unset,
            dict,
            frozendict.frozendict
        ] = schemas.unset,
        objectWithNoDeclaredPropsNullable: typing.Union[
            Schema_.Properties.ObjectWithNoDeclaredPropsNullable[typing.Union[
                schemas.NoneClass,
                frozendict.frozendict
            ]],
            schemas.Unset,
            None,
            dict,
            frozendict.frozendict
        ] = schemas.unset,
        anyTypeProp: typing.Union[
            Schema_.Properties.AnyTypeProp[typing.Union[
                frozendict.frozendict,
                str,
                decimal.Decimal,
                schemas.BoolClass,
                schemas.NoneClass,
                tuple,
                bytes,
                schemas.FileIO
            ]],
            schemas.Unset,
            dict,
            frozendict.frozendict,
            str,
            datetime.date,
            datetime.datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader
        ] = schemas.unset,
        anyTypeExceptNullProp: typing.Union[
            Schema_.Properties.AnyTypeExceptNullProp[typing.Union[
                frozendict.frozendict,
                str,
                decimal.Decimal,
                schemas.BoolClass,
                schemas.NoneClass,
                tuple,
                bytes,
                schemas.FileIO
            ]],
            schemas.Unset,
            dict,
            frozendict.frozendict,
            str,
            datetime.date,
            datetime.datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader
        ] = schemas.unset,
        anyTypePropNullable: typing.Union[
            Schema_.Properties.AnyTypePropNullable[typing.Union[
                frozendict.frozendict,
                str,
                decimal.Decimal,
                schemas.BoolClass,
                schemas.NoneClass,
                tuple,
                bytes,
                schemas.FileIO
            ]],
            schemas.Unset,
            dict,
            frozendict.frozendict,
            str,
            datetime.date,
            datetime.datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader
        ] = schemas.unset,
        configuration_: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None,
        **kwargs: typing.Union[
            dict,
            frozendict.frozendict,
            list,
            tuple,
            decimal.Decimal,
            float,
            int,
            str,
            datetime.date,
            datetime.datetime,
            uuid.UUID,
            bool,
            None,
            bytes,
            io.FileIO,
            io.BufferedReader,
            schemas.Schema
        ],
    ) -> User[frozendict.frozendict]:
        inst = super().__new__(
            cls,
            *args_,
            id=id,
            username=username,
            firstName=firstName,
            lastName=lastName,
            email=email,
            password=password,
            phone=phone,
            userStatus=userStatus,
            objectWithNoDeclaredProps=objectWithNoDeclaredProps,
            objectWithNoDeclaredPropsNullable=objectWithNoDeclaredPropsNullable,
            anyTypeProp=anyTypeProp,
            anyTypeExceptNullProp=anyTypeExceptNullProp,
            anyTypePropNullable=anyTypePropNullable,
            configuration_=configuration_,
            **kwargs,
        )
        inst = typing.cast(
            User[frozendict.frozendict],
            inst
        )
        return inst
