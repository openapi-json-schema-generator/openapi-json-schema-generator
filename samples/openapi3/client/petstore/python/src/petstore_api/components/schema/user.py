# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from petstore_api.shared_imports.schema_imports import *

Id: typing_extensions.TypeAlias = schemas.Int64Schema
Username: typing_extensions.TypeAlias = schemas.StrSchema
FirstName: typing_extensions.TypeAlias = schemas.StrSchema
LastName: typing_extensions.TypeAlias = schemas.StrSchema
Email: typing_extensions.TypeAlias = schemas.StrSchema
Password: typing_extensions.TypeAlias = schemas.StrSchema
Phone: typing_extensions.TypeAlias = schemas.StrSchema
UserStatus: typing_extensions.TypeAlias = schemas.Int32Schema
ObjectWithNoDeclaredProps: typing_extensions.TypeAlias = schemas.DictSchema


@dataclasses.dataclass(frozen=True)
class ObjectWithNoDeclaredPropsNullable(
    schemas.Schema[schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES], typing.Tuple[schemas.OUTPUT_BASE_TYPES, ...]],
):
    types: typing.FrozenSet[typing.Type] = frozenset({
        type(None),
        schemas.immutabledict,
    })

    @typing.overload
    @classmethod
    def validate(
        cls,
        arg: None,
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> None: ...
    @typing.overload
    @classmethod
    def validate(
        cls,
        arg: typing.Mapping[str, schemas.INPUT_TYPES_ALL_INCL_SCHEMA],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> schemas.immutabledict[str, schemas.INPUT_TYPES_ALL_INCL_SCHEMA]: ...
    @classmethod
    def validate(
        cls,
        arg,
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ):
        return super().validate_base(
            arg,
            configuration=configuration,
        )

AnyTypeProp: typing_extensions.TypeAlias = schemas.AnyTypeSchema
_Not: typing_extensions.TypeAlias = schemas.NoneSchema


@dataclasses.dataclass(frozen=True)
class AnyTypeExceptNullProp(
    schemas.AnyTypeSchema[schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES], typing.Tuple[schemas.OUTPUT_BASE_TYPES, ...]],
):
    # any type
    not_: typing.Type[_Not] = dataclasses.field(default_factory=lambda: _Not) # type: ignore

AnyTypePropNullable: typing_extensions.TypeAlias = schemas.AnyTypeSchema
Properties = typing_extensions.TypedDict(
    'Properties',
    {
        "id": typing.Type[Id],
        "username": typing.Type[Username],
        "firstName": typing.Type[FirstName],
        "lastName": typing.Type[LastName],
        "email": typing.Type[Email],
        "password": typing.Type[Password],
        "phone": typing.Type[Phone],
        "userStatus": typing.Type[UserStatus],
        "objectWithNoDeclaredProps": typing.Type[ObjectWithNoDeclaredProps],
        "objectWithNoDeclaredPropsNullable": typing.Type[ObjectWithNoDeclaredPropsNullable],
        "anyTypeProp": typing.Type[AnyTypeProp],
        "anyTypeExceptNullProp": typing.Type[AnyTypeExceptNullProp],
        "anyTypePropNullable": typing.Type[AnyTypePropNullable],
    }
)


class UserDict(schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]):
    
    @property
    def id(self) -> int:
        return self.__getitem__("id")
    
    @property
    def username(self) -> str:
        return self.__getitem__("username")
    
    @property
    def first_name(self) -> str:
        return self.__getitem__("firstName")
    
    @property
    def last_name(self) -> str:
        return self.__getitem__("lastName")
    
    @property
    def email(self) -> str:
        return self.__getitem__("email")
    
    @property
    def password(self) -> str:
        return self.__getitem__("password")
    
    @property
    def phone(self) -> str:
        return self.__getitem__("phone")
    
    @property
    def user_status(self) -> int:
        return self.__getitem__("userStatus")
    
    @property
    def object_with_no_declared_props(self) -> schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]:
        return self.__getitem__("objectWithNoDeclaredProps")
    
    @property
    def object_with_no_declared_props_nullable(self) -> typing.Union[
        None,
        schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES],
    ]:
        return self.__getitem__("objectWithNoDeclaredPropsNullable")
    
    @property
    def any_type_prop(self) -> schemas.OUTPUT_BASE_TYPES:
        return self.__getitem__("anyTypeProp")
    
    @property
    def any_type_except_null_prop(self) -> schemas.OUTPUT_BASE_TYPES:
        return self.__getitem__("anyTypeExceptNullProp")
    
    @property
    def any_type_prop_nullable(self) -> schemas.OUTPUT_BASE_TYPES:
        return self.__getitem__("anyTypePropNullable")
    
    def get_property(self, name):
        return self.__getitem__(name)
    
    def get_additional_property(self, name: str) -> schemas.OUTPUT_BASE_TYPES:
        return self.__getitem__(name)

    def __new__(cls, arg: UserDictInput, configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None):
        return User.validate(arg, configuration=configuration)
UserDictInput = typing.Mapping[str, schemas.INPUT_TYPES_ALL_INCL_SCHEMA]


@dataclasses.dataclass(frozen=True)
class User(
    schemas.Schema[UserDict, tuple]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    properties: Properties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(Properties)) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: UserDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            UserDictInput,
            UserDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> UserDict:
        return super().validate_base(
            arg,
            configuration=configuration,
        )

