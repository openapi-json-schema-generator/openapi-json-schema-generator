# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from petstore_api.shared_imports.schema_imports import *

Id: typing_extensions.TypeAlias = schemas.Int64Schema[U]
Username: typing_extensions.TypeAlias = schemas.StrSchema[U]
FirstName: typing_extensions.TypeAlias = schemas.StrSchema[U]
LastName: typing_extensions.TypeAlias = schemas.StrSchema[U]
Email: typing_extensions.TypeAlias = schemas.StrSchema[U]
Password: typing_extensions.TypeAlias = schemas.StrSchema[U]
Phone: typing_extensions.TypeAlias = schemas.StrSchema[U]
UserStatus: typing_extensions.TypeAlias = schemas.Int32Schema[U]
DictInput = typing.Mapping[str, schemas.INPUT_TYPES_ALL_INCL_SCHEMA]
ObjectWithNoDeclaredProps: typing_extensions.TypeAlias = schemas.DictSchema[U]
DictInput2 = typing.Mapping[str, schemas.INPUT_TYPES_ALL_INCL_SCHEMA]


class ObjectWithNoDeclaredPropsNullable(
    schemas.NoneBase,
    schemas.DictBase,
    schemas.Schema[schemas.T],
    schemas.NoneFrozenDictMixin
):


    @dataclasses.dataclass(frozen=True)
    class Schema_(metaclass=schemas.SingletonMeta):
        types: typing.FrozenSet[typing.Type] = frozenset({
            schemas.NoneClass,
            frozendict.frozendict,
        })


    @typing.overload
    def __new__(
        cls,
        arg: typing.Union[None, schemas.NoneClass],
        configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    ) -> ObjectWithNoDeclaredPropsNullable[schemas.NoneClass]: ...

    @typing.overload
    def __new__(
        cls,
        arg: typing.Union[
            DictInput2,
            ObjectWithNoDeclaredPropsNullable[frozendict.frozendict],
        ],
        configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    ) -> ObjectWithNoDeclaredPropsNullable[frozendict.frozendict]: ...

    def __new__(
        cls,
        arg: typing.Union[
            None,
            DictInput2,
            ObjectWithNoDeclaredPropsNullable[frozendict.frozendict],
        ],
        configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    ):
        return super().__new__(
            cls,
            arg,
            configuration=configuration,
        )

DictInput3 = typing.Mapping[str, schemas.INPUT_TYPES_ALL_INCL_SCHEMA]
AnyTypeProp: typing_extensions.TypeAlias = schemas.AnyTypeSchema[U]
_Not: typing_extensions.TypeAlias = schemas.NoneSchema[U]
DictInput4 = typing.Mapping[str, schemas.INPUT_TYPES_ALL_INCL_SCHEMA]


class AnyTypeExceptNullProp(
    schemas.AnyTypeSchema[schemas.T],
):


    @dataclasses.dataclass(frozen=True)
    class Schema_(metaclass=schemas.SingletonMeta):
        # any type
        not_: typing.Type[_Not] = dataclasses.field(default_factory=lambda: _Not) # type: ignore


    @typing.overload
    def __new__(
        cls,
        arg: typing.Union[None, schemas.NoneClass],
        configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    ) -> AnyTypeExceptNullProp[schemas.NoneClass]: ...

    @typing.overload
    def __new__(
        cls,
        arg: typing.Union[bool, schemas.BoolClass],
        configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    ) -> AnyTypeExceptNullProp[schemas.BoolClass]: ...

    @typing.overload
    def __new__(
        cls,
        arg: typing.Union[decimal.Decimal, float, int],
        configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    ) -> AnyTypeExceptNullProp[decimal.Decimal]: ...

    @typing.overload
    def __new__(
        cls,
        arg: typing.Union[str, datetime.date, datetime.datetime, uuid.UUID],
        configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    ) -> AnyTypeExceptNullProp[str]: ...

    @typing.overload
    def __new__(
        cls,
        arg: typing.Sequence[schemas.INPUT_TYPES_ALL_INCL_SCHEMA],
        configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    ) -> AnyTypeExceptNullProp[tuple]: ...

    @typing.overload
    def __new__(
        cls,
        arg: typing.Union[
            DictInput4,
            AnyTypeExceptNullProp[frozendict.frozendict],
        ],
        configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    ) -> AnyTypeExceptNullProp[frozendict.frozendict]: ...

    @typing.overload
    def __new__(
        cls,
        arg: bytes,
        configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    ) -> AnyTypeExceptNullProp[bytes]: ...

    @typing.overload
    def __new__(
        cls,
        arg: io.FileIO,
        configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    ) -> AnyTypeExceptNullProp[schemas.FileIO]: ...

    def __new__(
        cls,
        arg: schemas.INPUT_TYPES_ALL_INCL_SCHEMA,
        configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    ):
        return super().__new__(
            cls,
            arg,
            configuration=configuration,
        )

DictInput5 = typing.Mapping[str, schemas.INPUT_TYPES_ALL_INCL_SCHEMA]
AnyTypePropNullable: typing_extensions.TypeAlias = schemas.AnyTypeSchema[U]
Properties = typing_extensions.TypedDict(
    'Properties',
    {
        "id": typing.Type[Id],
        "username": typing.Type[Username],
        "firstName": typing.Type[FirstName],
        "lastName": typing.Type[LastName],
        "email": typing.Type[Email],
        "password": typing.Type[Password],
        "phone": typing.Type[Phone],
        "userStatus": typing.Type[UserStatus],
        "objectWithNoDeclaredProps": typing.Type[ObjectWithNoDeclaredProps],
        "objectWithNoDeclaredPropsNullable": typing.Type[ObjectWithNoDeclaredPropsNullable],
        "anyTypeProp": typing.Type[AnyTypeProp],
        "anyTypeExceptNullProp": typing.Type[AnyTypeExceptNullProp],
        "anyTypePropNullable": typing.Type[AnyTypePropNullable],
    }
)
DictInput6 = typing.Mapping[
    str,
    typing.Union[
        typing.Union[
            Id[decimal.Decimal],
            decimal.Decimal,
            int
        ],
        typing.Union[
            Username[str],
            str
        ],
        typing.Union[
            FirstName[str],
            str
        ],
        typing.Union[
            LastName[str],
            str
        ],
        typing.Union[
            Email[str],
            str
        ],
        typing.Union[
            Password[str],
            str
        ],
        typing.Union[
            Phone[str],
            str
        ],
        typing.Union[
            UserStatus[decimal.Decimal],
            decimal.Decimal,
            int
        ],
        typing.Union[
            ObjectWithNoDeclaredProps[frozendict.frozendict],
            dict,
            frozendict.frozendict
        ],
        typing.Union[
            ObjectWithNoDeclaredPropsNullable[typing.Union[
                schemas.NoneClass,
                frozendict.frozendict
            ]],
            None,
            dict,
            frozendict.frozendict
        ],
        typing.Union[
            AnyTypeProp[
                schemas.INPUT_BASE_TYPES
            ],
            dict,
            frozendict.frozendict,
            str,
            datetime.date,
            datetime.datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader
        ],
        typing.Union[
            AnyTypeExceptNullProp[
                schemas.INPUT_BASE_TYPES
            ],
            dict,
            frozendict.frozendict,
            str,
            datetime.date,
            datetime.datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader
        ],
        typing.Union[
            AnyTypePropNullable[
                schemas.INPUT_BASE_TYPES
            ],
            dict,
            frozendict.frozendict,
            str,
            datetime.date,
            datetime.datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader
        ],
        schemas.INPUT_TYPES_ALL_INCL_SCHEMA
    ]
]


class User(
    schemas.DictSchema[schemas.T]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """


    @dataclasses.dataclass(frozen=True)
    class Schema_(metaclass=schemas.SingletonMeta):
        types: typing.FrozenSet[typing.Type] = frozenset({frozendict.frozendict})
        properties: Properties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(Properties)) # type: ignore
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> Id[decimal.Decimal]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> Username[str]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> FirstName[str]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> LastName[str]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> Email[str]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> Password[str]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> Phone[str]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userStatus"]) -> UserStatus[decimal.Decimal]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectWithNoDeclaredProps"]) -> ObjectWithNoDeclaredProps[frozendict.frozendict]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectWithNoDeclaredPropsNullable"]) -> ObjectWithNoDeclaredPropsNullable[typing.Union[
        schemas.NoneClass,
        frozendict.frozendict
    ]]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anyTypeProp"]) -> AnyTypeProp[typing.Union[
        frozendict.frozendict,
        str,
        decimal.Decimal,
        schemas.BoolClass,
        schemas.NoneClass,
        tuple,
        bytes,
        schemas.FileIO
    ]]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anyTypeExceptNullProp"]) -> AnyTypeExceptNullProp[typing.Union[
        frozendict.frozendict,
        str,
        decimal.Decimal,
        schemas.BoolClass,
        schemas.NoneClass,
        tuple,
        bytes,
        schemas.FileIO
    ]]: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anyTypePropNullable"]) -> AnyTypePropNullable[typing.Union[
        frozendict.frozendict,
        str,
        decimal.Decimal,
        schemas.BoolClass,
        schemas.NoneClass,
        tuple,
        bytes,
        schemas.FileIO
    ]]: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.AnyTypeSchema[typing.Union[
        frozendict.frozendict,
        str,
        decimal.Decimal,
        schemas.BoolClass,
        schemas.NoneClass,
        tuple,
        bytes,
        schemas.FileIO
    ]]: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["id"],
            typing_extensions.Literal["username"],
            typing_extensions.Literal["firstName"],
            typing_extensions.Literal["lastName"],
            typing_extensions.Literal["email"],
            typing_extensions.Literal["password"],
            typing_extensions.Literal["phone"],
            typing_extensions.Literal["userStatus"],
            typing_extensions.Literal["objectWithNoDeclaredProps"],
            typing_extensions.Literal["objectWithNoDeclaredPropsNullable"],
            typing_extensions.Literal["anyTypeProp"],
            typing_extensions.Literal["anyTypeExceptNullProp"],
            typing_extensions.Literal["anyTypePropNullable"],
            str
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    def __new__(
        cls,
        arg: typing.Union[
            DictInput6,
            User[frozendict.frozendict],
        ],
        configuration: typing.Optional[schemas.schema_configuration.SchemaConfiguration] = None
    ) -> User[frozendict.frozendict]:
        return super().__new__(
            cls,
            arg,
            configuration=configuration,
        )

