# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

import datetime  # noqa: F401
import decimal  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401


class TriangleInterface(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """


    class Schema_:
        # any type
        required = {
            "shapeType",
            "triangleType",
        }
        
        class Properties:
            
            
            class ShapeType(
                schemas.StrSchema
            ):
            
            
                class Schema_:
                    types = {
                        str,
                    }
                    enum_value_to_name = {
                        "Triangle": "TRIANGLE",
                    }
                
                @schemas.classproperty
                def TRIANGLE(cls):
                    return cls("Triangle")
            TriangleType = schemas.StrSchema
            __annotations__ = {
                "shapeType": ShapeType,
                "triangleType": TriangleType,
            }

    
    @property
    def shapeType(self) -> Schema_.Properties.ShapeType:
        return self.__getitem__("shapeType")
    
    @property
    def triangleType(self) -> Schema_.Properties.TriangleType:
        return self.__getitem__("triangleType")
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shapeType"]) -> Schema_.Properties.ShapeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["triangleType"]) -> Schema_.Properties.TriangleType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["shapeType"],
            typing_extensions.Literal["triangleType"],
            str
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

