# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from petstore_api.shared_imports.schema_imports import *

AdditionalProperties: typing_extensions.TypeAlias = schemas.NotAnyTypeSchema
Path: typing_extensions.TypeAlias = schemas.StrSchema
Value: typing_extensions.TypeAlias = schemas.AnyTypeSchema


class OpEnums:

    @schemas.classproperty
    def ADD(cls) -> str:
        return Op.validate("add")

    @schemas.classproperty
    def REPLACE(cls) -> str:
        return Op.validate("replace")

    @schemas.classproperty
    def TEST(cls) -> str:
        return Op.validate("test")


@dataclasses.dataclass(frozen=True)
class Op(
    schemas.StrSchema
):
    types: typing.FrozenSet[typing.Type] = frozenset({
        str,
    })
    enum_value_to_name: typing.Mapping[typing.Union[int, float, str, bool, schemas.none_type_], str] = dataclasses.field(
        default_factory=lambda: {
            "add": "ADD",
            "replace": "REPLACE",
            "test": "TEST",
        }
    )
    enums = OpEnums
Properties = typing_extensions.TypedDict(
    'Properties',
    {
        "path": typing.Type[Path],
        "value": typing.Type[Value],
        "op": typing.Type[Op],
    }
)


class JSONPatchRequestAddReplaceTestDict(schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]):
    
    @property
    def op(self) -> str:
        return self.__getitem__("op")
    
    @property
    def path(self) -> str:
        return self.__getitem__("path")
    
    @property
    def value(self) -> schemas.OUTPUT_BASE_TYPES:
        return self.__getitem__("value")
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["op"]) -> str:
        ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> str:
        ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> schemas.OUTPUT_BASE_TYPES:
        ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["op"],
            typing_extensions.Literal["path"],
            typing_extensions.Literal["value"],
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    def __new__(cls, arg: JSONPatchRequestAddReplaceTestDictInput, configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None):
        return JSONPatchRequestAddReplaceTest.validate(arg, configuration=configuration)
JSONPatchRequestAddReplaceTestDictInput = typing_extensions.TypedDict(
    'JSONPatchRequestAddReplaceTestDictInput',
    {
        "op": str,
        "path": str,
        "value": typing.Union[
            dict,
            schemas.immutabledict,
            str,
            datetime.date,
            datetime.datetime,
            uuid.UUID,
            int,
            float,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader
        ],
    }
)


@dataclasses.dataclass(frozen=True)
class JSONPatchRequestAddReplaceTest(
    schemas.DictSchema[JSONPatchRequestAddReplaceTestDict]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    required: typing.FrozenSet[str] = frozenset({
        "op",
        "path",
        "value",
    })
    properties: Properties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(Properties)) # type: ignore
    additional_properties: typing.Type[AdditionalProperties] = dataclasses.field(default_factory=lambda: AdditionalProperties) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: JSONPatchRequestAddReplaceTestDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            JSONPatchRequestAddReplaceTestDictInput,
            JSONPatchRequestAddReplaceTestDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> JSONPatchRequestAddReplaceTestDict:
        return super().validate(
            arg,
            configuration=configuration,
        )

