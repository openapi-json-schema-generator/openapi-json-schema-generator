# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401


class FormatTest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "byte",
            "date",
            "number",
            "password",
        }
        
        class Properties:
            
            
            class FormatTest(
                schemas.IntSchema
            ):
                """NOTE: This class is auto generated by OpenAPI Generator.
                Ref: https://openapi-generator.tech
            
                Do not edit the class manually.
                """
                pass
            FormatTest = schemas.Int32Schema
            
            
            class FormatTest(
                schemas.Int32Schema
            ):
                """NOTE: This class is auto generated by OpenAPI Generator.
                Ref: https://openapi-generator.tech
            
                Do not edit the class manually.
                """
                pass
            FormatTest = schemas.Int64Schema
            
            
            class FormatTest(
                schemas.NumberSchema
            ):
                """NOTE: This class is auto generated by OpenAPI Generator.
                Ref: https://openapi-generator.tech
            
                Do not edit the class manually.
                """
                pass
            
            
            class FormatTest(
                schemas.Float32Schema
            ):
                """NOTE: This class is auto generated by OpenAPI Generator.
                Ref: https://openapi-generator.tech
            
                Do not edit the class manually.
            
                this is a reserved python keyword
                """
                pass
            FormatTest = schemas.Float32Schema
            
            
            class FormatTest(
                schemas.Float64Schema
            ):
                """NOTE: This class is auto generated by OpenAPI Generator.
                Ref: https://openapi-generator.tech
            
                Do not edit the class manually.
                """
                pass
            FormatTest = schemas.Float64Schema
            
            
            class FormatTest(
                schemas.ListSchema
            ):
                """NOTE: This class is auto generated by OpenAPI Generator.
                Ref: https://openapi-generator.tech
            
                Do not edit the class manually.
                """
            
            
                class MetaOapg:
                    types = {tuple}
                    unique_items = True
                    FormatTest = schemas.NumberSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.FormatTest, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.FormatTest, decimal.Decimal, int, float, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'FormatTest':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.FormatTest:
                    return super().__getitem__(i)
            
            
            class FormatTest(
                schemas.StrSchema
            ):
                """NOTE: This class is auto generated by OpenAPI Generator.
                Ref: https://openapi-generator.tech
            
                Do not edit the class manually.
                """
                pass
            FormatTest = schemas.StrSchema
            FormatTest = schemas.BinarySchema
            FormatTest = schemas.DateSchema
            FormatTest = schemas.DateTimeSchema
            FormatTest = schemas.UUIDSchema
            FormatTest = schemas.UUIDSchema
            
            
            class FormatTest(
                schemas.StrSchema
            ):
                """NOTE: This class is auto generated by OpenAPI Generator.
                Ref: https://openapi-generator.tech
            
                Do not edit the class manually.
                """
                pass
            
            
            class FormatTest(
                schemas.StrSchema
            ):
                """NOTE: This class is auto generated by OpenAPI Generator.
                Ref: https://openapi-generator.tech
            
                Do not edit the class manually.
            
                A string that is a 10 digit number. Can have leading zeros.
                """
                pass
            
            
            class FormatTest(
                schemas.StrSchema
            ):
                """NOTE: This class is auto generated by OpenAPI Generator.
                Ref: https://openapi-generator.tech
            
                Do not edit the class manually.
            
                A string starting with 'image_' (case insensitive) and one to three digits following i.e. Image_01.
                """
                pass
            FormatTest = schemas.NoneSchema
            __annotations__ = {
                "integer": FormatTest,
                "int32": FormatTest,
                "int32withValidations": FormatTest,
                "int64": FormatTest,
                "number": FormatTest,
                "float": FormatTest,
                "float32": FormatTest,
                "double": FormatTest,
                "float64": FormatTest,
                "arrayWithUniqueItems": FormatTest,
                "string": FormatTest,
                "byte": FormatTest,
                "binary": FormatTest,
                "date": FormatTest,
                "dateTime": FormatTest,
                "uuid": FormatTest,
                "uuidNoExample": FormatTest,
                "password": FormatTest,
                "pattern_with_digits": FormatTest,
                "pattern_with_digits_and_delimiter": FormatTest,
                "noneProp": FormatTest,
            }
    
    byte: MetaOapg.Properties.FormatTest
    date: MetaOapg.Properties.FormatTest
    number: MetaOapg.Properties.FormatTest
    password: MetaOapg.Properties.FormatTest
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["byte"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integer"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["int32"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["int32withValidations"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["int64"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["float"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["float32"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["double"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["float64"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["arrayWithUniqueItems"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["string"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["binary"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTime"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuidNoExample"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pattern_with_digits"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pattern_with_digits_and_delimiter"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noneProp"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["byte"],
            typing_extensions.Literal["date"],
            typing_extensions.Literal["number"],
            typing_extensions.Literal["password"],
            typing_extensions.Literal["integer"],
            typing_extensions.Literal["int32"],
            typing_extensions.Literal["int32withValidations"],
            typing_extensions.Literal["int64"],
            typing_extensions.Literal["float"],
            typing_extensions.Literal["float32"],
            typing_extensions.Literal["double"],
            typing_extensions.Literal["float64"],
            typing_extensions.Literal["arrayWithUniqueItems"],
            typing_extensions.Literal["string"],
            typing_extensions.Literal["binary"],
            typing_extensions.Literal["dateTime"],
            typing_extensions.Literal["uuid"],
            typing_extensions.Literal["uuidNoExample"],
            typing_extensions.Literal["pattern_with_digits"],
            typing_extensions.Literal["pattern_with_digits_and_delimiter"],
            typing_extensions.Literal["noneProp"],
            str
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["byte"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> MetaOapg.Properties.FormatTest: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integer"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["int32"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["int32withValidations"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["int64"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["float"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["float32"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["double"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["float64"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["arrayWithUniqueItems"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["string"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["binary"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTime"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuidNoExample"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pattern_with_digits"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pattern_with_digits_and_delimiter"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noneProp"]) -> typing.Union[MetaOapg.Properties.FormatTest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal["byte"],
            typing_extensions.Literal["date"],
            typing_extensions.Literal["number"],
            typing_extensions.Literal["password"],
            typing_extensions.Literal["integer"],
            typing_extensions.Literal["int32"],
            typing_extensions.Literal["int32withValidations"],
            typing_extensions.Literal["int64"],
            typing_extensions.Literal["float"],
            typing_extensions.Literal["float32"],
            typing_extensions.Literal["double"],
            typing_extensions.Literal["float64"],
            typing_extensions.Literal["arrayWithUniqueItems"],
            typing_extensions.Literal["string"],
            typing_extensions.Literal["binary"],
            typing_extensions.Literal["dateTime"],
            typing_extensions.Literal["uuid"],
            typing_extensions.Literal["uuidNoExample"],
            typing_extensions.Literal["pattern_with_digits"],
            typing_extensions.Literal["pattern_with_digits_and_delimiter"],
            typing_extensions.Literal["noneProp"],
            str
        ]
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        byte: typing.Union[MetaOapg.Properties.FormatTest, str, ],
        date: typing.Union[MetaOapg.Properties.FormatTest, str, date, ],
        number: typing.Union[MetaOapg.Properties.FormatTest, decimal.Decimal, int, float, ],
        password: typing.Union[MetaOapg.Properties.FormatTest, str, ],
        integer: typing.Union[MetaOapg.Properties.FormatTest, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        int32: typing.Union[MetaOapg.Properties.FormatTest, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        int32withValidations: typing.Union[MetaOapg.Properties.FormatTest, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        int64: typing.Union[MetaOapg.Properties.FormatTest, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        float32: typing.Union[MetaOapg.Properties.FormatTest, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        double: typing.Union[MetaOapg.Properties.FormatTest, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        float64: typing.Union[MetaOapg.Properties.FormatTest, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        arrayWithUniqueItems: typing.Union[MetaOapg.Properties.FormatTest, list, tuple, schemas.Unset] = schemas.unset,
        string: typing.Union[MetaOapg.Properties.FormatTest, str, schemas.Unset] = schemas.unset,
        binary: typing.Union[MetaOapg.Properties.FormatTest, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        dateTime: typing.Union[MetaOapg.Properties.FormatTest, str, datetime, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.Properties.FormatTest, str, uuid.UUID, schemas.Unset] = schemas.unset,
        uuidNoExample: typing.Union[MetaOapg.Properties.FormatTest, str, uuid.UUID, schemas.Unset] = schemas.unset,
        pattern_with_digits: typing.Union[MetaOapg.Properties.FormatTest, str, schemas.Unset] = schemas.unset,
        pattern_with_digits_and_delimiter: typing.Union[MetaOapg.Properties.FormatTest, str, schemas.Unset] = schemas.unset,
        noneProp: typing.Union[MetaOapg.Properties.FormatTest, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FormatTest':
        return super().__new__(
            cls,
            *_args,
            byte=byte,
            date=date,
            number=number,
            password=password,
            integer=integer,
            int32=int32,
            int32withValidations=int32withValidations,
            int64=int64,
            float32=float32,
            double=double,
            float64=float64,
            arrayWithUniqueItems=arrayWithUniqueItems,
            string=string,
            binary=binary,
            dateTime=dateTime,
            uuid=uuid,
            uuidNoExample=uuidNoExample,
            pattern_with_digits=pattern_with_digits,
            pattern_with_digits_and_delimiter=pattern_with_digits_and_delimiter,
            noneProp=noneProp,
            _configuration=_configuration,
            **kwargs,
        )
