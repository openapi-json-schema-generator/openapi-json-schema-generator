# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401


class ObjectHasDiscWithValueThatIsARefFragment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "objType",
        }
        
        @staticmethod
        def discriminator():
            return {
                'objType': {
                    'ObjHere': obj_here_oapg.ObjHere,
                    'ObjThere': obj_there_oapg.ObjThere,
                    'ThisObjHere': obj_here_oapg.ObjHere,
                    'ThisObjThere': obj_there_oapg.ObjThere,
                }
            }
        
        class properties:
            objType = schemas.StrSchema
            __annotations__ = {
                "objType": objType,
            }
    
    objType: MetaOapg.properties.objType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objType"]) -> MetaOapg.properties.objType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["objType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objType"]) -> MetaOapg.properties.objType: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["objType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        objType: typing.Union[MetaOapg.properties.objType, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObjectHasDiscWithValueThatIsARefFragment':
        return super().__new__(
            cls,
            *args,
            objType=objType,
            _configuration=_configuration,
            **kwargs,
        )

from petstore_api.components.schema import obj_here_oapg
from petstore_api.components.schema import obj_there_oapg
