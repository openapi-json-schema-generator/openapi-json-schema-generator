# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401


class ObjectModelWithArgAndArgsProperties(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "arg",
            "args",
        }
        
        class Properties:
            Arg = schemas.StrSchema
            Args = schemas.StrSchema
            __annotations__ = {
                "arg": Arg,
                "args": Args,
            }
    
    arg: MetaOapg.Properties.Arg
    args: MetaOapg.Properties.Args
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["arg"]) -> MetaOapg.Properties.Arg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["args"]) -> MetaOapg.Properties.Args: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["arg"],
            typing_extensions.Literal["args"],
            str
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["arg"]) -> MetaOapg.Properties.Arg: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["args"]) -> MetaOapg.Properties.Args: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal["arg"],
            typing_extensions.Literal["args"],
            str
        ]
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        arg: typing.Union[MetaOapg.Properties.Arg, str, ],
        args: typing.Union[MetaOapg.Properties.Args, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObjectModelWithArgAndArgsProperties':
        return super().__new__(
            cls,
            *_args,
            arg=arg,
            args=args,
            _configuration=_configuration,
            **kwargs,
        )
