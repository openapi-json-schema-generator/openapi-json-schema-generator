# coding: utf-8

"""
    discriminator-test

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from this_package import schemas  # noqa: F401


class Operator(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        # any type
        
        @staticmethod
        def discriminator():
            return {
                'operator_id': {
                    'ADD': addition_operator.AdditionOperator,
                    'AdditionOperator': addition_operator.AdditionOperator,
                    'SUB': subtraction_operator.SubtractionOperator,
                    'SubtractionOperator': subtraction_operator.SubtractionOperator,
                }
            }
        
        class OneOf:
        
            @staticmethod
            def one_of0() -> typing.Type['addition_operator.AdditionOperator']:
                return addition_operator.AdditionOperator
        
            @staticmethod
            def one_of1() -> typing.Type['subtraction_operator.SubtractionOperator']:
                return subtraction_operator.SubtractionOperator
            classes = [
                one_of0,
                one_of1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Operator':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from this_package.components.schema import addition_operator
from this_package.components.schema import subtraction_operator
