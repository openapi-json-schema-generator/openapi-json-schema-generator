# coding: utf-8

"""
    discriminator-test

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

import datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from this_package import schemas  # noqa: F401


class SubtractionOperator(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "a",
            "b",
            "operator_id",
        }
        
        class Properties:
            A = schemas.Float64Schema
            B = schemas.Float64Schema
            OperatorId = schemas.StrSchema
            __annotations__ = {
                "a": A,
                "b": B,
                "operator_id": OperatorId,
            }
        AdditionalProperties = schemas.NotAnyTypeSchema
    
    a: MetaOapg.Properties.A
    b: MetaOapg.Properties.B
    operator_id: MetaOapg.Properties.OperatorId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["a"]) -> MetaOapg.Properties.A: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["b"]) -> MetaOapg.Properties.B: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operator_id"]) -> MetaOapg.Properties.OperatorId: ...
    
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal["a"],
            typing_extensions.Literal["b"],
            typing_extensions.Literal["operator_id"],
        ]
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["a"]) -> MetaOapg.Properties.A: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["b"]) -> MetaOapg.Properties.B: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operator_id"]) -> MetaOapg.Properties.OperatorId: ...
    
    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal["a"],
            typing_extensions.Literal["b"],
            typing_extensions.Literal["operator_id"],
        ]
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        a: typing.Union[MetaOapg.Properties.A, decimal.Decimal, int, float, ],
        b: typing.Union[MetaOapg.Properties.B, decimal.Decimal, int, float, ],
        operator_id: typing.Union[MetaOapg.Properties.OperatorId, str, ],
        _configuration: typing.Optional[schemas.configuration_module.Configuration] = None,
    ) -> 'SubtractionOperator':
        return super().__new__(
            cls,
            *_args,
            a=a,
            b=b,
            operator_id=operator_id,
            _configuration=_configuration,
        )
