# coding: utf-8

"""
    security-test
    No description provided (generated by Openapi JSON Schema Generator https://github.com/openapi-json-schema-tools/openapi-json-schema-generator)  # noqa: E501
    The version of the OpenAPI document: 1.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

import typing

import typing_extensions

from .schema import (
    get_class,
    none_type_,
    classproperty,
    Bool,
    FileIO,
    Schema,
    SingletonMeta,
    AnyTypeSchema,
    UnsetAnyTypeSchema,
    INPUT_TYPES_ALL_INCL_SCHEMA
)

from .schemas import (
    ListSchema,
    NoneSchema,
    NumberSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    StrSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BytesSchema,
    FileSchema,
    BinarySchema,
    BoolSchema,
    NotAnyTypeSchema,
    OUTPUT_BASE_TYPES,
    DictSchema
)
from .validation import (
    PatternInfo,
    ValidationMetadata,
    immutabledict
)
from .format import (
    as_date_,
    as_datetime_,
    as_decimal_,
    as_uuid_
)

W = typing.TypeVar('W', bound=typing_extensions.TypedDict)

def typed_dict_to_instance(t_dict: typing.Type[W]) -> W:
    res = {}
    for key, val in t_dict.__annotations__.items():
        if isinstance(val, typing._GenericAlias): # type: ignore
            # typing.Type[W] -> W
            val_cls = typing_extensions.get_args(val)[0]
            res[key] = val_cls
    return res # type: ignore

X = typing.TypeVar('X', bound=typing.Tuple)

def tuple_to_instance(tup: typing.Type[X]) -> X:
    res = []
    for arg in typing_extensions.get_args(tup):
        if isinstance(arg, typing._GenericAlias): # type: ignore
            # typing.Type[Schema] -> Schema
            arg_cls = typing_extensions.get_args(arg)[0]
            res.append(arg_cls)
    return tuple(res) # type: ignore


class Unset(object):
    """
    An instance of this class is set as the default value for object type(dict) properties that are optional
    When a property has an unset value, that property will not be assigned in the dict
    """
    pass

unset = Unset()
