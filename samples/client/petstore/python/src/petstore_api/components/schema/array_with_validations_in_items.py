# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose.  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from petstore_api.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]



@dataclasses.dataclass(frozen=True)
class Items(
    schemas.Int64Schema
):
    types: typing.FrozenSet[typing.Type] = frozenset({
        int,
    })
    format: str = 'int64'
    inclusive_maximum: typing.Union[int, float] = 7


class ArrayWithValidationsInItemsTuple(
    typing.Tuple[
        int,
        ...
    ]
):

    def __new__(cls, arg: typing.Union[ArrayWithValidationsInItemsTupleInput, ArrayWithValidationsInItemsTuple], configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None):
        return ArrayWithValidationsInItems.validate(arg, configuration=configuration)
ArrayWithValidationsInItemsTupleInput = typing.Union[
    typing.List[
        int,
    ],
    typing.Tuple[
        int,
        ...
    ]
]


@dataclasses.dataclass(frozen=True)
class ArrayWithValidationsInItems(
    schemas.Schema[schemas.immutabledict, ArrayWithValidationsInItemsTuple]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({tuple})
    max_items: int = 2
    items: typing.Type[Items] = dataclasses.field(default_factory=lambda: Items) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            tuple: ArrayWithValidationsInItemsTuple
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            ArrayWithValidationsInItemsTupleInput,
            ArrayWithValidationsInItemsTuple,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> ArrayWithValidationsInItemsTuple:
        return super().validate_base(
            arg,
            configuration=configuration,
        )
