# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from petstore_api.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]


from petstore_api.components.schema import enum_class


class AdditionalPropertiesTuple(
    typing.Tuple[
        typing.Literal["_abc", "-efg", "(xyz)", "COUNT_1M", "COUNT_50M"],
        ...
    ]
):

    def __new__(cls, arg: typing.Union[AdditionalPropertiesTupleInput, AdditionalPropertiesTuple], configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None):
        return AdditionalProperties.validate(arg, configuration=configuration)
AdditionalPropertiesTupleInput = typing.Union[
    typing.List[
        typing.Literal[
            "_abc",
            "-efg",
            "(xyz)",
            "COUNT_1M",
            "COUNT_50M"
        ],
    ],
    typing.Tuple[
        typing.Literal[
            "_abc",
            "-efg",
            "(xyz)",
            "COUNT_1M",
            "COUNT_50M"
        ],
        ...
    ]
]


@dataclasses.dataclass(frozen=True)
class AdditionalProperties(
    schemas.Schema[schemas.immutabledict, AdditionalPropertiesTuple]
):
    types: typing.FrozenSet[typing.Type] = frozenset({tuple})
    items: typing.Type[enum_class.EnumClass] = dataclasses.field(default_factory=lambda: enum_class.EnumClass) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            tuple: AdditionalPropertiesTuple
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            AdditionalPropertiesTupleInput,
            AdditionalPropertiesTuple,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> AdditionalPropertiesTuple:
        return super().validate_base(
            arg,
            configuration=configuration,
        )


class AdditionalPropertiesWithArrayOfEnumsDict(schemas.immutabledict[str, typing.Tuple[schemas.OUTPUT_BASE_TYPES]]):

    __required_keys__: typing.FrozenSet[str] = frozenset({
    })
    __optional_keys__: typing.FrozenSet[str] = frozenset({
    })
    def __new__(
        cls,
        configuration_: typing.Optional[schema_configuration.SchemaConfiguration] = None,
        **kwargs: typing.Union[
            AdditionalPropertiesTupleInput,
            AdditionalPropertiesTuple
        ],
    ):
        used_kwargs = typing.cast(AdditionalPropertiesWithArrayOfEnumsDictInput, kwargs)
        return AdditionalPropertiesWithArrayOfEnums.validate(used_kwargs, configuration=configuration_)
    
    @staticmethod
    def from_dict_(
        arg: typing.Union[
            AdditionalPropertiesWithArrayOfEnumsDictInput,
            AdditionalPropertiesWithArrayOfEnumsDict
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> AdditionalPropertiesWithArrayOfEnumsDict:
        return AdditionalPropertiesWithArrayOfEnums.validate(arg, configuration=configuration)
    
    def get_additional_property_(self, name: str) -> typing.Union[AdditionalPropertiesTuple, schemas.Unset]:
        schemas.raise_if_key_known(name, self.__required_keys__, self.__optional_keys__)
        val = self.get(name, schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            AdditionalPropertiesTuple,
            val
        )
AdditionalPropertiesWithArrayOfEnumsDictInput = typing.Mapping[
    str,
    typing.Union[
        AdditionalPropertiesTupleInput,
        AdditionalPropertiesTuple
    ],
]


@dataclasses.dataclass(frozen=True)
class AdditionalPropertiesWithArrayOfEnums(
    schemas.Schema[AdditionalPropertiesWithArrayOfEnumsDict, tuple]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    additional_properties: typing.Type[AdditionalProperties] = dataclasses.field(default_factory=lambda: AdditionalProperties) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: AdditionalPropertiesWithArrayOfEnumsDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            AdditionalPropertiesWithArrayOfEnumsDictInput,
            AdditionalPropertiesWithArrayOfEnumsDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> AdditionalPropertiesWithArrayOfEnumsDict:
        return super().validate_base(
            arg,
            configuration=configuration,
        )

