# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from petstore_api.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]

AdditionalProperties: typing_extensions.TypeAlias = schemas.BoolSchema


class StringBooleanMapDict(schemas.immutabledict[str, bool]):

    __required_keys__: typing.FrozenSet[str] = frozenset({
    })
    __optional_keys__: typing.FrozenSet[str] = frozenset({
    })
    def __new__(
        cls,
        configuration_: typing.Optional[schema_configuration.SchemaConfiguration] = None,
        **kwargs: bool,
    ):
        used_kwargs = typing.cast(StringBooleanMapDictInput, kwargs)
        return StringBooleanMap.validate(used_kwargs, configuration=configuration_)
    
    @staticmethod
    def from_dict_(
        arg: StringBooleanMapDictInput,
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> StringBooleanMapDict:
        return StringBooleanMap.validate(arg, configuration=configuration)

    
    def get_additional_property_(self, name: str) -> typing.Union[bool, schemas.Unset]:
        schemas.raise_if_key_known(name, self.__required_keys__, self.__optional_keys__)
        val = self.get(name, schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            bool,
            val
        )
StringBooleanMapDictInput = typing.Mapping[
    str,
    bool,
]


@dataclasses.dataclass(frozen=True)
class StringBooleanMap(
    schemas.Schema[StringBooleanMapDict, tuple]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    additional_properties: typing.Type[AdditionalProperties] = dataclasses.field(default_factory=lambda: AdditionalProperties) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: StringBooleanMapDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            StringBooleanMapDictInput,
            StringBooleanMapDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> StringBooleanMapDict:
        return super().validate_base(
            arg,
            configuration=configuration,
        )

