# coding: utf-8

"""
    OpenAPI Petstore
    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from petstore_api.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]

AdditionalProperties: typing_extensions.TypeAlias = schemas.NotAnyTypeSchema

from petstore_api.paths.fake_parameter_collisions1_abab_self_ab.post.parameters.parameter_14 import schema as parameter_14_schema
from petstore_api.paths.fake_parameter_collisions1_abab_self_ab.post.parameters.parameter_15 import schema as parameter_15_schema
from petstore_api.paths.fake_parameter_collisions1_abab_self_ab.post.parameters.parameter_16 import schema as parameter_16_schema
from petstore_api.paths.fake_parameter_collisions1_abab_self_ab.post.parameters.parameter_17 import schema as parameter_17_schema
from petstore_api.paths.fake_parameter_collisions1_abab_self_ab.post.parameters.parameter_18 import schema as parameter_18_schema
Properties = typing_extensions.TypedDict(
    'Properties',
    {
        "1": typing.Type[parameter_14_schema.Schema],
        "aB": typing.Type[parameter_15_schema.Schema],
        "Ab": typing.Type[parameter_16_schema.Schema],
        "A-B": typing.Type[parameter_18_schema.Schema],
        "self": typing.Type[parameter_17_schema.Schema],
    }
)


class CookieParametersDict(schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]):

    __required_keys__: typing.FrozenSet[str] = frozenset({
    })
    __optional_keys__: typing.FrozenSet[str] = frozenset({
        "1",
        "aB",
        "Ab",
        "A-B",
        "self",
    })
    
    @property
    def aB(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("aB", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def Ab(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("Ab", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )

    def __new__(cls, arg: CookieParametersDictInput, configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None):
        return CookieParameters.validate(arg, configuration=configuration)
CookieParametersDictInput = typing_extensions.TypedDict(
    'CookieParametersDictInput',
    {
        "1": str,
        "aB": str,
        "Ab": str,
        "A-B": str,
        "self": str,
    },
    total=False
)


@dataclasses.dataclass(frozen=True)
class CookieParameters(
    schemas.Schema[CookieParametersDict, tuple]
):
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    properties: Properties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(Properties)) # type: ignore
    additional_properties: typing.Type[AdditionalProperties] = dataclasses.field(default_factory=lambda: AdditionalProperties) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: CookieParametersDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            CookieParametersDictInput,
            CookieParametersDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> CookieParametersDict:
        return super().validate_base(
            arg,
            configuration=configuration,
        )

