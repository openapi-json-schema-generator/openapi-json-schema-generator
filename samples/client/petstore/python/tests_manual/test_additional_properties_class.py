# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

import unittest
from unittest import mock

from petstore_api.components.schema import additional_properties_class
from petstore_api import schemas


class TestAdditionalPropertiesClass(unittest.TestCase):
    """AdditionalPropertiesClass unit test stubs"""

    def test_additional_properties_class(self):
        inst = additional_properties_class.AdditionalPropertiesClass.validate({})
        with self.assertRaises(KeyError):
            inst["map_property"]
        assert inst.get("map_property", schemas.unset) is schemas.unset
        assert inst.map_property is schemas.unset

        inst = additional_properties_class.AdditionalPropertiesClass.validate({'map_property': {}})
        map_property = inst["map_property"]
        assert map_property == {}

    @mock.patch('petstore_api.components.schema.additional_properties_class.typing.cast')
    def test_map_property_casting(self, mock_cast):
        def side_effect(cls, value):
            return value
        mock_cast.side_effect = side_effect
        inst = additional_properties_class.AdditionalPropertiesClass.validate({'map_property': {}})
        inst.map_property
        assert mock_cast.mock_calls[-1] == mock.call(
            additional_properties_class.MapPropertyDict, {}
        )


if __name__ == '__main__':
    unittest.main()
