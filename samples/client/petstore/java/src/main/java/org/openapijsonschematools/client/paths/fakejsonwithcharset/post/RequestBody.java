/*
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
*/

package org.openapijsonschematools.client.paths.fakejsonwithcharset.post;

import org.openapijsonschematools.client.requestbody.RequestBodySerializer;
import org.openapijsonschematools.client.requestbody.GenericRequestBody;
import org.openapijsonschematools.client.mediatype.MediaType;
import org.openapijsonschematools.client.paths.fakejsonwithcharset.post.requestbody.content.applicationjsoncharsetutf8.Applicationjsoncharsetutf8Schema;
import org.openapijsonschematools.client.requestbody.SerializedRequestBody;

import java.util.AbstractMap;
import java.util.Map;

public class RequestBody {

    public static class Applicationjsoncharsetutf8MediaType extends MediaType<Applicationjsoncharsetutf8Schema.Applicationjsoncharsetutf8Schema1> {
        public Applicationjsoncharsetutf8MediaType() {
            super(Applicationjsoncharsetutf8Schema.Applicationjsoncharsetutf8Schema1.getInstance());
        }
    }

    public static class RequestBody1 extends RequestBodySerializer<SealedRequestBody> {
        public RequestBody1() {
            super(
                Map.ofEntries(
                    new AbstractMap.SimpleEntry<>("application/json; charset=utf-8", new Applicationjsoncharsetutf8MediaType())
                ),
                false
            );
        }

        public SerializedRequestBody serialize(SealedRequestBody requestBody) {
            Applicationjsoncharsetutf8RequestBody requestBody0 = (Applicationjsoncharsetutf8RequestBody) requestBody;
            return serialize(requestBody0.contentType(), requestBody0.body().data());
        }
    }

    public static abstract sealed class SealedRequestBody permits Applicationjsoncharsetutf8RequestBody {}
    public static final class Applicationjsoncharsetutf8RequestBody extends SealedRequestBody implements GenericRequestBody<Applicationjsoncharsetutf8Schema.AnyTypeJsonSchema1Boxed> {
        private final String contentType;
        private final Applicationjsoncharsetutf8Schema.AnyTypeJsonSchema1Boxed body;
        public Applicationjsoncharsetutf8RequestBody(Applicationjsoncharsetutf8Schema.AnyTypeJsonSchema1Boxed body) {
            contentType = "application/json; charset=utf-8";
            this.body = body;
        }
        @Override
        public String contentType() {
            return contentType;
        }

        @Override
        public Applicationjsoncharsetutf8Schema.AnyTypeJsonSchema1Boxed body() {
            return body;
        }
    }
}
