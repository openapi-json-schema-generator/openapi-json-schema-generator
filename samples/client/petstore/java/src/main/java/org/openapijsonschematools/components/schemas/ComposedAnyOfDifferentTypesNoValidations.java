package org.openapijsonschematools.components.schemas;
import java.time.LocalDate;
import java.time.ZonedDateTime;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import org.openapijsonschematools.configurations.SchemaConfiguration;
import org.openapijsonschematools.exceptions.ValidationException;
import org.openapijsonschematools.schemas.AnyTypeJsonSchema;
import org.openapijsonschematools.schemas.BooleanJsonSchema;
import org.openapijsonschematools.schemas.DateJsonSchema;
import org.openapijsonschematools.schemas.DateTimeJsonSchema;
import org.openapijsonschematools.schemas.DoubleJsonSchema;
import org.openapijsonschematools.schemas.FloatJsonSchema;
import org.openapijsonschematools.schemas.Int32JsonSchema;
import org.openapijsonschematools.schemas.Int64JsonSchema;
import org.openapijsonschematools.schemas.IntJsonSchema;
import org.openapijsonschematools.schemas.MapJsonSchema;
import org.openapijsonschematools.schemas.NullJsonSchema;
import org.openapijsonschematools.schemas.NumberJsonSchema;
import org.openapijsonschematools.schemas.StringJsonSchema;
import org.openapijsonschematools.schemas.validation.AnyOfValidator;
import org.openapijsonschematools.schemas.validation.FrozenList;
import org.openapijsonschematools.schemas.validation.FrozenMap;
import org.openapijsonschematools.schemas.validation.ItemsValidator;
import org.openapijsonschematools.schemas.validation.JsonSchema;
import org.openapijsonschematools.schemas.validation.KeywordEntry;
import org.openapijsonschematools.schemas.validation.KeywordValidator;
import org.openapijsonschematools.schemas.validation.TypeValidator;

public class ComposedAnyOfDifferentTypesNoValidations {
    // nest classes so all schemas and input/output classes can be public
    
    
    public static class Schema0 extends MapJsonSchema {}
    
    
    public static class Schema1 extends DateJsonSchema {}
    
    
    public static class Schema2 extends DateTimeJsonSchema {}
    
    
    public static class Schema3 extends JsonSchema {
        // BinarySchema
    }
    
    
    public static class Schema4 extends StringJsonSchema {}
    
    
    public static class Schema5 extends StringJsonSchema {}
    
    
    public static class Schema6 extends MapJsonSchema {}
    
    
    public static class Schema7 extends BooleanJsonSchema {}
    
    
    public static class Schema8 extends NullJsonSchema {}
    
    
    public static class Items extends AnyTypeJsonSchema {}
    
    
    public static class Schema9List extends FrozenList<Object> {
        Schema9List(FrozenList<Object> m) {
            super(m);
        }
        public static Schema9List of(List<Object> arg, SchemaConfiguration configuration) throws ValidationException {
            return Schema9.validate(arg, configuration);
        }
    }
    
    
    public static class Schema9 extends JsonSchema {
        public static final LinkedHashMap<String, KeywordValidator> keywordToValidator = new LinkedHashMap<>(Map.ofEntries(
            new KeywordEntry("type", new TypeValidator(Set.of(FrozenList.class))),
            new KeywordEntry("items", new ItemsValidator(Items.class))
        ));
        
        protected static Schema9List getListOutputInstance(FrozenList<Object> arg) {
            return new Schema9List(arg);
        }
        public static Schema9List validate(List<Object> arg, SchemaConfiguration configuration) throws ValidationException {
            return JsonSchema.validateList(Schema9.class, arg, configuration);
        }
    }    
    
    public static class Schema10 extends NumberJsonSchema {}
    
    
    public static class Schema11 extends FloatJsonSchema {}
    
    
    public static class Schema12 extends DoubleJsonSchema {}
    
    
    public static class Schema13 extends IntJsonSchema {}
    
    
    public static class Schema14 extends Int32JsonSchema {}
    
    
    public static class Schema15 extends Int64JsonSchema {}
    
    
    public static class ComposedAnyOfDifferentTypesNoValidations1 extends JsonSchema {
        /*
        NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
        Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
    
        Do not edit the class manually.
        */
        public static final LinkedHashMap<String, KeywordValidator> keywordToValidator = new LinkedHashMap<>(Map.ofEntries(
            new KeywordEntry("anyOf", new AnyOfValidator(List.of(
                Schema0.class,
                Schema1.class,
                Schema2.class,
                Schema3.class,
                Schema4.class,
                Schema5.class,
                Schema6.class,
                Schema7.class,
                Schema8.class,
                Schema9.class,
                Schema10.class,
                Schema11.class,
                Schema12.class,
                Schema13.class,
                Schema14.class,
                Schema15.class
            )))
        ));
        public static Void validate(Void arg, SchemaConfiguration configuration) throws ValidationException {
            return JsonSchema.validateVoid(ComposedAnyOfDifferentTypesNoValidations1.class, arg, configuration);
        }
        
        public static boolean validate(boolean arg, SchemaConfiguration configuration) throws ValidationException {
            return JsonSchema.validateBoolean(ComposedAnyOfDifferentTypesNoValidations1.class, arg, configuration);
        }
        
        public static int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
            return JsonSchema.validateInt(ComposedAnyOfDifferentTypesNoValidations1.class, arg, configuration);
        }
        
        public static long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
            return JsonSchema.validateLong(ComposedAnyOfDifferentTypesNoValidations1.class, arg, configuration);
        }
        
        public static float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
            return JsonSchema.validateFloat(ComposedAnyOfDifferentTypesNoValidations1.class, arg, configuration);
        }
        
        public static double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
            return JsonSchema.validateDouble(ComposedAnyOfDifferentTypesNoValidations1.class, arg, configuration);
        }
        
        public static String validate(String arg, SchemaConfiguration configuration) throws ValidationException {
            return JsonSchema.validateString(ComposedAnyOfDifferentTypesNoValidations1.class, arg, configuration);
        }
        
        public static String validate(ZonedDateTime arg, SchemaConfiguration configuration) throws ValidationException {
            return JsonSchema.validateZonedDateTime(ComposedAnyOfDifferentTypesNoValidations1.class, arg, configuration);
        }
        
        public static String validate(LocalDate arg, SchemaConfiguration configuration) throws ValidationException {
            return JsonSchema.validateLocalDate(ComposedAnyOfDifferentTypesNoValidations1.class, arg, configuration);
        }
        
        public static String validate(UUID arg, SchemaConfiguration configuration) throws ValidationException {
            return JsonSchema.validateUUID(ComposedAnyOfDifferentTypesNoValidations1.class, arg, configuration);
        }
        
        public static FrozenMap<String, Object> validate(Map<String, Object> arg, SchemaConfiguration configuration) throws ValidationException {
            return JsonSchema.validateMap(ComposedAnyOfDifferentTypesNoValidations1.class, arg, configuration);
        }
        
        public static FrozenList<Object> validate(List<Object> arg, SchemaConfiguration configuration) throws ValidationException {
            return JsonSchema.validateList(ComposedAnyOfDifferentTypesNoValidations1.class, arg, configuration);
        }
    }}
