# coding: utf-8

"""
    openapi 3.1.0 sample spec
    sample spec for testing openapi functionality, built from json schema tests for draft2020-12  # noqa: E501
    The version of the OpenAPI document: 0.0.1
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from unit_test_api.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]



class ElseConst:

    @schemas.classproperty
    def OTHER(cls) -> typing.Literal["other"]:
        return _Else.validate("other")


@dataclasses.dataclass(frozen=True)
class _Else(
    schemas.AnyTypeSchema[schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES], typing.Tuple[schemas.OUTPUT_BASE_TYPES, ...]],
):
    # any type
    const_value_to_name: typing.Mapping[typing.Union[int, float, str, schemas.Bool, None], str] = dataclasses.field(
        default_factory=lambda: {
            "other": "OTHER",
        }
    )
    const = ElseConst



@dataclasses.dataclass(frozen=True)
class _If(
    schemas.AnyTypeSchema[schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES], typing.Tuple[schemas.OUTPUT_BASE_TYPES, ...]],
):
    # any type
    max_length: int = 4



class ThenConst:

    @schemas.classproperty
    def YES(cls) -> typing.Literal["yes"]:
        return Then.validate("yes")


@dataclasses.dataclass(frozen=True)
class Then(
    schemas.AnyTypeSchema[schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES], typing.Tuple[schemas.OUTPUT_BASE_TYPES, ...]],
):
    # any type
    const_value_to_name: typing.Mapping[typing.Union[int, float, str, schemas.Bool, None], str] = dataclasses.field(
        default_factory=lambda: {
            "yes": "YES",
        }
    )
    const = ThenConst



@dataclasses.dataclass(frozen=True)
class IfAppearsAtTheEndWhenSerializedKeywordProcessingSequence(
    schemas.AnyTypeSchema[schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES], typing.Tuple[schemas.OUTPUT_BASE_TYPES, ...]],
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    # any type
    if_: typing.Type[_If] = dataclasses.field(default_factory=lambda: _If) # type: ignore
    then: typing.Type[Then] = dataclasses.field(default_factory=lambda: Then) # type: ignore
    else_: typing.Type[_Else] = dataclasses.field(default_factory=lambda: _Else) # type: ignore

