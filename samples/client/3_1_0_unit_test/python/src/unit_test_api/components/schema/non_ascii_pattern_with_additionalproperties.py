# coding: utf-8

"""
    openapi 3.1.0 sample spec
    sample spec for testing openapi functionality, built from json schema tests for draft2020-12  # noqa: E501
    The version of the OpenAPI document: 0.0.1
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from unit_test_api.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]

AdditionalProperties: typing_extensions.TypeAlias = schemas.NotAnyTypeSchema
CircumflexAccentLatinSmallLetterAWithAcute: typing_extensions.TypeAlias = schemas.AnyTypeSchema


class NonAsciiPatternWithAdditionalpropertiesDict(schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]):
    __required_keys__: typing.FrozenSet[str] = frozenset({
    })
    __optional_keys__: typing.FrozenSet[str] = frozenset({
    })
    # map with no key value pairs
    def __new__(
        cls,
        arg: NonAsciiPatternWithAdditionalpropertiesDictInput,
        configuration_: typing.Optional[schema_configuration.SchemaConfiguration] = None,
    ):
        return NonAsciiPatternWithAdditionalproperties.validate(arg, configuration=configuration_)
    
    @staticmethod
    def from_dict_(
        arg: typing.Union[
            NonAsciiPatternWithAdditionalpropertiesDictInput,
            NonAsciiPatternWithAdditionalpropertiesDict
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> NonAsciiPatternWithAdditionalpropertiesDict:
        return NonAsciiPatternWithAdditionalproperties.validate(arg, configuration=configuration)
NonAsciiPatternWithAdditionalpropertiesDictInput = typing.Mapping # mapping must be empty


@dataclasses.dataclass(frozen=True)
class NonAsciiPatternWithAdditionalproperties(
    schemas.Schema[NonAsciiPatternWithAdditionalpropertiesDict, tuple]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    pattern_properties: typing.Mapping[
        schemas.PatternInfo,
        typing.Type[schemas.Schema]
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.PatternInfo(
                pattern=r'^รก'  # noqa: E501
            ): CircumflexAccentLatinSmallLetterAWithAcute,
        }
    )
    additional_properties: typing.Type[AdditionalProperties] = dataclasses.field(default_factory=lambda: AdditionalProperties) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: NonAsciiPatternWithAdditionalpropertiesDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            NonAsciiPatternWithAdditionalpropertiesDictInput,
            NonAsciiPatternWithAdditionalpropertiesDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> NonAsciiPatternWithAdditionalpropertiesDict:
        return super().validate_base(
            arg,
            configuration=configuration,
        )

