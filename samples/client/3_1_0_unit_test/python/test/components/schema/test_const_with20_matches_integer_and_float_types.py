# coding: utf-8

"""
    openapi 3.1.0 sample spec
    sample spec for testing openapi functionality, built from json schema tests for draft2020-12  # noqa: E501
    The version of the OpenAPI document: 0.0.1
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

import unittest

import unit_test_api
from unit_test_api.components.schema.const_with20_matches_integer_and_float_types import ConstWith20MatchesIntegerAndFloatTypes
from unit_test_api.configurations import schema_configuration


class TestConstWith20MatchesIntegerAndFloatTypes(unittest.TestCase):
    """ConstWith20MatchesIntegerAndFloatTypes unit test stubs"""
    configuration = schema_configuration.SchemaConfiguration(
        disabled_json_schema_keywords={'format'}
    )

    def test_float200001_is_invalid_fails(self):
        # float -2.00001 is invalid
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
            ConstWith20MatchesIntegerAndFloatTypes.validate(
                -2.00001,
                configuration=self.configuration
            )

    def test_integer2_is_invalid_fails(self):
        # integer 2 is invalid
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
            ConstWith20MatchesIntegerAndFloatTypes.validate(
                2,
                configuration=self.configuration
            )

    def test_float20_is_valid_passes(self):
        # float -2.0 is valid
        ConstWith20MatchesIntegerAndFloatTypes.validate(
            -2.0,
            configuration=self.configuration
        )

    def test_float20_is_invalid_fails(self):
        # float 2.0 is invalid
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
            ConstWith20MatchesIntegerAndFloatTypes.validate(
                2.0,
                configuration=self.configuration
            )

    def test_integer2_is_valid_passes(self):
        # integer -2 is valid
        ConstWith20MatchesIntegerAndFloatTypes.validate(
            -2,
            configuration=self.configuration
        )


if __name__ == '__main__':
    unittest.main()
