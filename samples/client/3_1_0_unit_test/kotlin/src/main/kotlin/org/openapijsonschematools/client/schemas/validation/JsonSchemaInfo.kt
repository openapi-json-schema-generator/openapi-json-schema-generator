package org.openapijsonschematools.client.schemas.validation

import java.math.BigDecimal
import java.util.regex.Pattern

data class JsonSchemaInfo(
    val type: Set<Class<*>>? = null,
    val format: String? = null,
    val items: Class<out JsonSchema<*>>? = null,
    val properties: Map<String, Class<out JsonSchema<*>>>? = null,
    val required: Set<String>? = null,
    val exclusiveMaximum: Number? = null,
    val exclusiveMinimum: Number? = null,
    val maxItems: Int? = null,
    val minItems: Int? = null,
    val maxLength: Int? = null,
    val minLength: Int? = null,
    val maxProperties: Int? = null,
    val minProperties: Int? = null,
    val maximum: Number? = null,
    val minimum: Number? = null,
    val multipleOf: BigDecimal? = null,
    val additionalProperties: Class<out JsonSchema<*>>? = null,
    val allOf: List<Class<out JsonSchema<*>>>? = null,
    val anyOf: List<Class<out JsonSchema<*>>>? = null,
    val oneOf: List<Class<out JsonSchema<*>>>? = null,
    val not: Class<out JsonSchema<*>>? = null,
    val uniqueItems: Boolean? = null,
    val enumValues: Set<Any>? = null,
    val pattern: Pattern? = null,
    val defaultValue: JsonValue.JsonValueBoxed? = null,
    val constValue: JsonValue.JsonValueBoxed? = null,
    val contains: Class<out JsonSchema<*>>? = null,
    val maxContains: Int? = null,
    val minContains: Int? = null,
    val propertyNames: Class<out JsonSchema<*>>? = null,
    val dependentRequired: Map<String, Set<String>>? = null,
    val dependentSchemas: Map<String, Class<out JsonSchema<*>>>? = null,
    val patternProperties: Map<Pattern, Class<out JsonSchema<*>>>? = null,
    val prefixItems: List<Class<out JsonSchema<*>>>? = null,
    val ifSchema: Class<out JsonSchema<*>>? = null,
    val then: Class<out JsonSchema<*>>? = null,
    val elseSchema: Class<out JsonSchema<*>>? = null,
    val unevaluatedItems: Class<out JsonSchema<*>>? = null,
    val unevaluatedProperties: Class<out JsonSchema<*>>? = null){
}