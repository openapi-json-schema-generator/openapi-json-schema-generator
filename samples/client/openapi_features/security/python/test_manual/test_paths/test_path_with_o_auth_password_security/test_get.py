# coding: utf-8

"""


    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

import unittest
from unittest.mock import MagicMock, patch

import urllib3

import this_package
from this_package.paths.path_with_o_auth_password_security.get import operation as get  # noqa: E501
from this_package import schemas, api_client, security_schemes
from this_package.configurations import api_configuration, schema_configuration
from this_package.components.security_schemes import security_scheme_oauth_password

from .. import ApiTestMixin


class TestGet(ApiTestMixin, unittest.TestCase):
    """
    Get unit test stubs
        path with two explicit security  # noqa: E501
    """
    # security_scheme_info for security_index 0
    security_scheme_info: api_configuration.SecuritySchemeInfo = {
        "oauth_password_test": security_scheme_oauth_password.OauthPassword(
            flows = security_scheme_oauth_password.OAuthFlows(
                password = security_scheme_oauth_password.PasswordOauthFlow(
                    username = 'someUsername',
                    password = 'somePassword'
                )
            )
        ),
    }

    # oauth_server_client_info for oauth security schema
    oauth_server_client_info = security_schemes.OauthServerClientInfo = {
        "localhost:3000": security_schemes.OauthClientInfo(
            client_id="client_id",
            client_secret="client",
        ),
    }

    used_configuration = api_configuration.ApiConfiguration(
        security_scheme_info=security_scheme_info,
        oauth_server_client_info=oauth_server_client_info,
    )

    schema_config = schema_configuration.SchemaConfiguration()
    used_api_client = api_client.ApiClient(configuration=used_configuration, schema_configuration=schema_config)
    api = get.ApiForGet(api_client=used_api_client)  # noqa: E501

    @patch.object(urllib3.PoolManager, 'request')
    def test_endpoint_call_contains_security_oauth_password(self, mock_request):
        access_token = 'example_token'
        mock_request.return_value = self.response(b'')

        api = get.ApiForGet(api_client=self.used_api_client)
        api_response = api.get()

        # I need a first call for the /api/oauth/token endpoint to provide the access token
        self.assert_pool_manager_request_called_with(
            mock_request,
            f'http://localhost:3000/api/oauth/token',
            method='POST',
            additional_headers={f'{access_token}': 'someAccessToken', 'token_type': 'Bearer'}
        )

        # I need a second call for the /pathWithOAuthPasswordSecurity endpoint to perform the actual request
        # it should contain the access token
        self.assert_pool_manager_request_called_with(
            mock_request,
            f'http://localhost:3000/pathWithOAuthPasswordSecurity',
            method='GET',
            additional_headers={'Authorization': f'Bearer {access_token}'}
        )


        assert isinstance(api_response.response, urllib3.HTTPResponse)
        assert isinstance(api_response.body, schemas.Unset)
        assert isinstance(api_response.headers, schemas.Unset)
        assert api_response.response.status == 200



if __name__ == '__main__':
    unittest.main()
