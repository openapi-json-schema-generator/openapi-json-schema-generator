openapi: 3.1.0
servers:
- url: https://someserver.com/v1
info:
  title: openapi 3.1.0 sample spec
  version: 0.0.1
  description: sample spec for testing openapi functionality, built from json schema
    tests for draft2020-12
tags:
- name: operation.requestBody
- name: path.post
- name: contentType_json
- name: response.content.contentType.schema
- name: additionalProperties
- name: allOf
- name: anyOf
- name: enum
- name: format
- name: items
- name: maximum
- name: maxItems
- name: maxLength
- name: maxProperties
- name: oneOf
paths:
  /requestBody/postAdditionalpropertiesWithSchemaRequestBody:
    post:
      operationId: postAdditionalpropertiesWithSchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalpropertiesWithSchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesWithSchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - additionalProperties
  /responseBody/postAdditionalpropertiesWithSchemaResponseBodyForContentTypes:
    post:
      operationId: postAdditionalpropertiesWithSchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalpropertiesWithSchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesWithSchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - additionalProperties
  /requestBody/postAdditionalpropertiesCanExistByItselfRequestBody:
    post:
      operationId: postAdditionalpropertiesCanExistByItselfRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalpropertiesCanExistByItself'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesCanExistByItself'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - additionalProperties
  /responseBody/postAdditionalpropertiesCanExistByItselfResponseBodyForContentTypes:
    post:
      operationId: postAdditionalpropertiesCanExistByItselfResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalpropertiesCanExistByItself'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesCanExistByItself'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - additionalProperties
  /requestBody/postAdditionalpropertiesAreAllowedByDefaultRequestBody:
    post:
      operationId: postAdditionalpropertiesAreAllowedByDefaultRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalpropertiesAreAllowedByDefault'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesAreAllowedByDefault'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - additionalProperties
  /responseBody/postAdditionalpropertiesAreAllowedByDefaultResponseBodyForContentTypes:
    post:
      operationId: postAdditionalpropertiesAreAllowedByDefaultResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalpropertiesAreAllowedByDefault'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesAreAllowedByDefault'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - additionalProperties
  /requestBody/postAdditionalpropertiesDoesNotLookInApplicatorsRequestBody:
    post:
      operationId: postAdditionalpropertiesDoesNotLookInApplicatorsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalpropertiesDoesNotLookInApplicators'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesDoesNotLookInApplicators'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - additionalProperties
  /responseBody/postAdditionalpropertiesDoesNotLookInApplicatorsResponseBodyForContentTypes:
    post:
      operationId: postAdditionalpropertiesDoesNotLookInApplicatorsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalpropertiesDoesNotLookInApplicators'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesDoesNotLookInApplicators'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - additionalProperties
  /requestBody/postAdditionalpropertiesWithNullValuedInstancePropertiesRequestBody:
    post:
      operationId: postAdditionalpropertiesWithNullValuedInstancePropertiesRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalpropertiesWithNullValuedInstanceProperties'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesWithNullValuedInstanceProperties'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - additionalProperties
  /responseBody/postAdditionalpropertiesWithNullValuedInstancePropertiesResponseBodyForContentTypes:
    post:
      operationId: postAdditionalpropertiesWithNullValuedInstancePropertiesResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalpropertiesWithNullValuedInstanceProperties'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesWithNullValuedInstanceProperties'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - additionalProperties
  /requestBody/postAllofRequestBody:
    post:
      operationId: postAllofRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Allof'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/Allof'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofResponseBodyForContentTypes:
    post:
      operationId: postAllofResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Allof'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/Allof'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAllofWithBaseSchemaRequestBody:
    post:
      operationId: postAllofWithBaseSchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllofWithBaseSchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AllofWithBaseSchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofWithBaseSchemaResponseBodyForContentTypes:
    post:
      operationId: postAllofWithBaseSchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllofWithBaseSchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AllofWithBaseSchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAllofSimpleTypesRequestBody:
    post:
      operationId: postAllofSimpleTypesRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllofSimpleTypes'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AllofSimpleTypes'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofSimpleTypesResponseBodyForContentTypes:
    post:
      operationId: postAllofSimpleTypesResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllofSimpleTypes'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AllofSimpleTypes'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAllofWithOneEmptySchemaRequestBody:
    post:
      operationId: postAllofWithOneEmptySchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllofWithOneEmptySchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AllofWithOneEmptySchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofWithOneEmptySchemaResponseBodyForContentTypes:
    post:
      operationId: postAllofWithOneEmptySchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllofWithOneEmptySchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AllofWithOneEmptySchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAllofWithTwoEmptySchemasRequestBody:
    post:
      operationId: postAllofWithTwoEmptySchemasRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllofWithTwoEmptySchemas'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AllofWithTwoEmptySchemas'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofWithTwoEmptySchemasResponseBodyForContentTypes:
    post:
      operationId: postAllofWithTwoEmptySchemasResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllofWithTwoEmptySchemas'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AllofWithTwoEmptySchemas'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAllofWithTheFirstEmptySchemaRequestBody:
    post:
      operationId: postAllofWithTheFirstEmptySchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllofWithTheFirstEmptySchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AllofWithTheFirstEmptySchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofWithTheFirstEmptySchemaResponseBodyForContentTypes:
    post:
      operationId: postAllofWithTheFirstEmptySchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllofWithTheFirstEmptySchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AllofWithTheFirstEmptySchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAllofWithTheLastEmptySchemaRequestBody:
    post:
      operationId: postAllofWithTheLastEmptySchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllofWithTheLastEmptySchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AllofWithTheLastEmptySchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofWithTheLastEmptySchemaResponseBodyForContentTypes:
    post:
      operationId: postAllofWithTheLastEmptySchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllofWithTheLastEmptySchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AllofWithTheLastEmptySchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postNestedAllofToCheckValidationSemanticsRequestBody:
    post:
      operationId: postNestedAllofToCheckValidationSemanticsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NestedAllofToCheckValidationSemantics'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/NestedAllofToCheckValidationSemantics'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postNestedAllofToCheckValidationSemanticsResponseBodyForContentTypes:
    post:
      operationId: postNestedAllofToCheckValidationSemanticsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedAllofToCheckValidationSemantics'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/NestedAllofToCheckValidationSemantics'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAllofCombinedWithAnyofOneofRequestBody:
    post:
      operationId: postAllofCombinedWithAnyofOneofRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllofCombinedWithAnyofOneof'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AllofCombinedWithAnyofOneof'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofCombinedWithAnyofOneofResponseBodyForContentTypes:
    post:
      operationId: postAllofCombinedWithAnyofOneofResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllofCombinedWithAnyofOneof'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AllofCombinedWithAnyofOneof'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAnyofRequestBody:
    post:
      operationId: postAnyofRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Anyof'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/Anyof'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - anyOf
  /responseBody/postAnyofResponseBodyForContentTypes:
    post:
      operationId: postAnyofResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Anyof'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/Anyof'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - anyOf
  /requestBody/postAnyofWithBaseSchemaRequestBody:
    post:
      operationId: postAnyofWithBaseSchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyofWithBaseSchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AnyofWithBaseSchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - anyOf
  /responseBody/postAnyofWithBaseSchemaResponseBodyForContentTypes:
    post:
      operationId: postAnyofWithBaseSchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyofWithBaseSchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AnyofWithBaseSchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - anyOf
  /requestBody/postAnyofComplexTypesRequestBody:
    post:
      operationId: postAnyofComplexTypesRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyofComplexTypes'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AnyofComplexTypes'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - anyOf
  /responseBody/postAnyofComplexTypesResponseBodyForContentTypes:
    post:
      operationId: postAnyofComplexTypesResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyofComplexTypes'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AnyofComplexTypes'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - anyOf
  /requestBody/postAnyofWithOneEmptySchemaRequestBody:
    post:
      operationId: postAnyofWithOneEmptySchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyofWithOneEmptySchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AnyofWithOneEmptySchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - anyOf
  /responseBody/postAnyofWithOneEmptySchemaResponseBodyForContentTypes:
    post:
      operationId: postAnyofWithOneEmptySchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyofWithOneEmptySchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AnyofWithOneEmptySchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - anyOf
  /requestBody/postNestedAnyofToCheckValidationSemanticsRequestBody:
    post:
      operationId: postNestedAnyofToCheckValidationSemanticsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NestedAnyofToCheckValidationSemantics'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/NestedAnyofToCheckValidationSemantics'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - anyOf
  /responseBody/postNestedAnyofToCheckValidationSemanticsResponseBodyForContentTypes:
    post:
      operationId: postNestedAnyofToCheckValidationSemanticsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedAnyofToCheckValidationSemantics'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/NestedAnyofToCheckValidationSemantics'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - anyOf
  /requestBody/postSimpleEnumValidationRequestBody:
    post:
      operationId: postSimpleEnumValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleEnumValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/SimpleEnumValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postSimpleEnumValidationResponseBodyForContentTypes:
    post:
      operationId: postSimpleEnumValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleEnumValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/SimpleEnumValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postEnumsInPropertiesRequestBody:
    post:
      operationId: postEnumsInPropertiesRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumsInProperties'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/EnumsInProperties'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postEnumsInPropertiesResponseBodyForContentTypes:
    post:
      operationId: postEnumsInPropertiesResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumsInProperties'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/EnumsInProperties'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postEnumWithEscapedCharactersRequestBody:
    post:
      operationId: postEnumWithEscapedCharactersRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumWithEscapedCharacters'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/EnumWithEscapedCharacters'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postEnumWithEscapedCharactersResponseBodyForContentTypes:
    post:
      operationId: postEnumWithEscapedCharactersResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumWithEscapedCharacters'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/EnumWithEscapedCharacters'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postEnumWithFalseDoesNotMatch0RequestBody:
    post:
      operationId: postEnumWithFalseDoesNotMatch0RequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumWithFalseDoesNotMatch0'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/EnumWithFalseDoesNotMatch0'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postEnumWithFalseDoesNotMatch0ResponseBodyForContentTypes:
    post:
      operationId: postEnumWithFalseDoesNotMatch0ResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumWithFalseDoesNotMatch0'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/EnumWithFalseDoesNotMatch0'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postEnumWithTrueDoesNotMatch1RequestBody:
    post:
      operationId: postEnumWithTrueDoesNotMatch1RequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumWithTrueDoesNotMatch1'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/EnumWithTrueDoesNotMatch1'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postEnumWithTrueDoesNotMatch1ResponseBodyForContentTypes:
    post:
      operationId: postEnumWithTrueDoesNotMatch1ResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumWithTrueDoesNotMatch1'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/EnumWithTrueDoesNotMatch1'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postEnumWith0DoesNotMatchFalseRequestBody:
    post:
      operationId: postEnumWith0DoesNotMatchFalseRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumWith0DoesNotMatchFalse'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/EnumWith0DoesNotMatchFalse'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postEnumWith0DoesNotMatchFalseResponseBodyForContentTypes:
    post:
      operationId: postEnumWith0DoesNotMatchFalseResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumWith0DoesNotMatchFalse'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/EnumWith0DoesNotMatchFalse'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postEnumWith1DoesNotMatchTrueRequestBody:
    post:
      operationId: postEnumWith1DoesNotMatchTrueRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumWith1DoesNotMatchTrue'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/EnumWith1DoesNotMatchTrue'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postEnumWith1DoesNotMatchTrueResponseBodyForContentTypes:
    post:
      operationId: postEnumWith1DoesNotMatchTrueResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumWith1DoesNotMatchTrue'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/EnumWith1DoesNotMatchTrue'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postNulCharactersInStringsRequestBody:
    post:
      operationId: postNulCharactersInStringsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NulCharactersInStrings'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/NulCharactersInStrings'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postNulCharactersInStringsResponseBodyForContentTypes:
    post:
      operationId: postNulCharactersInStringsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NulCharactersInStrings'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/NulCharactersInStrings'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postEmailFormatRequestBody:
    post:
      operationId: postEmailFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/EmailFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postEmailFormatResponseBodyForContentTypes:
    post:
      operationId: postEmailFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/EmailFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postIdnEmailFormatRequestBody:
    post:
      operationId: postIdnEmailFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdnEmailFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/IdnEmailFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postIdnEmailFormatResponseBodyForContentTypes:
    post:
      operationId: postIdnEmailFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdnEmailFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/IdnEmailFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postRegexFormatRequestBody:
    post:
      operationId: postRegexFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegexFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RegexFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postRegexFormatResponseBodyForContentTypes:
    post:
      operationId: postRegexFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegexFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RegexFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postIpv4FormatRequestBody:
    post:
      operationId: postIpv4FormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ipv4Format'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/Ipv4Format'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postIpv4FormatResponseBodyForContentTypes:
    post:
      operationId: postIpv4FormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ipv4Format'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/Ipv4Format'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postIpv6FormatRequestBody:
    post:
      operationId: postIpv6FormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ipv6Format'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/Ipv6Format'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postIpv6FormatResponseBodyForContentTypes:
    post:
      operationId: postIpv6FormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ipv6Format'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/Ipv6Format'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postIdnHostnameFormatRequestBody:
    post:
      operationId: postIdnHostnameFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdnHostnameFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/IdnHostnameFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postIdnHostnameFormatResponseBodyForContentTypes:
    post:
      operationId: postIdnHostnameFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdnHostnameFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/IdnHostnameFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postHostnameFormatRequestBody:
    post:
      operationId: postHostnameFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostnameFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/HostnameFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postHostnameFormatResponseBodyForContentTypes:
    post:
      operationId: postHostnameFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostnameFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/HostnameFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postDateFormatRequestBody:
    post:
      operationId: postDateFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DateFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/DateFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postDateFormatResponseBodyForContentTypes:
    post:
      operationId: postDateFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DateFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/DateFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postDateTimeFormatRequestBody:
    post:
      operationId: postDateTimeFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DateTimeFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/DateTimeFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postDateTimeFormatResponseBodyForContentTypes:
    post:
      operationId: postDateTimeFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DateTimeFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/DateTimeFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postTimeFormatRequestBody:
    post:
      operationId: postTimeFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/TimeFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postTimeFormatResponseBodyForContentTypes:
    post:
      operationId: postTimeFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/TimeFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postJsonPointerFormatRequestBody:
    post:
      operationId: postJsonPointerFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonPointerFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/JsonPointerFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postJsonPointerFormatResponseBodyForContentTypes:
    post:
      operationId: postJsonPointerFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonPointerFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/JsonPointerFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postRelativeJsonPointerFormatRequestBody:
    post:
      operationId: postRelativeJsonPointerFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelativeJsonPointerFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RelativeJsonPointerFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postRelativeJsonPointerFormatResponseBodyForContentTypes:
    post:
      operationId: postRelativeJsonPointerFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelativeJsonPointerFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RelativeJsonPointerFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postIriFormatRequestBody:
    post:
      operationId: postIriFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IriFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/IriFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postIriFormatResponseBodyForContentTypes:
    post:
      operationId: postIriFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IriFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/IriFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postIriReferenceFormatRequestBody:
    post:
      operationId: postIriReferenceFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IriReferenceFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/IriReferenceFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postIriReferenceFormatResponseBodyForContentTypes:
    post:
      operationId: postIriReferenceFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IriReferenceFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/IriReferenceFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postUriFormatRequestBody:
    post:
      operationId: postUriFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UriFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UriFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postUriFormatResponseBodyForContentTypes:
    post:
      operationId: postUriFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UriFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UriFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postUriReferenceFormatRequestBody:
    post:
      operationId: postUriReferenceFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UriReferenceFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UriReferenceFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postUriReferenceFormatResponseBodyForContentTypes:
    post:
      operationId: postUriReferenceFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UriReferenceFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UriReferenceFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postUriTemplateFormatRequestBody:
    post:
      operationId: postUriTemplateFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UriTemplateFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UriTemplateFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postUriTemplateFormatResponseBodyForContentTypes:
    post:
      operationId: postUriTemplateFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UriTemplateFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UriTemplateFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postUuidFormatRequestBody:
    post:
      operationId: postUuidFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UuidFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UuidFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postUuidFormatResponseBodyForContentTypes:
    post:
      operationId: postUuidFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UuidFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postDurationFormatRequestBody:
    post:
      operationId: postDurationFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DurationFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/DurationFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postDurationFormatResponseBodyForContentTypes:
    post:
      operationId: postDurationFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DurationFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/DurationFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postNestedItemsRequestBody:
    post:
      operationId: postNestedItemsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NestedItems'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/NestedItems'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - items
  /responseBody/postNestedItemsResponseBodyForContentTypes:
    post:
      operationId: postNestedItemsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedItems'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/NestedItems'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - items
  /requestBody/postItemsDoesNotLookInApplicatorsValidCaseRequestBody:
    post:
      operationId: postItemsDoesNotLookInApplicatorsValidCaseRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemsDoesNotLookInApplicatorsValidCase'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/ItemsDoesNotLookInApplicatorsValidCase'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - items
  /responseBody/postItemsDoesNotLookInApplicatorsValidCaseResponseBodyForContentTypes:
    post:
      operationId: postItemsDoesNotLookInApplicatorsValidCaseResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsDoesNotLookInApplicatorsValidCase'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/ItemsDoesNotLookInApplicatorsValidCase'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - items
  /requestBody/postPrefixitemsValidationAdjustsTheStartingIndexForItemsRequestBody:
    post:
      operationId: postPrefixitemsValidationAdjustsTheStartingIndexForItemsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrefixitemsValidationAdjustsTheStartingIndexForItems'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/PrefixitemsValidationAdjustsTheStartingIndexForItems'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - items
  /responseBody/postPrefixitemsValidationAdjustsTheStartingIndexForItemsResponseBodyForContentTypes:
    post:
      operationId: postPrefixitemsValidationAdjustsTheStartingIndexForItemsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrefixitemsValidationAdjustsTheStartingIndexForItems'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/PrefixitemsValidationAdjustsTheStartingIndexForItems'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - items
  /requestBody/postItemsWithNullInstanceElementsRequestBody:
    post:
      operationId: postItemsWithNullInstanceElementsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemsWithNullInstanceElements'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/ItemsWithNullInstanceElements'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - items
  /responseBody/postItemsWithNullInstanceElementsResponseBodyForContentTypes:
    post:
      operationId: postItemsWithNullInstanceElementsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsWithNullInstanceElements'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/ItemsWithNullInstanceElements'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - items
  /requestBody/postMaximumValidationRequestBody:
    post:
      operationId: postMaximumValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaximumValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaximumValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maximum
  /responseBody/postMaximumValidationResponseBodyForContentTypes:
    post:
      operationId: postMaximumValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaximumValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maximum
  /requestBody/postMaximumValidationWithUnsignedIntegerRequestBody:
    post:
      operationId: postMaximumValidationWithUnsignedIntegerRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaximumValidationWithUnsignedInteger'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaximumValidationWithUnsignedInteger'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maximum
  /responseBody/postMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes:
    post:
      operationId: postMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumValidationWithUnsignedInteger'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaximumValidationWithUnsignedInteger'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maximum
  /requestBody/postMaxitemsValidationRequestBody:
    post:
      operationId: postMaxitemsValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxitemsValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaxitemsValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maxItems
  /responseBody/postMaxitemsValidationResponseBodyForContentTypes:
    post:
      operationId: postMaxitemsValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxitemsValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaxitemsValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maxItems
  /requestBody/postMaxitemsValidationWithADecimalRequestBody:
    post:
      operationId: postMaxitemsValidationWithADecimalRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxitemsValidationWithADecimal'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaxitemsValidationWithADecimal'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maxItems
  /responseBody/postMaxitemsValidationWithADecimalResponseBodyForContentTypes:
    post:
      operationId: postMaxitemsValidationWithADecimalResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxitemsValidationWithADecimal'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaxitemsValidationWithADecimal'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maxItems
  /requestBody/postMaxlengthValidationRequestBody:
    post:
      operationId: postMaxlengthValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxlengthValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaxlengthValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maxLength
  /responseBody/postMaxlengthValidationResponseBodyForContentTypes:
    post:
      operationId: postMaxlengthValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxlengthValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaxlengthValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maxLength
  /requestBody/postMaxlengthValidationWithADecimalRequestBody:
    post:
      operationId: postMaxlengthValidationWithADecimalRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxlengthValidationWithADecimal'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaxlengthValidationWithADecimal'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maxLength
  /responseBody/postMaxlengthValidationWithADecimalResponseBodyForContentTypes:
    post:
      operationId: postMaxlengthValidationWithADecimalResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxlengthValidationWithADecimal'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaxlengthValidationWithADecimal'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maxLength
  /requestBody/postMaxpropertiesValidationRequestBody:
    post:
      operationId: postMaxpropertiesValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxpropertiesValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaxpropertiesValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maxProperties
  /responseBody/postMaxpropertiesValidationResponseBodyForContentTypes:
    post:
      operationId: postMaxpropertiesValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxpropertiesValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaxpropertiesValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maxProperties
  /requestBody/postMaxpropertiesValidationWithADecimalRequestBody:
    post:
      operationId: postMaxpropertiesValidationWithADecimalRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxpropertiesValidationWithADecimal'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaxpropertiesValidationWithADecimal'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maxProperties
  /responseBody/postMaxpropertiesValidationWithADecimalResponseBodyForContentTypes:
    post:
      operationId: postMaxpropertiesValidationWithADecimalResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxpropertiesValidationWithADecimal'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaxpropertiesValidationWithADecimal'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maxProperties
  /requestBody/postMaxproperties0MeansTheObjectIsEmptyRequestBody:
    post:
      operationId: postMaxproperties0MeansTheObjectIsEmptyRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Maxproperties0MeansTheObjectIsEmpty'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/Maxproperties0MeansTheObjectIsEmpty'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maxProperties
  /responseBody/postMaxproperties0MeansTheObjectIsEmptyResponseBodyForContentTypes:
    post:
      operationId: postMaxproperties0MeansTheObjectIsEmptyResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Maxproperties0MeansTheObjectIsEmpty'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/Maxproperties0MeansTheObjectIsEmpty'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maxProperties
  /requestBody/postOneofRequestBody:
    post:
      operationId: postOneofRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Oneof'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/Oneof'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - oneOf
  /responseBody/postOneofResponseBodyForContentTypes:
    post:
      operationId: postOneofResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oneof'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/Oneof'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - oneOf
  /requestBody/postOneofWithBaseSchemaRequestBody:
    post:
      operationId: postOneofWithBaseSchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneofWithBaseSchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/OneofWithBaseSchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - oneOf
  /responseBody/postOneofWithBaseSchemaResponseBodyForContentTypes:
    post:
      operationId: postOneofWithBaseSchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneofWithBaseSchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/OneofWithBaseSchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - oneOf
  /requestBody/postOneofComplexTypesRequestBody:
    post:
      operationId: postOneofComplexTypesRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneofComplexTypes'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/OneofComplexTypes'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - oneOf
  /responseBody/postOneofComplexTypesResponseBodyForContentTypes:
    post:
      operationId: postOneofComplexTypesResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneofComplexTypes'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/OneofComplexTypes'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - oneOf
  /requestBody/postOneofWithEmptySchemaRequestBody:
    post:
      operationId: postOneofWithEmptySchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneofWithEmptySchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/OneofWithEmptySchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - oneOf
  /responseBody/postOneofWithEmptySchemaResponseBodyForContentTypes:
    post:
      operationId: postOneofWithEmptySchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneofWithEmptySchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/OneofWithEmptySchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - oneOf
  /requestBody/postOneofWithRequiredRequestBody:
    post:
      operationId: postOneofWithRequiredRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneofWithRequired'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/OneofWithRequired'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - oneOf
  /responseBody/postOneofWithRequiredResponseBodyForContentTypes:
    post:
      operationId: postOneofWithRequiredResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneofWithRequired'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/OneofWithRequired'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - oneOf
  /requestBody/postNestedOneofToCheckValidationSemanticsRequestBody:
    post:
      operationId: postNestedOneofToCheckValidationSemanticsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NestedOneofToCheckValidationSemantics'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/NestedOneofToCheckValidationSemantics'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - oneOf
  /responseBody/postNestedOneofToCheckValidationSemanticsResponseBodyForContentTypes:
    post:
      operationId: postNestedOneofToCheckValidationSemanticsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedOneofToCheckValidationSemantics'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/NestedOneofToCheckValidationSemantics'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - oneOf
components:
  schemas:
    AdditionalpropertiesWithSchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        foo: {}
        bar: {}
      additionalProperties:
        type: boolean
    AdditionalpropertiesCanExistByItself:
      $schema: https://json-schema.org/draft/2020-12/schema
      additionalProperties:
        type: boolean
    AdditionalpropertiesAreAllowedByDefault:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        foo: {}
        bar: {}
    AdditionalpropertiesDoesNotLookInApplicators:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - properties:
          foo: {}
      additionalProperties:
        type: boolean
    AdditionalpropertiesWithNullValuedInstanceProperties:
      $schema: https://json-schema.org/draft/2020-12/schema
      additionalProperties:
        type: 'null'
    Allof:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - properties:
          bar:
            type: integer
        required:
        - bar
      - properties:
          foo:
            type: string
        required:
        - foo
    AllofWithBaseSchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        bar:
          type: integer
      required:
      - bar
      allOf:
      - properties:
          foo:
            type: string
        required:
        - foo
      - properties:
          baz:
            type: 'null'
        required:
        - baz
    AllofSimpleTypes:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - maximum: 30
      - minimum: 20
    AllofWithOneEmptySchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - {}
    AllofWithTwoEmptySchemas:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - {}
      - {}
    AllofWithTheFirstEmptySchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - {}
      - type: number
    AllofWithTheLastEmptySchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - type: number
      - {}
    NestedAllofToCheckValidationSemantics:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - allOf:
        - type: 'null'
    AllofCombinedWithAnyofOneof:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - multipleOf: 2
      anyOf:
      - multipleOf: 3
      oneOf:
      - multipleOf: 5
    Anyof:
      $schema: https://json-schema.org/draft/2020-12/schema
      anyOf:
      - type: integer
      - minimum: 2
    AnyofWithBaseSchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      anyOf:
      - maxLength: 2
      - minLength: 4
    AnyofComplexTypes:
      $schema: https://json-schema.org/draft/2020-12/schema
      anyOf:
      - properties:
          bar:
            type: integer
        required:
        - bar
      - properties:
          foo:
            type: string
        required:
        - foo
    AnyofWithOneEmptySchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      anyOf:
      - type: number
      - {}
    NestedAnyofToCheckValidationSemantics:
      $schema: https://json-schema.org/draft/2020-12/schema
      anyOf:
      - anyOf:
        - type: 'null'
    SimpleEnumValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      enum:
      - 1
      - 2
      - 3
    EnumsInProperties:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: object
      properties:
        foo:
          enum:
          - foo
        bar:
          enum:
          - bar
      required:
      - bar
    EnumWithEscapedCharacters:
      $schema: https://json-schema.org/draft/2020-12/schema
      enum:
      - 'foo

        bar'
      - "foo\rbar"
    EnumWithFalseDoesNotMatch0:
      $schema: https://json-schema.org/draft/2020-12/schema
      enum:
      - false
    EnumWithTrueDoesNotMatch1:
      $schema: https://json-schema.org/draft/2020-12/schema
      enum:
      - true
    EnumWith0DoesNotMatchFalse:
      $schema: https://json-schema.org/draft/2020-12/schema
      enum:
      - 0
    EnumWith1DoesNotMatchTrue:
      $schema: https://json-schema.org/draft/2020-12/schema
      enum:
      - 1
    NulCharactersInStrings:
      $schema: https://json-schema.org/draft/2020-12/schema
      enum:
      - "hello\0there"
    EmailFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: email
    IdnEmailFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: idn-email
    RegexFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: regex
    Ipv4Format:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: ipv4
    Ipv6Format:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: ipv6
    IdnHostnameFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: idn-hostname
    HostnameFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: hostname
    DateFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: date
    DateTimeFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: date-time
    TimeFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: time
    JsonPointerFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: json-pointer
    RelativeJsonPointerFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: relative-json-pointer
    IriFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: iri
    IriReferenceFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: iri-reference
    UriFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: uri
    UriReferenceFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: uri-reference
    UriTemplateFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: uri-template
    UuidFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: uuid
    DurationFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: duration
    NestedItems:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: array
      items:
        type: array
        items:
          type: array
          items:
            type: array
            items:
              type: number
    ItemsDoesNotLookInApplicatorsValidCase:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - prefixItems:
        - minimum: 3
      items:
        minimum: 5
    PrefixitemsValidationAdjustsTheStartingIndexForItems:
      $schema: https://json-schema.org/draft/2020-12/schema
      prefixItems:
      - type: string
      items:
        type: integer
    ItemsWithNullInstanceElements:
      $schema: https://json-schema.org/draft/2020-12/schema
      items:
        type: 'null'
    MaximumValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      maximum: 3.0
    MaximumValidationWithUnsignedInteger:
      $schema: https://json-schema.org/draft/2020-12/schema
      maximum: 300
    MaxitemsValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      maxItems: 2
    MaxitemsValidationWithADecimal:
      $schema: https://json-schema.org/draft/2020-12/schema
      maxItems: 2.0
    MaxlengthValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      maxLength: 2
    MaxlengthValidationWithADecimal:
      $schema: https://json-schema.org/draft/2020-12/schema
      maxLength: 2.0
    MaxpropertiesValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      maxProperties: 2
    MaxpropertiesValidationWithADecimal:
      $schema: https://json-schema.org/draft/2020-12/schema
      maxProperties: 2.0
    Maxproperties0MeansTheObjectIsEmpty:
      $schema: https://json-schema.org/draft/2020-12/schema
      maxProperties: 0
    Oneof:
      $schema: https://json-schema.org/draft/2020-12/schema
      oneOf:
      - type: integer
      - minimum: 2
    OneofWithBaseSchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      oneOf:
      - minLength: 2
      - maxLength: 4
    OneofComplexTypes:
      $schema: https://json-schema.org/draft/2020-12/schema
      oneOf:
      - properties:
          bar:
            type: integer
        required:
        - bar
      - properties:
          foo:
            type: string
        required:
        - foo
    OneofWithEmptySchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      oneOf:
      - type: number
      - {}
    OneofWithRequired:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: object
      oneOf:
      - required:
        - foo
        - bar
      - required:
        - foo
        - baz
    NestedOneofToCheckValidationSemantics:
      $schema: https://json-schema.org/draft/2020-12/schema
      oneOf:
      - oneOf:
        - type: 'null'
  x-schema-test-examples:
    AdditionalpropertiesWithSchema:
      NoAdditionalPropertiesIsValid:
        description: no additional properties is valid
        data:
          foo: 1
        valid: true
      AnAdditionalValidPropertyIsValid:
        description: an additional valid property is valid
        data:
          foo: 1
          bar: 2
          quux: true
        valid: true
      AnAdditionalInvalidPropertyIsInvalid:
        description: an additional invalid property is invalid
        data:
          foo: 1
          bar: 2
          quux: 12
        valid: false
    AdditionalpropertiesCanExistByItself:
      AnAdditionalValidPropertyIsValid:
        description: an additional valid property is valid
        data:
          foo: true
        valid: true
      AnAdditionalInvalidPropertyIsInvalid:
        description: an additional invalid property is invalid
        data:
          foo: 1
        valid: false
    AdditionalpropertiesAreAllowedByDefault:
      AdditionalPropertiesAreAllowed:
        description: additional properties are allowed
        data:
          foo: 1
          bar: 2
          quux: true
        valid: true
    AdditionalpropertiesDoesNotLookInApplicators:
      PropertiesDefinedInAllofAreNotExamined:
        description: properties defined in allOf are not examined
        data:
          foo: 1
          bar: true
        valid: false
    AdditionalpropertiesWithNullValuedInstanceProperties:
      AllowsNullValues:
        description: allows null values
        data:
          foo: null
        valid: true
    Allof:
      Allof:
        description: allOf
        data:
          foo: baz
          bar: 2
        valid: true
      MismatchSecond:
        description: mismatch second
        data:
          foo: baz
        valid: false
      MismatchFirst:
        description: mismatch first
        data:
          bar: 2
        valid: false
      WrongType:
        description: wrong type
        data:
          foo: baz
          bar: quux
        valid: false
    AllofWithBaseSchema:
      Valid:
        description: valid
        data:
          foo: quux
          bar: 2
          baz: null
        valid: true
      MismatchBaseSchema:
        description: mismatch base schema
        data:
          foo: quux
          baz: null
        valid: false
      MismatchFirstAllof:
        description: mismatch first allOf
        data:
          bar: 2
          baz: null
        valid: false
      MismatchSecondAllof:
        description: mismatch second allOf
        data:
          foo: quux
          bar: 2
        valid: false
      MismatchBoth:
        description: mismatch both
        data:
          bar: 2
        valid: false
    AllofSimpleTypes:
      Valid:
        description: valid
        data: 25
        valid: true
      MismatchOne:
        description: mismatch one
        data: 35
        valid: false
    AllofWithOneEmptySchema:
      AnyDataIsValid:
        description: any data is valid
        data: 1
        valid: true
    AllofWithTwoEmptySchemas:
      AnyDataIsValid:
        description: any data is valid
        data: 1
        valid: true
    AllofWithTheFirstEmptySchema:
      NumberIsValid:
        description: number is valid
        data: 1
        valid: true
      StringIsInvalid:
        description: string is invalid
        data: foo
        valid: false
    AllofWithTheLastEmptySchema:
      NumberIsValid:
        description: number is valid
        data: 1
        valid: true
      StringIsInvalid:
        description: string is invalid
        data: foo
        valid: false
    NestedAllofToCheckValidationSemantics:
      NullIsValid:
        description: null is valid
        data: null
        valid: true
      AnythingNonNullIsInvalid:
        description: anything non-null is invalid
        data: 123
        valid: false
    AllofCombinedWithAnyofOneof:
      AllofFalseAnyofFalseOneofFalse:
        description: 'allOf: false, anyOf: false, oneOf: false'
        data: 1
        valid: false
      AllofFalseAnyofFalseOneofTrue:
        description: 'allOf: false, anyOf: false, oneOf: true'
        data: 5
        valid: false
      AllofFalseAnyofTrueOneofFalse:
        description: 'allOf: false, anyOf: true, oneOf: false'
        data: 3
        valid: false
      AllofFalseAnyofTrueOneofTrue:
        description: 'allOf: false, anyOf: true, oneOf: true'
        data: 15
        valid: false
      AllofTrueAnyofFalseOneofFalse:
        description: 'allOf: true, anyOf: false, oneOf: false'
        data: 2
        valid: false
      AllofTrueAnyofFalseOneofTrue:
        description: 'allOf: true, anyOf: false, oneOf: true'
        data: 10
        valid: false
      AllofTrueAnyofTrueOneofFalse:
        description: 'allOf: true, anyOf: true, oneOf: false'
        data: 6
        valid: false
      AllofTrueAnyofTrueOneofTrue:
        description: 'allOf: true, anyOf: true, oneOf: true'
        data: 30
        valid: true
    Anyof:
      FirstAnyofValid:
        description: first anyOf valid
        data: 1
        valid: true
      SecondAnyofValid:
        description: second anyOf valid
        data: 2.5
        valid: true
      BothAnyofValid:
        description: both anyOf valid
        data: 3
        valid: true
      NeitherAnyofValid:
        description: neither anyOf valid
        data: 1.5
        valid: false
    AnyofWithBaseSchema:
      MismatchBaseSchema:
        description: mismatch base schema
        data: 3
        valid: false
      OneAnyofValid:
        description: one anyOf valid
        data: foobar
        valid: true
      BothAnyofInvalid:
        description: both anyOf invalid
        data: foo
        valid: false
    AnyofComplexTypes:
      FirstAnyofValidComplex:
        description: first anyOf valid (complex)
        data:
          bar: 2
        valid: true
      SecondAnyofValidComplex:
        description: second anyOf valid (complex)
        data:
          foo: baz
        valid: true
      BothAnyofValidComplex:
        description: both anyOf valid (complex)
        data:
          foo: baz
          bar: 2
        valid: true
      NeitherAnyofValidComplex:
        description: neither anyOf valid (complex)
        data:
          foo: 2
          bar: quux
        valid: false
    AnyofWithOneEmptySchema:
      StringIsValid:
        description: string is valid
        data: foo
        valid: true
      NumberIsValid:
        description: number is valid
        data: 123
        valid: true
    NestedAnyofToCheckValidationSemantics:
      NullIsValid:
        description: null is valid
        data: null
        valid: true
      AnythingNonNullIsInvalid:
        description: anything non-null is invalid
        data: 123
        valid: false
    SimpleEnumValidation:
      OneOfTheEnumIsValid:
        description: one of the enum is valid
        data: 1
        valid: true
      SomethingElseIsInvalid:
        description: something else is invalid
        data: 4
        valid: false
    EnumsInProperties:
      BothPropertiesAreValid:
        description: both properties are valid
        data:
          foo: foo
          bar: bar
        valid: true
      WrongFooValue:
        description: wrong foo value
        data:
          foo: foot
          bar: bar
        valid: false
      WrongBarValue:
        description: wrong bar value
        data:
          foo: foo
          bar: bart
        valid: false
      MissingOptionalPropertyIsValid:
        description: missing optional property is valid
        data:
          bar: bar
        valid: true
      MissingRequiredPropertyIsInvalid:
        description: missing required property is invalid
        data:
          foo: foo
        valid: false
      MissingAllPropertiesIsInvalid:
        description: missing all properties is invalid
        data: {}
        valid: false
    EnumWithEscapedCharacters:
      Member1IsValid:
        description: member 1 is valid
        data: 'foo

          bar'
        valid: true
      Member2IsValid:
        description: member 2 is valid
        data: "foo\rbar"
        valid: true
      AnotherStringIsInvalid:
        description: another string is invalid
        data: abc
        valid: false
    EnumWithFalseDoesNotMatch0:
      FalseIsValid:
        description: false is valid
        data: false
        valid: true
      IntegerZeroIsInvalid:
        description: integer zero is invalid
        data: 0
        valid: false
      FloatZeroIsInvalid:
        description: float zero is invalid
        data: 0.0
        valid: false
    EnumWithTrueDoesNotMatch1:
      TrueIsValid:
        description: true is valid
        data: true
        valid: true
      IntegerOneIsInvalid:
        description: integer one is invalid
        data: 1
        valid: false
      FloatOneIsInvalid:
        description: float one is invalid
        data: 1.0
        valid: false
    EnumWith0DoesNotMatchFalse:
      FalseIsInvalid:
        description: false is invalid
        data: false
        valid: false
      IntegerZeroIsValid:
        description: integer zero is valid
        data: 0
        valid: true
      FloatZeroIsValid:
        description: float zero is valid
        data: 0.0
        valid: true
    EnumWith1DoesNotMatchTrue:
      TrueIsInvalid:
        description: true is invalid
        data: true
        valid: false
      IntegerOneIsValid:
        description: integer one is valid
        data: 1
        valid: true
      FloatOneIsValid:
        description: float one is valid
        data: 1.0
        valid: true
    NulCharactersInStrings:
      MatchStringWithNul:
        description: match string with nul
        data: "hello\0there"
        valid: true
      DoNotMatchStringLackingNul:
        description: do not match string lacking nul
        data: hellothere
        valid: false
    EmailFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidEmailStringIsOnlyAnAnnotationByDefault:
        description: invalid email string is only an annotation by default
        data: '2962'
        valid: true
    IdnEmailFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidIdnEmailStringIsOnlyAnAnnotationByDefault:
        description: invalid idn-email string is only an annotation by default
        data: '2962'
        valid: true
    RegexFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidRegexStringIsOnlyAnAnnotationByDefault:
        description: invalid regex string is only an annotation by default
        data: ^(abc]
        valid: true
    Ipv4Format:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidIpv4StringIsOnlyAnAnnotationByDefault:
        description: invalid ipv4 string is only an annotation by default
        data: 127.0.0.0.1
        valid: true
    Ipv6Format:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidIpv6StringIsOnlyAnAnnotationByDefault:
        description: invalid ipv6 string is only an annotation by default
        data: '12345::'
        valid: true
    IdnHostnameFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidIdnHostnameStringIsOnlyAnAnnotationByDefault:
        description: invalid idn-hostname string is only an annotation by default
        data: "\u302E\uC2E4\uB840.\uD14C\uC2A4\uD2B8"
        valid: true
    HostnameFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidHostnameStringIsOnlyAnAnnotationByDefault:
        description: invalid hostname string is only an annotation by default
        data: -a-host-name-that-starts-with--
        valid: true
    DateFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidDateStringIsOnlyAnAnnotationByDefault:
        description: invalid date string is only an annotation by default
        data: 06/19/1963
        valid: true
    DateTimeFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidDateTimeStringIsOnlyAnAnnotationByDefault:
        description: invalid date-time string is only an annotation by default
        data: '1990-02-31T15:59:60.123-08:00'
        valid: true
    TimeFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidTimeStringIsOnlyAnAnnotationByDefault:
        description: invalid time string is only an annotation by default
        data: 08:30:06 PST
        valid: true
    JsonPointerFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidJsonPointerStringIsOnlyAnAnnotationByDefault:
        description: invalid json-pointer string is only an annotation by default
        data: /foo/bar~
        valid: true
    RelativeJsonPointerFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidRelativeJsonPointerStringIsOnlyAnAnnotationByDefault:
        description: invalid relative-json-pointer string is only an annotation by
          default
        data: /foo/bar
        valid: true
    IriFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidIriStringIsOnlyAnAnnotationByDefault:
        description: invalid iri string is only an annotation by default
        data: http://2001:0db8:85a3:0000:0000:8a2e:0370:7334
        valid: true
    IriReferenceFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidIriReferenceStringIsOnlyAnAnnotationByDefault:
        description: invalid iri-reference string is only an annotation by default
        data: "\\\\WINDOWS\\fil\xEB\xDF\xE5r\xE9"
        valid: true
    UriFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidUriStringIsOnlyAnAnnotationByDefault:
        description: invalid uri string is only an annotation by default
        data: //foo.bar/?baz=qux#quux
        valid: true
    UriReferenceFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidUriReferenceStringIsOnlyAnAnnotationByDefault:
        description: invalid uri-reference string is only an annotation by default
        data: \\WINDOWS\fileshare
        valid: true
    UriTemplateFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidUriTemplateStringIsOnlyAnAnnotationByDefault:
        description: invalid uri-template string is only an annotation by default
        data: http://example.com/dictionary/{term:1}/{term
        valid: true
    UuidFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidUuidStringIsOnlyAnAnnotationByDefault:
        description: invalid uuid string is only an annotation by default
        data: 2eb8aa08-aa98-11ea-b4aa-73b441d1638
        valid: true
    DurationFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
      InvalidDurationStringIsOnlyAnAnnotationByDefault:
        description: invalid duration string is only an annotation by default
        data: PT1D
        valid: true
    NestedItems:
      ValidNestedArray:
        description: valid nested array
        data:
        - - - - 1
          - - - 2
            - - 3
        - - - - 4
            - - 5
            - - 6
        valid: true
      NestedArrayWithInvalidType:
        description: nested array with invalid type
        data:
        - - - - '1'
          - - - 2
            - - 3
        - - - - 4
            - - 5
            - - 6
        valid: false
      NotDeepEnough:
        description: not deep enough
        data:
        - - - 1
          - - 2
          - - 3
        - - - 4
          - - 5
          - - 6
        valid: false
    ItemsDoesNotLookInApplicatorsValidCase:
      PrefixitemsInAllofDoesNotConstrainItemsInvalidCase:
        description: prefixItems in allOf does not constrain items, invalid case
        data:
        - 3
        - 5
        valid: false
      PrefixitemsInAllofDoesNotConstrainItemsValidCase:
        description: prefixItems in allOf does not constrain items, valid case
        data:
        - 5
        - 5
        valid: true
    PrefixitemsValidationAdjustsTheStartingIndexForItems:
      ValidItems:
        description: valid items
        data:
        - x
        - 2
        - 3
        valid: true
      WrongTypeOfSecondItem:
        description: wrong type of second item
        data:
        - x
        - y
        valid: false
    ItemsWithNullInstanceElements:
      AllowsNullElements:
        description: allows null elements
        data:
        - null
        valid: true
    MaximumValidation:
      BelowTheMaximumIsValid:
        description: below the maximum is valid
        data: 2.6
        valid: true
      BoundaryPointIsValid:
        description: boundary point is valid
        data: 3.0
        valid: true
      AboveTheMaximumIsInvalid:
        description: above the maximum is invalid
        data: 3.5
        valid: false
      IgnoresNonNumbers:
        description: ignores non-numbers
        data: x
        valid: true
    MaximumValidationWithUnsignedInteger:
      BelowTheMaximumIsInvalid:
        description: below the maximum is invalid
        data: 299.97
        valid: true
      BoundaryPointIntegerIsValid:
        description: boundary point integer is valid
        data: 300
        valid: true
      BoundaryPointFloatIsValid:
        description: boundary point float is valid
        data: 300.0
        valid: true
      AboveTheMaximumIsInvalid:
        description: above the maximum is invalid
        data: 300.5
        valid: false
    MaxitemsValidation:
      ShorterIsValid:
        description: shorter is valid
        data:
        - 1
        valid: true
      ExactLengthIsValid:
        description: exact length is valid
        data:
        - 1
        - 2
        valid: true
      TooLongIsInvalid:
        description: too long is invalid
        data:
        - 1
        - 2
        - 3
        valid: false
      IgnoresNonArrays:
        description: ignores non-arrays
        data: foobar
        valid: true
    MaxitemsValidationWithADecimal:
      ShorterIsValid:
        description: shorter is valid
        data:
        - 1
        valid: true
      TooLongIsInvalid:
        description: too long is invalid
        data:
        - 1
        - 2
        - 3
        valid: false
    MaxlengthValidation:
      ShorterIsValid:
        description: shorter is valid
        data: f
        valid: true
      ExactLengthIsValid:
        description: exact length is valid
        data: fo
        valid: true
      TooLongIsInvalid:
        description: too long is invalid
        data: foo
        valid: false
      IgnoresNonStrings:
        description: ignores non-strings
        data: 100
        valid: true
      TwoSupplementaryUnicodeCodePointsIsLongEnough:
        description: two supplementary Unicode code points is long enough
        data: "\U0001F4A9\U0001F4A9"
        valid: true
    MaxlengthValidationWithADecimal:
      ShorterIsValid:
        description: shorter is valid
        data: f
        valid: true
      TooLongIsInvalid:
        description: too long is invalid
        data: foo
        valid: false
    MaxpropertiesValidation:
      ShorterIsValid:
        description: shorter is valid
        data:
          foo: 1
        valid: true
      ExactLengthIsValid:
        description: exact length is valid
        data:
          foo: 1
          bar: 2
        valid: true
      TooLongIsInvalid:
        description: too long is invalid
        data:
          foo: 1
          bar: 2
          baz: 3
        valid: false
      IgnoresArrays:
        description: ignores arrays
        data:
        - 1
        - 2
        - 3
        valid: true
      IgnoresStrings:
        description: ignores strings
        data: foobar
        valid: true
      IgnoresOtherNonObjects:
        description: ignores other non-objects
        data: 12
        valid: true
    MaxpropertiesValidationWithADecimal:
      ShorterIsValid:
        description: shorter is valid
        data:
          foo: 1
        valid: true
      TooLongIsInvalid:
        description: too long is invalid
        data:
          foo: 1
          bar: 2
          baz: 3
        valid: false
    Maxproperties0MeansTheObjectIsEmpty:
      NoPropertiesIsValid:
        description: no properties is valid
        data: {}
        valid: true
      OnePropertyIsInvalid:
        description: one property is invalid
        data:
          foo: 1
        valid: false
    Oneof:
      FirstOneofValid:
        description: first oneOf valid
        data: 1
        valid: true
      SecondOneofValid:
        description: second oneOf valid
        data: 2.5
        valid: true
      BothOneofValid:
        description: both oneOf valid
        data: 3
        valid: false
      NeitherOneofValid:
        description: neither oneOf valid
        data: 1.5
        valid: false
    OneofWithBaseSchema:
      MismatchBaseSchema:
        description: mismatch base schema
        data: 3
        valid: false
      OneOneofValid:
        description: one oneOf valid
        data: foobar
        valid: true
      BothOneofValid:
        description: both oneOf valid
        data: foo
        valid: false
    OneofComplexTypes:
      FirstOneofValidComplex:
        description: first oneOf valid (complex)
        data:
          bar: 2
        valid: true
      SecondOneofValidComplex:
        description: second oneOf valid (complex)
        data:
          foo: baz
        valid: true
      BothOneofValidComplex:
        description: both oneOf valid (complex)
        data:
          foo: baz
          bar: 2
        valid: false
      NeitherOneofValidComplex:
        description: neither oneOf valid (complex)
        data:
          foo: 2
          bar: quux
        valid: false
    OneofWithEmptySchema:
      OneValidValid:
        description: one valid - valid
        data: foo
        valid: true
      BothValidInvalid:
        description: both valid - invalid
        data: 123
        valid: false
    OneofWithRequired:
      BothInvalidInvalid:
        description: both invalid - invalid
        data:
          bar: 2
        valid: false
      FirstValidValid:
        description: first valid - valid
        data:
          foo: 1
          bar: 2
        valid: true
      SecondValidValid:
        description: second valid - valid
        data:
          foo: 1
          baz: 3
        valid: true
      BothValidInvalid:
        description: both valid - invalid
        data:
          foo: 1
          bar: 2
          baz: 3
        valid: false
    NestedOneofToCheckValidationSemantics:
      NullIsValid:
        description: null is valid
        data: null
        valid: true
      AnythingNonNullIsInvalid:
        description: anything non-null is invalid
        data: 123
        valid: false
