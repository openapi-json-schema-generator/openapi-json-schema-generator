{{#if types}}
    {{#each types}}
        {{#eq this "null"}}
public static Void validate(Void arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}
        {{/eq}}
        {{#eq this "object"}}
            {{#if ../mapOutputJsonPathPiece}}
                {{#if mapValueSchema}}
public static {{../mapOutputJsonPathPiece.camelCase}} validate(Map<String, {{#with mapValueSchema}}{{> src/main/java/org/openapitools/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}> arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}
                {{else}}
public static {{../mapOutputJsonPathPiece.camelCase}} validate(Map<String, Object> arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}
                {{/if}}
            {{else}}
public static FrozenMap<String, Object> validate(Map<String, Object> arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}
            {{/if}}
        {{/eq}}
        {{#eq this "array"}}
            {{#if ../arrayOutputJsonPathPiece}}
public static {{../arrayOutputJsonPathPiece.camelCase}} validate(List<{{#with items}}{{> src/main/java/org/openapitools/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}> arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}
            {{else}}
public static FrozenList<Object> U validate(List<Object> arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}
            {{/if}}
        {{/eq}}
        {{#eq this "string" }}
            {{#eq ../format "binary"}}
// FileIO,
// bytes,
            {{else}}
public static String validate(String arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}
            {{/eq}}
        {{/eq}}
        {{#eq this "integer"}}
public static long validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, Long.valueOf(arg), configuration);
}

public static long validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, Long.parseLong(String.valueOf(arg)), configuration);
}

public static long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static long validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, Long.parseLong(String.valueOf(arg)), configuration);
}
        {{/eq}}
        {{#eq this "number"}}
            {{#eq ../format null}}
public static Number validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static Number validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static Number validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static Number validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}
            {{else}}
                {{#eq ../format "int32"}}
public static int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static int validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, Integer.parseInt(String.valueOf(arg)), configuration);
}
                {{else}}
                    {{#eq ../format "int64"}}
public static long validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, Long.valueOf(arg), configuration);
}

public static long validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, Long.parseLong(String.valueOf(arg)), configuration);
}

public static long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static long validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, Long.parseLong(String.valueOf(arg)), configuration);
}
                    {{else}}
                        {{#eq ../format "float"}}
public static float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}
                        {{else}}
                            {{#eq ../format "double"}}
public static double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}
                            {{/eq}}
                        {{/eq}}
                    {{/eq}}
                {{/eq}}
            {{/eq}}
        {{/eq}}
        {{#eq this "boolean"}}
public static boolean validate(boolean arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}
        {{/eq}}
    {{/each}}
{{else}}
public static Void validate(Void arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static boolean validate(boolean arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static String validate(String arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static String validate(ZonedDateTime arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static String validate(LocalDate arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static String validate(UUID arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static <T extends FrozenMap> T validate(Map<String, Object> arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}

public static <U extends FrozenList> U validate(List<Object> arg, SchemaConfiguration configuration) throws ValidationException {
    return JsonSchema.validate({{#if includeContainer}}{{containerJsonPathPiece.camelCase}}.{{/if}}{{jsonPathPiece.camelCase}}.class, arg, configuration);
}
{{/if}}