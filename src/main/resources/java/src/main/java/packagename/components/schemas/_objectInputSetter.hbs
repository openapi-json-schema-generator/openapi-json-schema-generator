{{#each types}}
    {{#eq this "null"}}
        {{#if forDocs }}
| {{builderClass}} | {{methodName}}(Void value) |
        {{else}}

default T {{methodName}}(Void value) {
    var instance = getInstance();
    instance.put("{{{key}}}", null);
    return {{getBuilderMethod}}(instance);
}
        {{/if}}
    {{else}}
        {{#eq this "boolean"}}
            {{#if forDocs }}
| {{builderClass}} | {{methodName}}(boolean value) |
            {{else}}

default T {{methodName}}(boolean value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}
            {{/if}}
        {{else}}
            {{#eq this "string"}}
                {{#if forDocs }}
| {{builderClass}} | {{methodName}}(String value) |
                {{else}}

default T {{methodName}}(String value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}
                {{/if}}
            {{else}}
                {{#or (eq this "integer") (eq this "number") }}
                    {{#if forDocs }}
| {{builderClass}} | {{methodName}}(int value) |
| {{builderClass}} | {{methodName}}(float value) |
                        {{#neq ../format "int32"}}
| {{builderClass}} | {{methodName}}(long value) |
| {{builderClass}} | {{methodName}}(double value) |
                        {{/neq}}
                    {{else}}

default T {{methodName}}(int value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}

default T {{methodName}}(float value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}
                        {{#neq ../format "int32"}}

default T {{methodName}}(long value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}

default T {{methodName}}(double value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}
                        {{/neq}}
                    {{/if}}
                {{else}}
                    {{#eq this "array"}}
                        {{#if forDocs }}
| {{builderClass}} | {{methodName}}(List<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true noExtends=true }}{{else}}@Nullable Object{{/with}}> value) |
                        {{else}}

default T {{methodName}}(List<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true noExtends=true }}{{else}}@Nullable Object{{/with}}> value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}
                        {{/if}}
                    {{else}}
                        {{#eq this "object"}}
                            {{#if forDocs }}
| {{builderClass}} | {{methodName}}(Map<String, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true noExtends=true }}{{else}}@Nullable Object{{/with}}> value) |
                            {{else}}

default T {{methodName}}(Map<String, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true noExtends=true }}{{else}}@Nullable Object{{/with}}> value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}
                            {{/if}}
                        {{/eq}}
                    {{/eq}}
                {{/or}}
            {{/eq}}
        {{/eq}}
    {{/eq}}
{{else}}
    {{! no type defined }}
    {{#if forDocs }}
| {{builderClass}} | {{methodName}}(Void value) |
| {{builderClass}} | {{methodName}}(boolean value) |
| {{builderClass}} | {{methodName}}(String value) |
| {{builderClass}} | {{methodName}}(int value) |
| {{builderClass}} | {{methodName}}(float value) |
| {{builderClass}} | {{methodName}}(long value) |
| {{builderClass}} | {{methodName}}(double value) |
| {{builderClass}} | {{methodName}}(List<?> value) |
| {{builderClass}} | {{methodName}}(Map<String, ?> value) |
    {{else}}

default T {{methodName}}(Void value) {
    var instance = getInstance();
    instance.put("{{{key}}}", null);
    return {{getBuilderMethod}}(instance);
}

default T {{methodName}}(boolean value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}

default T {{methodName}}(String value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}

default T {{methodName}}(int value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}

default T {{methodName}}(float value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}

default T {{methodName}}(long value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}

default T {{methodName}}(double value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}

default T {{methodName}}(List<?> value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}

default T {{methodName}}(Map<String, ?> value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value);
    return {{getBuilderMethod}}(instance);
}
    {{/if}}
{{/each}}
{{#with enumInfo}}
    {{#each typeToValues }}
        {{#eq @key "null"}}
            {{#if forDocs }}
                {{#if useContainer }}
| {{builderClass}} | {{methodName}}([{{../../containerJsonPathPiece.pascalCase}}.Null{{../jsonPathPiece.pascalCase}}]({{docRoot}}{{pathFromDocRoot}}.md#null{{../jsonPathPiece.kebabCase}}) value) |
                {{else}}
| {{builderClass}} | {{methodName}}([Null{{../jsonPathPiece.pascalCase}}](#null{{../jsonPathPiece.kebabCase}}) value) |
                {{/if}}
            {{else}}

default T {{methodName}}({{#if useContainer}}{{../../containerJsonPathPiece.pascalCase}}.{{/if}}Null{{../jsonPathPiece.pascalCase}} value) {
    var instance = getInstance();
    list.{{methodName}}(null);
    return {{getBuilderMethod}}(instance);
}
            {{/if}}
        {{else}}
            {{#eq @key "boolean"}}
                {{#if forDocs }}
                    {{#if useContainer }}
| {{builderClass}} | {{methodName}}([{{../../containerJsonPathPiece.pascalCase}}.Boolean{{../jsonPathPiece.pascalCase}}]({{docRoot}}{{pathFromDocRoot}}.md#boolean{{../jsonPathPiece.kebabCase}}) value) |
                    {{else}}
| {{builderClass}} | {{methodName}}([Boolean{{../jsonPathPiece.pascalCase}}](#boolean{{../jsonPathPiece.kebabCase}}) value) |
                    {{/if}}
                {{else}}

default T {{methodName}}({{#if useContainer}}{{../../containerJsonPathPiece.pascalCase}}.{{/if}}Boolean{{../jsonPathPiece.pascalCase}} value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value.value());
    return {{getBuilderMethod}}(instance);
}
                {{/if}}
            {{else}}
                {{#eq @key "string"}}
                    {{#if forDocs }}
                        {{#if useContainer }}
| {{builderClass}} | {{methodName}}([{{../../containerJsonPathPiece.pascalCase}}.String{{../jsonPathPiece.pascalCase}}]({{docRoot}}{{pathFromDocRoot}}.md#string{{../jsonPathPiece.kebabCase}}) value) |
                        {{else}}
| {{builderClass}} | {{methodName}}([String{{../jsonPathPiece.pascalCase}}](#string{{../jsonPathPiece.kebabCase}}) value) |
                        {{/if}}
                    {{else}}

default T {{methodName}}({{#if useContainer}}{{../../containerJsonPathPiece.pascalCase}}.{{/if}}String{{../jsonPathPiece.pascalCase}} value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value.value());
    return {{getBuilderMethod}}(instance);
}
                    {{/if}}
                {{else}}
                    {{#eq @key "Integer"}}
                        {{#if forDocs }}
                            {{#if useContainer }}
| {{builderClass}} | {{methodName}}([{{../../containerJsonPathPiece.pascalCase}}.Integer{{../jsonPathPiece.pascalCase}}]({{docRoot}}{{pathFromDocRoot}}.md#integer{{../jsonPathPiece.kebabCase}}) value) |
                            {{else}}
| {{builderClass}} | {{methodName}}([Integer{{../jsonPathPiece.pascalCase}}](#integer{{../jsonPathPiece.kebabCase}}) value) |
                            {{/if}}
                        {{else}}

default T {{methodName}}({{#if useContainer}}{{../../containerJsonPathPiece.pascalCase}}.{{/if}}Integer{{../jsonPathPiece.pascalCase}} value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value.value());
    return {{getBuilderMethod}}(instance);
}
                        {{/if}}
                    {{else}}
                        {{#eq @key "Long"}}
                            {{#if forDocs }}
                                {{#if useContainer }}
| {{builderClass}} | {{methodName}}([{{../../containerJsonPathPiece.pascalCase}}.Long{{../jsonPathPiece.pascalCase}}]({{docRoot}}{{pathFromDocRoot}}.md#long{{../jsonPathPiece.kebabCase}}) value) |
                                {{else}}
| {{builderClass}} | {{methodName}}([Long{{../jsonPathPiece.pascalCase}}](#long{{../jsonPathPiece.kebabCase}}) value) |
                                {{/if}}
                            {{else}}

default T {{methodName}}({{#if useContainer}}{{../../containerJsonPathPiece.pascalCase}}.{{/if}}Long{{../jsonPathPiece.pascalCase}} value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value.value());
    return {{getBuilderMethod}}(instance);
}
                            {{/if}}
                        {{else}}
                            {{#eq @key "Float"}}
                                {{#if forDocs }}
                                    {{#if useContainer }}
| {{builderClass}} | {{methodName}}([{{../../containerJsonPathPiece.pascalCase}}.Float{{../jsonPathPiece.pascalCase}}]({{docRoot}}{{pathFromDocRoot}}.md#float{{../jsonPathPiece.kebabCase}}) value) |
                                    {{else}}
| {{builderClass}} | {{methodName}}([Float{{../jsonPathPiece.pascalCase}}](#float{{../jsonPathPiece.kebabCase}}) value) |
                                    {{/if}}
                                {{else}}

default T {{methodName}}({{#if useContainer}}{{../../containerJsonPathPiece.pascalCase}}.{{/if}}Float{{../jsonPathPiece.pascalCase}} value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value.value());
    return {{getBuilderMethod}}(instance);
}
                                {{/if}}
                            {{else}}
                                {{#eq @key "Double"}}
                                    {{#if forDocs }}
                                        {{#if useContainer }}
| {{builderClass}} | {{methodName}}([{{../../containerJsonPathPiece.pascalCase}}.Double{{../jsonPathPiece.pascalCase}}]({{docRoot}}{{pathFromDocRoot}}.md#double{{../jsonPathPiece.kebabCase}}) value) |
                                        {{else}}
| {{builderClass}} | {{methodName}}([Double{{../jsonPathPiece.pascalCase}}](#double{{../jsonPathPiece.kebabCase}}) value) |
                                        {{/if}}
                                    {{else}}

default T {{methodName}}({{#if useContainer}}{{../../containerJsonPathPiece.pascalCase}}.{{/if}}Double{{../jsonPathPiece.pascalCase}} value) {
    var instance = getInstance();
    instance.put("{{{key}}}", value.value());
    return {{getBuilderMethod}}(instance);
}
                                    {{/if}}
                                {{/eq}}
                            {{/eq}}
                        {{/eq}}
                    {{/eq}}
                {{/eq}}
            {{/eq}}
        {{/eq}}
    {{/each}}
{{/with}}
