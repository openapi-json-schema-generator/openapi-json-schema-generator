{{#with response}}
package {{packageName}}.{{subpackage}};

{{#if refInfo}}
    {{#neq subpackage refInfo.ref.subpackage}}
import {{packageName}}.{{refInfo.ref.subpackage}}.{{refInfo.refModule}};
    {{/neq}}

public class {{jsonPathPiece.pascalCase}} extends {{refInfo.refModule}} {
    public static class {{jsonPathPiece.pascalCase}}1 extends {{refInfo.refModule}}1 {}
}
{{else}}
import {{packageName}}.configurations.SchemaConfiguration;
import {{packageName}}.response.ApiResponse;
import {{packageName}}.response.DeserializedApiResponse;
import {{packageName}}.response.ResponseDeserializer;
import {{packageName}}.mediatype.MediaType;
    {{#each content}}
        {{#with schema}}
import {{{packageName}}}.{{subpackage}}.{{containerJsonPathPiece.pascalCase}};
        {{/with}}
    {{/each}}

import java.util.AbstractMap;
import java.util.Map;
import java.net.http.HttpHeaders;

public class {{jsonPathPiece.pascalCase}} {
    {{#if hasContentSchema}}
    public sealed interface SealedMediaType permits {{#each content}}{{@key.pascalCase}}MediaType{{#unless @last}}, {{/unless}}{{/each}} {}
        {{#each content}}

    public record {{@key.pascalCase}}MediaType({{#with this}}{{#with schema}}{{containerJsonPathPiece.pascalCase}}.{{jsonPathPiece.pascalCase}} schema{{/with}}{{/with}}) implements SealedMediaType, MediaType<{{#with this}}{{#with schema}}{{containerJsonPathPiece.pascalCase}}.{{jsonPathPiece.pascalCase}}, Void{{/with}}{{/with}}> {
        public {{@key.pascalCase}}MediaType() {
            this({{#with this}}{{#with schema}}{{containerJsonPathPiece.pascalCase}}.{{jsonPathPiece.pascalCase}}.getInstance(){{/with}}{{/with}});
        }
        @Override
        public Void encoding() {
            return null;
        }
    }
        {{/each}}
    public sealed interface SealedResponseBody permits {{#each content}}{{@key.pascalCase}}ResponseBody{{#unless @last}}, {{/unless}}{{/each}} {}
        {{#each content}}
    public record {{@key.pascalCase}}ResponseBody({{#with this}}{{#with schema}}{{containerJsonPathPiece.pascalCase}}.{{#with getSelfOrDeepestRef}}{{> src/main/java/packagename/components/schemas/_sealedClassName }}{{/with}}{{/with}}{{/with}} body) implements SealedResponseBody { }
        {{/each}}
    {{/if}}

    public static class {{jsonPathPiece.pascalCase}}1 extends ResponseDeserializer<{{#if hasContentSchema}}SealedResponseBody{{else}}Void{{/if}}, Void, {{#if hasContentSchema}}SealedMediaType{{else}}Void{{/if}}> {
        public {{jsonPathPiece.pascalCase}}1() {
            super(
                Map.ofEntries(
        {{#each content}}
                    new AbstractMap.SimpleEntry<>("{{{@key.original}}}", {{#if schema}}new {{@key.pascalCase}}MediaType(){{else}}null{{/if}}){{#unless @last}},{{/unless}}
        {{/each}}
                )
            );
        }

        {{#if hasContentSchema}}
        @Override
        public SealedResponseBody getBody(String contentType, byte[] body, SchemaConfiguration configuration) {
            {{#each content}}
                {{#if @first}}
            if ("{{{@key.original}}}".equals(contentType)) {
                {{else}}
            } else if ("{{{@key.original}}}".equals(contentType)) {
                {{/if}}
                // todo implement deserialization
            {{/each}}
            }
            throw new RuntimeException("contentType="+contentType+" returned by the server is unknown and does not exist in the openapi document");
        }
        {{else}}
        @Override
        public Void getBody(String contentType, byte[] body, SchemaConfiguration configuration) {
            return null;
        }
        {{/if}}

        @Override
        public Void getHeaders(HttpHeaders headers) {
            return null;
        }
    }
}
{{/if}}
{{/with}}