package {{{packageName}}}.schemas.validation;

import java.util.List;
import java.util.Set;

public class UnsetAnyTypeJsonSchema extends JsonSchema implements JsonSchemaValidator<Object, Object, Object> {
    public UnsetAnyTypeJsonSchema() {
        super(null);
    }

    public Object castToAllowedTypes(Object arg, List<Object> pathToItem, Set<List<Object>> pathSet) {
        return castToAllowedObjectTypes(arg, pathToItem, pathSet);
    }

    public Object getNewInstance(Object arg, List<Object> pathToItem, PathToSchemasMap pathToSchemas) {
        return arg;
    }

   public Object validate(Object arg, SchemaConfiguration configuration) throws ValidationException, InvalidTypeException {
      Set<List<Object>> pathSet = new HashSet<>();
      List<Object> pathToItem = new ArrayList<>();
      pathToItem.add("args[0]");
      Object castArg = castToAllowedTypes(arg, pathToItem, pathSet);
      SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone()));
      PathToSchemasMap validatedPathToSchemas = new PathToSchemasMap();
      ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, validatedPathToSchemas, new LinkedHashSet<>());
      PathToSchemasMap pathToSchemasMap = getPathToSchemas(this, castArg, validationMetadata, pathSet);
      return getNewInstance(castArg, validationMetadata.pathToItem(), pathToSchemasMap);
   }
}