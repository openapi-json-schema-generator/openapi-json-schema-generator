{{#if types}}
    {{#and (eq types.size 1) (or (contains types "null") (contains types "object") (contains types "array") (contains types "boolean"))}}
        {{#if forDocs}}
type = Set.of({{#contains types "null"}}Void.class{{/contains}}{{#contains types "object"}}Map.class{{/contains}}{{#contains types "array"}}List.class{{/contains}}{{#contains types  "boolean"}}Boolean.class{{/contains}})
        {{~else}}
.type(Set.of({{#contains types "null"}}Void.class{{/contains}}{{#contains types "object"}}Map.class{{/contains}}{{#contains types "array"}}List.class{{/contains}}{{#contains types  "boolean"}}Boolean.class{{/contains}}))
        {{/if}}
    {{else}}
        {{#if forDocs}}
type = Set.of(<br/>
            {{~#each types}}
                {{#eq this "null"}}
&nbsp;&nbsp;&nbsp;&nbsp;Void.class{{#unless @last}},{{/unless}}<br/>
                {{~/eq}}
                {{#eq this "object"}}
&nbsp;&nbsp;&nbsp;&nbsp;Map.class{{#unless @last}},{{/unless}}<br/>
                {{~/eq}}
                {{#eq this "array"}}
&nbsp;&nbsp;&nbsp;&nbsp;List.class{{#unless @last}},{{/unless}}<br/>
                {{~/eq}}
                {{#eq this "string" }}
                    {{#eq ../format "binary"}}
    // FileIO,
    // bytes,
                    {{else}}
&nbsp;&nbsp;&nbsp;&nbsp;String.class{{#unless @last}},{{/unless}}<br/>
                    {{~/eq}}
                {{/eq}}
                {{#eq this "integer"}}
&nbsp;&nbsp;&nbsp;&nbsp;Integer.class,<br/>&nbsp;&nbsp;&nbsp;&nbsp;Long.class,<br/>&nbsp;&nbsp;&nbsp;&nbsp;Float.class,<br/>&nbsp;&nbsp;&nbsp;&nbsp;Double.class{{#unless @last}},{{/unless}}<br/>
                {{~/eq}}
                {{#eq this "number"}}
&nbsp;&nbsp;&nbsp;&nbsp;Integer.class,<br/>&nbsp;&nbsp;&nbsp;&nbsp;Long.class,<br/>&nbsp;&nbsp;&nbsp;&nbsp;Float.class,<br/>&nbsp;&nbsp;&nbsp;&nbsp;Double.class{{#unless @last}},{{/unless}}<br/>
                {{~/eq}}
                {{#eq this "boolean"}}
&nbsp;&nbsp;&nbsp;&nbsp;Boolean.class{{#unless @last}},{{/unless}}<br/>
                {{~/eq}}
            {{/each}}
)<br/>
        {{~else}}
.type(Set.of(
            {{#each types}}
                {{#eq this "null"}}
    Void.class{{#unless @last}},{{/unless}}
                {{/eq}}
                {{#eq this "object"}}
    Map.class{{#unless @last}},{{/unless}}
                {{/eq}}
                {{#eq this "array"}}
    List.class{{#unless @last}},{{/unless}}
                {{/eq}}
                {{#eq this "string" }}
                    {{#eq ../format "binary"}}
    // FileIO,
    // bytes,
                    {{else}}
    String.class{{#unless @last}},{{/unless}}
                    {{/eq}}
                {{/eq}}
                {{#eq this "integer"}}
    Integer.class,
    Long.class,
    Float.class,
    Double.class{{#unless @last}},{{/unless}}
                {{/eq}}
                {{#eq this "number"}}
    Integer.class,
    Long.class,
    Float.class,
    Double.class{{#unless @last}},{{/unless}}
                {{/eq}}
                {{#eq this "boolean"}}
    Boolean.class{{#unless @last}},{{/unless}}
                {{/eq}}
            {{/each}}
))
        {{/if}}
    {{/and}}
{{/if}}