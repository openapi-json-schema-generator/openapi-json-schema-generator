{{#if types}}
    {{#each types}}
        {{#eq this "null"}}
public Void validate(Void arg, SchemaConfiguration configuration) throws ValidationException {
    return validateVoid(arg, configuration);
}
        {{/eq}}
        {{#eq this "object"}}
            {{#if ../mapOutputJsonPathPiece}}
                {{#if ../mapValueSchema}}
public {{../mapOutputJsonPathPiece.camelCase}} validate(Map<String, {{#with ../mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}> arg, SchemaConfiguration configuration) throws ValidationException {
    return validateMap(arg, configuration);
}
                {{else}}
public {{../mapOutputJsonPathPiece.camelCase}} validate(Map<String, Object> arg, SchemaConfiguration configuration) throws ValidationException {
    return validateMap(arg, configuration);
}
                {{/if}}
            {{else}}
public FrozenMap<String, Object> validate(Map<String, Object> arg, SchemaConfiguration configuration) throws ValidationException {
    return validateMap(arg, configuration);
}
            {{/if}}
        {{/eq}}
        {{#eq this "array"}}
            {{#if ../arrayOutputJsonPathPiece}}
public {{../arrayOutputJsonPathPiece.camelCase}} validate(List<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}> arg, SchemaConfiguration configuration) throws ValidationException {
    return validateList(arg, configuration);
}
            {{else}}
public FrozenList<Object> validate(List<Object> arg, SchemaConfiguration configuration) throws ValidationException {
    return validateList(arg, configuration);
}
            {{/if}}
        {{/eq}}
        {{#eq this "string" }}
            {{#eq ../format "binary"}}
// FileIO,
// bytes,
            {{else}}
public String validate(String arg, SchemaConfiguration configuration) throws ValidationException {
    return validateString(arg, configuration);
}
            {{/eq}}
        {{/eq}}
        {{#eq this "integer"}}
public int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return validateInt(arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return validateFloat(arg, configuration);
}

public long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return validateLong(arg, configuration);
}

public double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return validateDouble(arg, configuration);
}
        {{/eq}}
        {{#eq this "number"}}
            {{#eq ../format null}}
public int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return validateInt(arg, configuration);
}

public long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return validateLong(arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return validateFloat(arg, configuration);
}

public double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return validateDouble(arg, configuration);
}
            {{else}}
                {{#eq ../format "int32"}}
public int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return validateInt(arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return validateFloat(arg, configuration);
}
                {{else}}
                    {{#eq ../format "int64"}}
public int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return validateInt(arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return validateFloat(arg, configuration);
}

public long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return validateLong(arg, configuration);
}

public double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return validateDouble(arg, configuration);
}
                    {{else}}
                        {{#eq ../format "float"}}
public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return validateFloat(arg, configuration);
}
                        {{else}}
                            {{#eq ../format "double"}}
public double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return validateDouble(arg, configuration);
}
                            {{/eq}}
                        {{/eq}}
                    {{/eq}}
                {{/eq}}
            {{/eq}}
        {{/eq}}
        {{#eq this "boolean"}}
public boolean validate(boolean arg, SchemaConfiguration configuration) throws ValidationException {
    return validateBoolean(arg, configuration);
}
        {{/eq}}
    {{/each}}
{{else}}
public Void validate(Void arg, SchemaConfiguration configuration) throws ValidationException {
    return validateVoid(arg, configuration);
}

public boolean validate(boolean arg, SchemaConfiguration configuration) throws ValidationException {
    return validateBoolean(arg, configuration);
}

public int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return validateInt(arg, configuration);
}

public long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return validateLong(arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return validateFloat(arg, configuration);
}

public double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return validateDouble(arg, configuration);
}

public String validate(String arg, SchemaConfiguration configuration) throws ValidationException {
    return validateString(arg, configuration);
}

public String validate(ZonedDateTime arg, SchemaConfiguration configuration) throws ValidationException {
    return validateZonedDateTime(arg, configuration);
}

public String validate(LocalDate arg, SchemaConfiguration configuration) throws ValidationException {
    return validateLocalDate(arg, configuration);
}

public String validate(UUID arg, SchemaConfiguration configuration) throws ValidationException {
    return validateUUID(arg, configuration);
}

    {{#if mapOutputJsonPathPiece}}
        {{#if mapValueSchema}}
public {{mapOutputJsonPathPiece.camelCase}} validate(Map<String, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}> arg, SchemaConfiguration configuration) throws ValidationException {
    return validateMap(arg, configuration);
}
        {{else}}
public {{mapOutputJsonPathPiece.camelCase}} validate(Map<String, Object> arg, SchemaConfiguration configuration) throws ValidationException {
    return validateMap(arg, configuration);
}
        {{/if}}
    {{else}}
public FrozenMap<String, Object> validate(Map<String, Object> arg, SchemaConfiguration configuration) throws ValidationException {
    return validateMap(arg, configuration);
}
    {{/if}}

    {{#if arrayOutputJsonPathPiece}}
public {{../arrayOutputJsonPathPiece.camelCase}} validate(List<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}> arg, SchemaConfiguration configuration) throws ValidationException {
    return validateList(arg, configuration);
}
    {{else}}
public FrozenList<Object> validate(List<Object> arg, SchemaConfiguration configuration) throws ValidationException {
    return validateList(arg, configuration);
}
    {{/if}}
{{/if}}