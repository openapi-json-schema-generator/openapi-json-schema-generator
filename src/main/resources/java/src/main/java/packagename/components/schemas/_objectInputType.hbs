{{#each mapBuilders}}
public static class {{className}} implements BaseBuilder<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../../jsonPath forceNull=true noExtends=true }}{{else}}@Nullable Object{{/with}}> {
    private final Map<String, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../../jsonPath forceNull=true noExtends=true }}{{else}}@Nullable Object{{/with}}> instance;
    public {{className}}(Map<String, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../../jsonPath forceNull=true noExtends=true }}{{else}}@Nullable Object{{/with}}> instance) {
        this.instance = instance;
    }
    public Map<String, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../../jsonPath forceNull=true noExtends=true }}{{else}}@Nullable Object{{/with}}> build() {
        return instance;
    }
}
{{/each}}
{{#each requiredProperties}}

public interface SetterFor{{@key.camelCase}} <T> {
    Map<String, {{#with ../mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../../jsonPath forceNull=true noExtends=true }}{{else}}@Nullable Object{{/with}}> getInstance();
    T getBuilderAfter{{@key.camelCase}}(Map<String, {{#with ../mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../../jsonPath forceNull=true noExtends=true }}{{else}}@Nullable Object{{/with}}> instance);
    {{#if @key.isValid}}
    {{> src/main/java/packagename/components/schemas/_objectInputSetter methodName=@key.original getBuilderMethod=(join "getBuilderAfter" @key.camelCase "") key=@key.original }}
    {{else}}
    {{> src/main/java/packagename/components/schemas/_objectInputSetter methodName="todoFixThis" getBuilderMethod=(join "getBuilderAfter" @key.camelCase "") key=@key.original }}
    {{/if}}
}
{{/each}}
{{#if additionalProperties}}
    {{#if additionalProperties.isBooleanSchemaFalse}}
        {{! TypedDict use case }}
        {{#and requiredProperties optionalProperties}}
public static class {{mapInputJsonPathPiece.camelCase}} {
    // requiredProperties, optionalProperties, NO additionalProperties
}
        {{else}}
            {{! empty mapping }}
public static class {{mapInputJsonPathPiece.camelCase}} {
    // empty mapping
}
        {{/and}}
    {{else}}
        {{! addProps True/schema }}
        {{#if additionalProperties.isBooleanSchemaTrue }}
            {{! addProps True, does not matter what properties are because they are always covered by base types }}
public static class {{mapInputJsonPathPiece.camelCase}} {
    // Map<String, Object> because additionalProperties == true
}
        {{else}}
            {{! addProps schema }}
            {{#and requiredProperties optionalProperties}}
public static class {{mapInputJsonPathPiece.camelCase}} {
    // requiredProperties + optionalProperties + additionalProperties
}
            {{else}}
                {{! no requiredProperties or optionalProperties or just one of them }}
                {{#if requiredProperties}}
                    {{! requiredProperties + addProp }}
public static class {{mapInputJsonPathPiece.camelCase}} {
    // requiredProperties + additionalProperties
}
                {{else}}
                    {{#if optionalProperties}}
                        {{! optionalProperties + addProp }}
public static class {{mapInputJsonPathPiece.camelCase}} {
    // optionalProperties + additionalProperties
}
                    {{else}}
                        {{! only addProp }}
public static class {{mapInputJsonPathPiece.camelCase}} {
    // Map<String, additionalProperties>
}
                    {{/if}}
                {{/if}}
            {{/and}}
        {{/if}}
    {{/if}}
{{else}}
    {{! addProps unset, does not matter what required and optional props are }}
public static class {{mapInputJsonPathPiece.camelCase}} {
    // Map<String, Object> because addProps is unset
}
{{/if}}