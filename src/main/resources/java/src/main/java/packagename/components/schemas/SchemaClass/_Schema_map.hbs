

public static class {{jsonPathPiece.camelCase}} extends JsonSchema implements SchemaMapValidator<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}, {{#if mapOutputJsonPathPiece}}{{mapOutputJsonPathPiece.camelCase}}{{else}}FrozenMap{{/if}}<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}>> {
{{#if componentModule}}
    /*
    NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    {{#if description}}

    {{{description.original}}}
    {{/if}}
    */
{{/if}}
    {{#each keywords}}
        {{#if @first}}
    public {{../jsonPathPiece.camelCase}}() {
        super(new LinkedHashMap<>(Map.ofEntries(
        {{/if}}
        {{#eq this "type"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_types }}
        {{/eq}}
        {{#eq this "properties"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_properties }}
        {{/eq}}
        {{#eq this "required"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_required }}
        {{/eq}}
        {{#eq this "maxProperties"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_maxProperties }}
        {{/eq}}
        {{#eq this "minProperties"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_minProperties }}
        {{/eq}}
        {{#eq this "additionalProperties"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_additionalProperties }}
        {{/eq}}
        {{#eq this "allOf"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_allOf }}
        {{/eq}}
        {{#eq this "anyOf"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_anyOf }}
        {{/eq}}
        {{#eq this "oneOf"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_oneOf }}
        {{/eq}}
        {{#eq this "not"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_not }}
        {{/eq}}
        {{#if @last}}
        )));
    }
        {{/if}}
    {{/each}}
    {{#if hasDiscriminatorWithNonEmptyMapping}}
    {{!> components/schemas/schema_cls/_discriminator }}
    {{/if}}
    {{#if if_}}
    {{!> components/schemas/schema_cls/_if }}
    {{/if}}
    {{#if then}}
    {{!> components/schemas/schema_cls/_then }}
    {{/if}}
    {{#if else_}}
    {{!> components/schemas/schema_cls/_else }}
    {{/if}}
    {{#if dependentRequired}}
    {{!> components/schemas/schema_cls/_dependent_required }}
    {{/if}}
    {{#if dependentSchemas}}
    {{!> components/schemas/schema_cls/_dependent_schemas }}
    {{/if}}
    {{#if propertyNames}}
    {{!> components/schemas/schema_cls/_property_names }}
    {{/if}}
    {{#if patternProperties}}
    {{!> components/schemas/schema_cls/_pattern_properties }}
    {{/if}}
    {{#if unevaluatedProperties}}
    {{!> components/schemas/schema_cls/_unevaluated_properties }}
    {{/if}}

    @Override
    public FrozenMap<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> castToAllowedTypes(Map<String, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> arg, List<Object> pathToItem, Set<List<Object>> pathSet) {
        pathSet.add(pathToItem);
        LinkedHashMap<String, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> argFixed = new LinkedHashMap<>();
        for (Map.Entry<String, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> entry: arg.entrySet()) {
            String key = entry.getKey();
            {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}} val = entry.getValue();
            List<Object> newPathToItem = new ArrayList<>(pathToItem);
            newPathToItem.add(key);
            {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}} fixedVal = ({{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}) castToAllowedObjectTypes(val, newPathToItem, pathSet);
            argFixed.put(key, fixedVal);
        }
        return new FrozenMap<>(argFixed);
    }

    {{#if mapOutputJsonPathPiece}}
    public {{mapOutputJsonPathPiece.camelCase}} getNewInstance(FrozenMap<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> arg, List<Object> pathToItem, PathToSchemasMap pathToSchemas) {
        LinkedHashMap<String, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> properties = new LinkedHashMap<>();
        for(Map.Entry<String, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> entry: arg.entrySet()) {
            String propertyName = entry.getKey();
            List<Object> propertyPathToItem = new ArrayList<>(pathToItem);
            propertyPathToItem.add(propertyName);
            {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}} value = entry.getValue();
            JsonSchema propertySchema = pathToSchemas.get(propertyPathToItem).entrySet().iterator().next().getKey();
            {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}} castValue = ({{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}) propertySchema.getNewInstance(value, propertyPathToItem, pathToSchemas);
            properties.put(propertyName, castValue);
        }
        FrozenMap<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> castProperties = new FrozenMap<>(properties);
        return new {{mapOutputJsonPathPiece.camelCase}}(castProperties);
    }
    {{else}}
    @Override
    public FrozenMap<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> getNewInstance(FrozenMap<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> arg, List<Object> pathToItem, PathToSchemasMap pathToSchemas) {
        return arg;
    }
    {{/if}}

    {{> src/main/java/packagename/components/schemas/SchemaClass/_validate }}
}
