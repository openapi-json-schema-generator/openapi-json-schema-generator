

public static class {{jsonPathPiece.camelCase}} extends JsonSchema implements SchemaListValidator<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}, {{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}, {{arrayOutputJsonPathPiece.camelCase}}> {
{{#if componentModule}}
    /*
    NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    {{#if description}}

    {{{description.original}}}
    {{/if}}
    */
{{/if}}
    {{#each keywords}}
        {{#if @first}}
    public {{../jsonPathPiece.camelCase}}() {
        super(new LinkedHashMap<>(Map.ofEntries(
        {{/if}}
        {{#eq this "type"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_types }}
        {{/eq}}
        {{#eq this "items"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_items }}
        {{/eq}}
        {{#eq this "maxItems"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_maxItems }}
        {{/eq}}
        {{#eq this "minItems"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_minItems }}
        {{/eq}}
        {{#eq this "allOf"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_allOf }}
        {{/eq}}
        {{#eq this "anyOf"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_anyOf }}
        {{/eq}}
        {{#eq this "oneOf"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_oneOf }}
        {{/eq}}
        {{#eq this "not"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_not }}
        {{/eq}}
        {{#eq this "uniqueItems"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_uniqueItems }}
        {{/eq}}
        {{#if @last}}
        )));
    }
        {{/if}}
    {{/each}}
    {{#if prefixItems}}
    {{!> components/schemas/schema_cls/_prefix_items }}
    {{/if}}
    {{#if contains}}
    {{!> components/schemas/schema_cls/_contains }}
    {{/if}}
    {{#if if_}}
    {{!> components/schemas/schema_cls/_if }}
    {{/if}}
    {{#if then}}
    {{!> components/schemas/schema_cls/_then }}
    {{/if}}
    {{#if else_}}
    {{!> components/schemas/schema_cls/_else }}
    {{/if}}
    {{#if unevaluatedItems}}
    {{!> components/schemas/schema_cls/_unevaluated_items }}
    {{/if}}

    @Override
    public FrozenList<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}> castToAllowedTypes(List<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}> arg, List<Object> pathToItem, Set<List<Object>> pathSet) {
        pathSet.add(pathToItem);
        List<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}> argFixed = new ArrayList<>();
        int i =0;
        for ({{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}} item: arg) {
            List<Object> newPathToItem = new ArrayList<>(pathToItem);
            newPathToItem.add(i);
            {{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}} fixedVal = JsonSchemaFactory.getInstance({{items.jsonPathPiece.camelCase}}.class).castToAllowedTypes(item, newPathToItem, pathSet);
            argFixed.add(fixedVal);
            i += 1;
        }
        return new FrozenList<>(argFixed);
    }

    @Override
    public {{../arrayOutputJsonPathPiece.camelCase}} getNewInstance(FrozenList<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}> arg, List<Object> pathToItem, PathToSchemasMap pathToSchemas) {
        ArrayList<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}> items = new ArrayList<>();
        int i = 0;
        for ({{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}} item: arg) {
            List<Object> itemPathToItem = new ArrayList<>(pathToItem);
            itemPathToItem.add(i);
            JsonSchema itemSchema = pathToSchemas.get(itemPathToItem).entrySet().iterator().next().getKey();
            {{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}} castItem = itemSchema.getNewInstance(item, itemPathToItem, pathToSchemas);
            items.add(castItem);
            i += 1;
        }
        FrozenList<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}> newInstanceItems = new FrozenList<>(items);
        return new {{../arrayOutputJsonPathPiece.camelCase}}(newInstanceItems);
    }

    @Override
    public Object getNewInstance(Object arg, List<Object> pathToItem, PathToSchemasMap pathToSchemas) {
        if (arg instanceof FrozenList) {
            @SuppressWarnings("unchecked") FrozenList<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}> castArg = (FrozenList<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{/with}}>) arg;
            return getNewInstance(castArg, pathToItem, pathToSchemas);
        }
        throw new InvalidTypeException("Invalid input type="+arg.getClass()+". It can't be instantiated by this schema");
    }

    {{> src/main/java/packagename/components/schemas/SchemaClass/_validate }}
}