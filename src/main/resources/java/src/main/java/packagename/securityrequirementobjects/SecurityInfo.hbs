{{#if security.subpackage}}
package {{{packageName}}}.{{security.subpackage}};
{{else}}
package {{{packageName}}};
{{/if}}

import {{{packageName}}}.exceptions.UnsetPropertyException;
{{#each security}}
import {{{packageName}}}.{{subpackage}}.{{jsonPathPiece.pascalCase}};
{{/each}}
import {{{packageName}}}.securityrequirementobjects.SecurityRequirementObject;
import {{{packageName}}}.securityrequirementobjects.SecurityRequirementObjectProvider;
import {{{packageName}}}.schemas.GenericBuilder;
import org.checkerframework.checker.nullness.qual.Nullable;

import java.util.HashMap;
import java.util.Map;
import java.util.EnumMap;

public class {{security.jsonPathPiece.pascalCase}} implements SecurityRequirementObjectProvider<{{security.jsonPathPiece.pascalCase}}.SecurityIndex> {
    final private Securities securities;
    final private SecurityIndex securityIndex;

    public {{security.jsonPathPiece.pascalCase}}(Securities securities, SecurityIndex securityIndex) {
        this.securities = securities;
        this.securityIndex = securityIndex;
    }
{{#each security}}

    public interface SetterFor{{jsonPathPiece.pascalCase}} <T> {
        Map<SecurityIndex, SecurityRequirementObject> getInstance();
        T getBuilderAfter{{jsonPathPiece.pascalCase}}(Map<SecurityIndex, SecurityRequirementObject> instance);
        {{> src/main/java/packagename/securityrequirementobjects/_SecurityRequirementObjectSetter methodName=jsonPathPiece.camelCase getBuilderMethod=(join "getBuilderAfter" jsonPathPiece.pascalCase "") }}
    }
{{/each}}
{{#each security.builders}}

    public static class {{className.pascalCase}} implements {{#unless @last}}GenericBuilder<Securities>{{#gt keyToBuilder.size 0}}, {{/gt}}{{/unless}}{{#each keyToBuilder}}SetterFor{{@key.pascalCase}}<{{builder.className.pascalCase}}>{{#unless @last}}, {{/unless}}{{/each}} {
        private final Map<SecurityIndex, SecurityRequirementObject> instance;
        {{#if @last }}
        public {{className.pascalCase}}() {
            this.instance = new HashMap<>();
        }
        {{else}}
        public {{className.pascalCase}}(Map<SecurityIndex, SecurityRequirementObject> instance) {
            this.instance = instance;
        }
        {{/if}}
        {{#unless @last}}
        public Securities build() {
            return new Securities(instance);
        }
        {{/unless}}
        {{#gt keyToBuilder.size 0}}
        public Map<SecurityIndex, SecurityRequirementObject> getInstance() {
            return instance;
        }
        {{/gt}}
        {{#each keyToBuilder}}
        public {{builder.className.pascalCase}} getBuilderAfter{{@key.pascalCase}}(Map<SecurityIndex, SecurityRequirementObject> instance) {
            {{#eq builder ../this}}
                {{! property in final builder }}
            return this;
            {{else}}
            return new {{builder.className.pascalCase}}(instance);
            {{/eq}}
        }
        {{/each}}
    }
{{/each}}

    public static class Securities {
        private final EnumMap<SecurityIndex, SecurityRequirementObject> securities;

        Securities(Map<SecurityIndex, SecurityRequirementObject> securityMap) {
            securities = new EnumMap<>(securityMap);
        }

        public SecurityRequirementObject get(SecurityIndex securityIndex) {
            if (securities.containsKey(securityIndex)) {
                return get(securityIndex);
            }
            throw new UnsetPropertyException(securityIndex+" is unset");
        }
    }

    public enum SecurityIndex {
        {{#each security}}
        SECURITY_{{@index}}{{#unless @last}},{{/unless}}
        {{/each}}
    }

    public SecurityRequirementObject getSecurityRequirementObject(@Nullable SecurityIndex securityIndex) {
        if (securityIndex == null) {
            return securities.get(this.securityIndex);
        }
        return securities.get(securityIndex);
    }
}