```
{{#with operation}}
    {{#each builders}}
        {{#or @first @last}}
            {{#each keyToBuilder}}
                {{#with property}}
                    {{#if containerJsonPathPiece}}
import {{packageName}}.{{subpackage}}.{{containerJsonPathPiece.pascalCase}};
                    {{else}}
                        {{#if this.jsonPathPiece}}
                            {{#if subpackage}}
import {{packageName}}.{{subpackage}}.{{jsonPathPiece.pascalCase}};
                            {{else}}
import {{packageName}}.{{jsonPathPiece.pascalCase}};
                            {{/if}}
                        {{/if}}
                    {{/if}}
                {{/with}}
            {{/each}}
        {{/or}}
    {{/each}}
    {{#each builders}}
        {{#if @first}}
            {{#each keyToBuilder}}
                {{#eq @key.camelCase "serverIndex"}}
                    {{#with property}}
                        {{! CodegenList of CodegenServer }}
                        {{#each this}}
import {{packageName}}.{{subpackage}}.{{jsonPathPiece.pascalCase}};
                        {{/each}}
                    {{/with}}
                {{/eq}}
                {{#eq @key.camelCase "securityIndex"}}
import {{packageName}}.securityschemes.SecurityScheme;
                    {{#with property}}
                        {{! CodegenList of SecurityRequirementObject }}
                        {{#each this}}
                            {{#each map}}
                                {{#with refInfo.ref}}
                                    {{! SecurityScheme }}
import {{packageName}}.components.securityschemes.{{jsonPathPiece.pascalCase}};
                                {{/with}}
                            {{/each}}
                        {{/each}}
                    {{/with}}
                {{/eq}}
            {{/each}}
        {{/if}}
    {{/each}}
import {{packageName}}.configurations.ApiConfiguration;
import {{packageName}}.configurations.SchemaConfiguration;
import {{packageName}}.configurations.JsonSchemaKeywordFlags;
import {{{packageName}}}.schemas.validation.MapUtils;
import {{{packageName}}}.schemas.validation.FrozenList;
import {{{packageName}}}.schemas.validation.FrozenMap;
import {{packageName}}.{{subpackage}}.{{jsonPathPiece.pascalCase}};

import java.util.Arrays;
import java.util.List;
import java.util.AbstractMap;

// if you want to use a sever that is not SERVER_0 pass it in here and change the ServerIndex input below
ApiConfiguration.ServerInfo serverInfo = new ApiConfiguration.ServerInfo(
    {{#each builders}}
        {{#if @first}}
            {{#each keyToBuilder}}
                {{#eq @key.camelCase "serverIndex"}}
                    {{#with property}}
                        {{! CodegenList of CodegenServer }}
                        {{#each this}}
                            {{#if @first}}
    new {{jsonPathPiece.pascalCase}}(){{#unless @last}},{{/unless}}
                            {{else}}
    null{{#unless @last}},{{/unless}}
                            {{/if}}
                        {{/each}}
                    {{/with}}
                {{/eq}}
            {{/each}}
        {{/if}}
    {{/each}}
);
ApiConfiguration.ServerIndexInfo serverIndexInfo = new ApiConfiguration.ServerIndexInfo()
    {{#each builders}}
        {{#if @first}}
            {{#each keyToBuilder}}
                {{#eq @key.camelCase "serverIndex"}}
                    {{#with property}}
                        {{! CodegenList of CodegenServer }}
    .{{jsonPathPiece.camelCase}}ServerIndex({{jsonPathPiece.pascalCase}}.ServerIndex.SERVER_0);
                    {{/with}}
                {{/eq}}
            {{/each}}
        {{/if}}
    {{/each}}
    {{#each builders}}
        {{#if @first}}
            {{#each keyToBuilder}}
                {{#eq @key.camelCase "securityIndex"}}
                    {{#with property}}
List<SecurityScheme> securitySchemes = new ArrayList();
                        {{! CodegenList of SecurityRequirementObject }}
                        {{#each this}}
                            {{#each map}}
                                {{#with refInfo.ref}}
{{> src/main/java/packagename/paths/path/verb/_OperationDocSSCodeSample }}
                                {{/with}}
                            {{/each}}
                        {{/each}}
ApiConfiguration.SecurityIndexInfo securityIndexInfo = new ApiConfiguration.SecurityIndexInfo();
    .{{jsonPathPiece.camelCase}}SecurityIndex({{jsonPathPiece.pascalCase}}.SecurityIndex.SECURITY_0);
                    {{/with}}
                {{/eq}}
            {{/each}}
        {{/if}}
    {{/each}}
Duration timeout = Duration.ofSeconds(1L);
ApiConfiguration apiConfiguration = new ApiConfiguration(
    serverInfo
    serverIndexInfo,
    {{#each builders}}
        {{#if @first}}
            {{#each keyToBuilder}}
                {{#eq @key.camelCase "securityIndex"}}
    securitySchemes,
    securityIndexInfo,
                {{/eq}}
            {{/each}}
        {{/if}}
    {{/each}}
    timeout
);
SchemaConfiguration schemaConfiguration = new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone());
{{jsonPathPiece.pascalCase}}.{{jsonPathPiece.pascalCase}}1 apiClient = new {{jsonPathPiece.pascalCase}}.{{jsonPathPiece.pascalCase}}1(apiConfiguration, schemaConfiguration);

    {{#each builders}}
        {{#if @last}}
            {{#each keyToBuilder}}
                {{#with property}}
                    {{#if containerJsonPathPiece}}
                        {{#each (reverse getSchemas)}}
                            {{#eq instanceType "schema"}}
{{> src/main/java/packagename/components/schemas/docschema_codeSample payloadVarName=../@key.camelCase configVarName="schemaConfiguration" }}
                            {{/eq}}
                        {{/each}}
                    {{else}}
// todo set sample for {{@key.camelCase}}
// {{jsonPathPiece.pascalCase}}
                    {{/if}}
                {{/with}}
            {{/each}}
        {{/if}}
    {{/each}}
{{/with}}
```