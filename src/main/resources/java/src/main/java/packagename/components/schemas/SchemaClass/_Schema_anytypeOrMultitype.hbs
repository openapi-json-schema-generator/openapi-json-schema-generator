

{{#if types}}
public static class {{jsonPathPiece.camelCase}} extends JsonSchema implements {{#each types}}{{#eq this "null"}}SchemaNullValidator{{else}}{{#eq this "boolean"}}SchemaBooleanValidator{{else}}{{#or (eq this "number") (eq this "integer")}}SchemaNumberValidator{{else}}{{#eq this "string"}}SchemaStringValidator{{else}}{{#eq this "array"}}SchemaListValidator<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}, {{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}, {{#if arrayOutputJsonPathPiece}}{{arrayOutputJsonPathPiece.camelCase}}{{else}}FrozenList<Object>{{/if}}>{{else}}{{#eq this "object"}}SchemaMapValidator<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}, {{#if mapOutputJsonPathPiece}}{{mapOutputJsonPathPiece.camelCase}}{{else}}FrozenMap<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}>{{/if}}>{{/eq}}{{/eq}}{{/eq}}{{/or}}{{/eq}}{{/eq}}{{#unless @last}}, {{/unless}}{{/each}} {
{{else}}
public static class {{jsonPathPiece.camelCase}} extends JsonSchema implements SchemaNullValidator, SchemaBooleanValidator, SchemaNumberValidator, SchemaStringValidator, SchemaListValidator<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}, {{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}, {{#if arrayOutputJsonPathPiece}}{{arrayOutputJsonPathPiece.camelCase}}{{else}}FrozenList<Object>{{/if}}>, SchemaMapValidator<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_cast_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}, {{#if mapOutputJsonPathPiece}}{{mapOutputJsonPathPiece.camelCase}}{{else}}FrozenMap<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}>{{/if}}> {
{{/if}}
{{#if componentModule}}
    /*
    NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    {{#if description}}

    {{{description.original}}}
    {{/if}}
    */
{{/if}}
    private static {{jsonPathPiece.camelCase}} instance;
    {{#each keywords}}
        {{#if @first}}
    protected {{../jsonPathPiece.camelCase}}() {
        super(new LinkedHashMap<>(Map.ofEntries(
        {{/if}}
        {{#eq this "type"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_types }}
        {{/eq}}
        {{#eq this "format"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_format }}
        {{/eq}}
        {{#eq this "items"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_items }}
        {{/eq}}
        {{#eq this "properties"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_properties }}
        {{/eq}}
        {{#eq this "required"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_required }}
        {{/eq}}
        {{#eq this "exclusiveMaximum"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_exclusiveMaximum }}
        {{/eq}}
        {{#eq this "exclusiveMinimum"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_exclusiveMinimum }}
        {{/eq}}
        {{#eq this "maxItems"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_maxItems }}
        {{/eq}}
        {{#eq this "minItems"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_minItems }}
        {{/eq}}
        {{#eq this "maxLength"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_maxLength }}
        {{/eq}}
        {{#eq this "minLength"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_minLength }}
        {{/eq}}
        {{#eq this "maxProperties"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_maxProperties }}
        {{/eq}}
        {{#eq this "minProperties"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_minProperties }}
        {{/eq}}
        {{#eq this "maximum"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_maximum }}
        {{/eq}}
        {{#eq this "minimum"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_minimum }}
        {{/eq}}
        {{#eq this "multipleOf"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_multipleOf }}
        {{/eq}}
        {{#eq this "additionalProperties"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_additionalProperties }}
        {{/eq}}
        {{#eq this "allOf"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_allOf }}
        {{/eq}}
        {{#eq this "anyOf"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_anyOf }}
        {{/eq}}
        {{#eq this "oneOf"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_oneOf }}
        {{/eq}}
        {{#eq this "not"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_not }}
        {{/eq}}
        {{#eq this "uniqueItems"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_uniqueItems }}
        {{/eq}}
        {{#eq this "enum"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_enum }}
        {{/eq}}
        {{#eq this "pattern"}}
            {{> src/main/java/packagename/components/schemas/SchemaClass/_pattern }}
        {{/eq}}
        {{#if @last}}
        )));
    }
        {{/if}}
    {{/each}}

    public static {{jsonPathPiece.camelCase}} getInstance() {
        if (instance == null) {
            instance = new {{jsonPathPiece.camelCase}}();
        }
        return instance;
    }
{{#if constInfo}}
    {{!> components/schemas/schema_cls/_const }}
{{/if}}
{{#if prefixItems}}
    {{!> components/schemas/schema_cls/_prefix_items }}
{{/if}}
{{#if contains}}
    {{!> components/schemas/schema_cls/_contains }}
{{/if}}
{{#if hasDiscriminatorWithNonEmptyMapping}}
    {{!> components/schemas/schema_cls/_discriminator }}
{{/if}}
{{#if if_}}
    {{!> components/schemas/schema_cls/_if }}
{{/if}}
{{#if then}}
    {{!> components/schemas/schema_cls/_then }}
{{/if}}
{{#if else_}}
    {{!> components/schemas/schema_cls/_else }}
{{/if}}
{{#if dependentRequired}}
    {{!> components/schemas/schema_cls/_dependent_required }}
{{/if}}
{{#if dependentSchemas}}
    {{!> components/schemas/schema_cls/_dependent_schemas }}
{{/if}}
{{#if propertyNames}}
    {{!> components/schemas/schema_cls/_property_names }}
{{/if}}
{{#if patternProperties}}
    {{!> components/schemas/schema_cls/_pattern_properties }}
{{/if}}
{{#if unevaluatedProperties}}
    {{!> components/schemas/schema_cls/_unevaluated_properties }}
{{/if}}
{{#if unevaluatedItems}}
    {{!> components/schemas/schema_cls/_unevaluated_items }}
{{/if}}
{{#or mapOutputJsonPathPiece arrayOutputJsonPathPiece}}
{{/or}}
    {{> src/main/java/packagename/components/schemas/SchemaClass/_validate_implementor }}
    {{> src/main/java/packagename/components/schemas/SchemaClass/_castToAllowedTypesObject_implementor }}
}