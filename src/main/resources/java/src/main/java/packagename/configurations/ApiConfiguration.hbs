package {{{packageName}}}.configurations;

import {{{packageName}}}.servers.Server;
{{#each allServers}}
    {{#if subpackage}}
import {{{packageName}}}.{{subpackage}}.{{jsonPathPiece.pascalCase}};
    {{else}}
import {{packageName}}.{{jsonPathPiece.pascalCase}};
    {{/if}}
{{/each}}
import org.checkerframework.checker.nullness.qual.Nullable;

import java.util.Objects;

public class ApiConfiguration {
    private final ServerInfo serverInfo;

    public ApiConfiguration() {
        serverInfo = new ServerInfo();
    }

    public ApiConfiguration(ServerInfo serverInfo) {
        this.serverInfo = serverInfo;
    }

    public static class ServerInfo {
    {{#each allServers}}
        protected final {{jsonPathPiece.pascalCase}} {{jsonPathPiece.camelCase}};
    {{/each}}

        public ServerInfo() {
    {{#each allServers}}
            {{jsonPathPiece.camelCase}} = new {{jsonPathPiece.pascalCase}}();
    {{/each}}
        }

        public ServerInfo(
    {{#each allServers}}
            @Nullable {{jsonPathPiece.pascalCase}} {{jsonPathPiece.camelCase}}{{#unless @last}},{{/unless}}
    {{/each}}
        ) {
    {{#each allServers}}
            this.{{jsonPathPiece.camelCase}} = Objects.requireNonNullElseGet({{jsonPathPiece.camelCase}}, {{jsonPathPiece.pascalCase}}::new);
    {{/each}}
        }
    }

    {{#each allServers}}
    public Server getServer({{jsonPathPiece.pascalCase}}. @Nullable ServerIndex serverIndex) {
        return serverInfo.{{jsonPathPiece.camelCase}}.getServer(serverIndex);
    }
    {{/each}}
}