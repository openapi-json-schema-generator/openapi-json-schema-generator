package {{{packageName}}}.configurations;

{{#gt allSecurity.size 0}}
import {{{packageName}}}.exceptions.UnsetPropertyException;
import {{{packageName}}}.securityrequirementobjects.SecurityRequirementObject;
{{/gt}}
import {{{packageName}}}.servers.Server;
{{#each allServers}}
    {{#if subpackage}}
import {{{packageName}}}.{{subpackage}}.{{jsonPathPiece.pascalCase}};
    {{else}}
import {{packageName}}.{{jsonPathPiece.pascalCase}};
    {{/if}}
{{/each}}
{{#each allSecurity}}
    {{#if subpackage}}
import {{{packageName}}}.{{subpackage}}.{{jsonPathPiece.pascalCase}};
    {{else}}
import {{packageName}}.{{jsonPathPiece.pascalCase}};
    {{/if}}
{{/each}}
{{#if securitySchemes}}
import {{packageName}}.securityschemes.SecurityScheme;
{{/if}}
import org.checkerframework.checker.nullness.qual.Nullable;

import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.HashMap;

public class ApiConfiguration {
    private final ServerInfo serverInfo;
    {{#gt allSecurity.size 0}}
    private final SecurityInfo securityInfo;
    private final SecurityIndexInfo securityIndexInfo;
    {{/gt}}
    private final @Nullable Duration timeout;
    {{#if securitySchemes}}
    private final Map<Class<? extends SecurityScheme>, SecurityScheme> securitySchemeInfo;
    {{/if}}

    public ApiConfiguration() {
        serverInfo = new ServerInfo();
    {{#gt allSecurity.size 0}}
        securityInfo = new SecurityInfo();
        securityIndexInfo = new SecurityIndexInfo();
    {{/gt}}
    {{#if securitySchemes}}
        securitySchemeInfo = new HashMap<>();
    {{/if}}
        timeout = null;
    }

    public ApiConfiguration(ServerInfo serverInfo{{#gt allSecurity.size 0}}, SecurityIndexInfo securityIndexInfo{{/gt}}{{#if securitySchemes}}, List<SecurityScheme> securitySchemes{{/if}}, Duration timeout) {
        this.serverInfo = serverInfo;
    {{#gt allSecurity.size 0}}
        this.securityInfo = new SecurityInfo();
        this.securityIndexInfo = securityIndexInfo;
    {{/gt}}
    {{#if securitySchemes}}
        securitySchemeInfo = new HashMap<>();
        for (SecurityScheme securityScheme: securitySchemes) {
            securitySchemeInfo.put(securityScheme.getClass(), securityScheme);
        }
    {{/if}}
        this.timeout = timeout;
    }

    public static class ServerInfo {
    {{#each allServers}}
        protected final {{jsonPathPiece.pascalCase}} {{jsonPathPiece.camelCase}};
    {{/each}}

        public ServerInfo() {
    {{#each allServers}}
            {{jsonPathPiece.camelCase}} = new {{jsonPathPiece.pascalCase}}();
    {{/each}}
        }

        public ServerInfo(
    {{#each allServers}}
            @Nullable {{jsonPathPiece.pascalCase}} {{jsonPathPiece.camelCase}}{{#unless @last}},{{/unless}}
    {{/each}}
        ) {
    {{#each allServers}}
            this.{{jsonPathPiece.camelCase}} = Objects.requireNonNullElseGet({{jsonPathPiece.camelCase}}, {{jsonPathPiece.pascalCase}}::new);
    {{/each}}
        }
    }

    {{#each allServers}}
    public Server getServer({{jsonPathPiece.pascalCase}}. @Nullable ServerIndex serverIndex) {
        return serverInfo.{{jsonPathPiece.camelCase}}.getServer(serverIndex);
    }
    {{/each}}
    {{#gt allSecurity.size 0}}

    public static class SecurityInfo {
        {{#each allSecurity}}
        protected final {{jsonPathPiece.pascalCase}}.{{jsonPathPiece.pascalCase}}1 {{jsonPathPiece.camelCase}};
        {{/each}}

        public SecurityInfo() {
        {{#each allSecurity}}
            this.{{jsonPathPiece.camelCase}} = new {{jsonPathPiece.pascalCase}}.{{jsonPathPiece.pascalCase}}1();
        {{/each}}
        }
    }

    public static class SecurityIndexInfo {
        {{#each allSecurity}}
        protected {{jsonPathPiece.pascalCase}}. @Nullable SecurityIndex {{jsonPathPiece.camelCase}}SecurityIndex;
        {{/each}}

        public SecurityIndexInfo() {}
        {{#each allSecurity}}

        public SecurityIndexInfo {{jsonPathPiece.camelCase}}SecurityIndex({{jsonPathPiece.pascalCase}}.SecurityIndex securityIndex) {
            this.{{jsonPathPiece.camelCase}}SecurityIndex = securityIndex;
            return this;
        }
        {{/each}}
    }

        {{#each allSecurity}}
    public SecurityRequirementObject getSecurityRequirementObject({{jsonPathPiece.pascalCase}}. @Nullable SecurityIndex securityIndex) throws UnsetPropertyException {
        var securityInfoInstance = securityInfo.{{jsonPathPiece.camelCase}};
        if (securityIndex == null) {
            {{jsonPathPiece.pascalCase}}. @Nullable SecurityIndex configSecurityIndex = securityIndexInfo.{{jsonPathPiece.camelCase}}SecurityIndex;
            if (configSecurityIndex == null) {
                throw new UnsetPropertyException("{{jsonPathPiece.camelCase}}SecurityIndex is unset");
            }
            return securityInfoInstance.getSecurityRequirementObject(configSecurityIndex);
        }
        return securityInfoInstance.getSecurityRequirementObject(securityIndex);
    }
        {{/each}}
    {{/gt}}
    {{#if securitySchemes}}

    public SecurityScheme getSecurityScheme(Class<? extends SecurityScheme> securitySchemeClass) {
        @Nullable SecurityScheme securityScheme = securitySchemeInfo.get(securitySchemeClass);
        if (securityScheme == null) {
            throw new RuntimeException("SecurityScheme of class " + securitySchemeClass + "cannot be returned because it is unset. Pass in an instance of it in securitySchemes when instantiating ApiConfiguration.");
        }
        return securityScheme;
    }
    {{/if}}

    public Map<String, List< String>> getDefaultHeaders() {
        return new HashMap<>();
    }

    public@Nullable Duration getTimeout() {
        return timeout;
    }
}