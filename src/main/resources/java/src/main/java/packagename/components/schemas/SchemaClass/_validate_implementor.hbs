{{#if types}}
    {{#each types}}
        {{#eq this "null"}}

@Override
public Void validate(Void arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    Void castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}
        {{/eq}}
        {{#eq this "object"}}

public {{#if ../mapOutputJsonPathPiece}}{{../mapOutputJsonPathPiece.camelCase}}{{else}}FrozenMap<Object>{{/if}} getNewInstance(Map<?, ?> arg, List<Object> pathToItem, PathToSchemasMap pathToSchemas) {
    LinkedHashMap<String, {{#with ../mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> properties = new LinkedHashMap<>();
    for(Map.Entry<?, ?> entry: arg.entrySet()) {
        String propertyName = (String) entry.getKey();
        List<Object> propertyPathToItem = new ArrayList<>(pathToItem);
        propertyPathToItem.add(propertyName);
        Object value = entry.getValue();
        JsonSchema propertySchema = pathToSchemas.get(propertyPathToItem).entrySet().iterator().next().getKey();
        {{#with ../mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}} castValue = ({{#with ../mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}) propertySchema.getNewInstance(value, propertyPathToItem, pathToSchemas);
        properties.put(propertyName, castValue);
    }
    FrozenMap<{{#with ../mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> castProperties = new FrozenMap<>(properties);
            {{#if ../mapOutputJsonPathPiece}}
    return new {{mapOutputJsonPathPiece.camelCase}}(castProperties);
            {{else}}
    return castProperties;
            {{/if}}
}

@Override
public {{#if ../mapOutputJsonPathPiece}}{{../mapOutputJsonPathPiece.camelCase}}{{else}}FrozenMap<Object>{{/if}} validate(Map<String, {{#with ../mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> arg, SchemaConfiguration configuration) throws ValidationException, InvalidTypeException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    Map<?, ?> castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    PathToSchemasMap pathToSchemasMap = getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return getNewInstance(castArg, validationMetadata.pathToItem(), pathToSchemasMap);
}

        {{/eq}}
        {{#eq this "array"}}

@Override
public {{#if ../arrayOutputJsonPathPiece}}{{../arrayOutputJsonPathPiece.camelCase}}{{else}}FrozenList<{{#with ../items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}>{{/if}} getNewInstance(List<?> arg, List<Object> pathToItem, PathToSchemasMap pathToSchemas) {
    List<{{#with ../items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> items = new ArrayList<>();
    int i = 0;
    for (Object item: arg) {
        List<Object> itemPathToItem = new ArrayList<>(pathToItem);
        itemPathToItem.add(i);
        JsonSchema itemSchema = pathToSchemas.get(itemPathToItem).entrySet().iterator().next().getKey();
        {{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}} castItem = ({{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}) itemSchema.getNewInstance(item, itemPathToItem, pathToSchemas);
        items.add(castItem);
        i += 1;
    }
    FrozenList<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> newInstanceItems = new FrozenList<>(items);
            {{#if ../arrayOutputJsonPathPiece}}
    return new {{../arrayOutputJsonPathPiece.camelCase}}(newInstanceItems);
            {{else}}
    return newInstanceItems;
            {{/if}}
}

@Override
public {{#if ../arrayOutputJsonPathPiece}}{{../arrayOutputJsonPathPiece.camelCase}}{{else}}FrozenList<{{#with ../items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}>{{/if}} validate(List<{{#with ../items}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    List<?> castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    PathToSchemasMap pathToSchemasMap = getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return getNewInstance(castArg, validationMetadata.pathToItem(), pathToSchemasMap);
}
        {{/eq}}
        {{#eq this "string" }}
            {{#eq ../format "binary"}}
// FileIO,
// bytes,
            {{else}}

@Override
public String validate(String arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    String castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}
            {{/eq}}
        {{/eq}}
        {{#eq this "integer"}}

@Override
public Number validate(Number arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    Number castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}

public int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return (int) validate((Number) arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return (float) validate((Number) arg, configuration);
}
            {{#neq ../format "int32"}}

public long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return (long) validate((Number) arg, configuration);
}

public double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return (double) validate((Number) arg, configuration);
}
            {{/neq}}
        {{/eq}}
        {{#eq this "number"}}

@Override
public Number validate(Number arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    Number castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    PathToSchemasMap pathToSchemasMap = getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}
            {{#eq ../format null}}
public int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return (int) validate((Number) arg, configuration);
}

public long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return (long) validate((Number) arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return (float) validate((Number) arg, configuration);
}

public double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return (double) validate((Number) arg, configuration);
}
            {{else}}
                {{#eq ../format "int32"}}
public int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return (int) validate((Number) arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return (float) validate((Number) arg, configuration);
}
                {{else}}
                    {{#eq ../format "int64"}}
public int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return (int) validate((Number) arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return (float) validate((Number) arg, configuration);
}

public long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return (long) validate((Number) arg, configuration);
}

public double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return (double) validate((Number) arg, configuration);
}
                    {{else}}
                        {{#eq ../format "float"}}
public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return (float) validate((Number) arg, configuration);
}
                        {{else}}
                            {{#eq ../format "double"}}
public double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return (double) validate((Number) arg, configuration);
}
                            {{/eq}}
                        {{/eq}}
                    {{/eq}}
                {{/eq}}
            {{/eq}}
        {{/eq}}
        {{#eq this "boolean"}}

@Override
public boolean validate(boolean arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    boolean castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}
        {{/eq}}
    {{/each}}
{{else}}

@Override
public Void validate(Void arg, SchemaConfiguration configuration) throws ValidationException, InvalidTypeException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = new ArrayList<>();
    pathToItem.add("args[0]");
    Void castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone()));
    PathToSchemasMap validatedPathToSchemas = new PathToSchemasMap();
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, validatedPathToSchemas, new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}

@Override
public boolean validate(boolean arg, SchemaConfiguration configuration) throws ValidationException, InvalidTypeException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = new ArrayList<>();
    pathToItem.add("args[0]");
    boolean castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone()));
    PathToSchemasMap validatedPathToSchemas = new PathToSchemasMap();
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, validatedPathToSchemas, new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}

@Override
public Number validate(Number arg, SchemaConfiguration configuration) throws ValidationException, InvalidTypeException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = new ArrayList<>();
    pathToItem.add("args[0]");
    Number castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone()));
    PathToSchemasMap validatedPathToSchemas = new PathToSchemasMap();
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, validatedPathToSchemas, new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}

public int validate(int arg, SchemaConfiguration configuration) {
    return (int) validate((Number) arg, configuration);
}

public long validate(long arg, SchemaConfiguration configuration) {
    return (long) validate((Number) arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) {
    return (float) validate((Number) arg, configuration);
}

public double validate(double arg, SchemaConfiguration configuration) {
    return (double) validate((Number) arg, configuration);
}

@Override
public String validate(String arg, SchemaConfiguration configuration) throws ValidationException, InvalidTypeException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = new ArrayList<>();
    pathToItem.add("args[0]");
    String castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone()));
    PathToSchemasMap validatedPathToSchemas = new PathToSchemasMap();
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, validatedPathToSchemas, new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}

public String validate(LocalDate arg, SchemaConfiguration configuration) throws ValidationException {
    return validate(arg.toString(), configuration);
}

public String validate(ZonedDateTime arg, SchemaConfiguration configuration) throws ValidationException {
    return validate(arg.toString(), configuration);
}

public String validate(UUID arg, SchemaConfiguration configuration) throws ValidationException {
    return validate(arg.toString(), configuration);
}

@Override
public {{#if arrayOutputJsonPathPiece}}{{arrayOutputJsonPathPiece.camelCase}}{{else}}FrozenList<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}>{{/if}} getNewInstance(List<?> arg, List<Object> pathToItem, PathToSchemasMap pathToSchemas) {
    List<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> items = new ArrayList<>();
    int i = 0;
    for (Object item: arg) {
        List<Object> itemPathToItem = new ArrayList<>(pathToItem);
        itemPathToItem.add(i);
        JsonSchema itemSchema = pathToSchemas.get(itemPathToItem).entrySet().iterator().next().getKey();
        {{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}} castItem = ({{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}) itemSchema.getNewInstance(item, itemPathToItem, pathToSchemas);
        items.add(castItem);
        i += 1;
    }
    FrozenList<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> newInstanceItems = new FrozenList<>(items);
            {{#if arrayOutputJsonPathPiece}}
    return new {{arrayOutputJsonPathPiece.camelCase}}(newInstanceItems);
            {{else}}
    return newInstanceItems;
            {{/if}}
}

@Override
public {{#if arrayOutputJsonPathPiece}}{{arrayOutputJsonPathPiece.camelCase}}{{else}}FrozenList<{{#with ../items}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}>{{/if}} validate(List<{{#with items}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    List<?> castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    PathToSchemasMap pathToSchemasMap = getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return getNewInstance(castArg, validationMetadata.pathToItem(), pathToSchemasMap);
}

@Override
public {{#if mapOutputJsonPathPiece}}{{mapOutputJsonPathPiece.camelCase}}{{else}}FrozenMap<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}>{{/if}} getNewInstance(Map<?, ?> arg, List<Object> pathToItem, PathToSchemasMap pathToSchemas) {
    LinkedHashMap<String, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> properties = new LinkedHashMap<>();
    for(Map.Entry<?, ?> entry: arg.entrySet()) {
        String propertyName = (String) entry.getKey();
        List<Object> propertyPathToItem = new ArrayList<>(pathToItem);
        propertyPathToItem.add(propertyName);
        Object value = entry.getValue();
        JsonSchema propertySchema = pathToSchemas.get(propertyPathToItem).entrySet().iterator().next().getKey();
        {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}} castValue = ({{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}) propertySchema.getNewInstance(value, propertyPathToItem, pathToSchemas);
        properties.put(propertyName, castValue);
    }
    FrozenMap<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> castProperties = new FrozenMap<>(properties);
            {{#if ../mapOutputJsonPathPiece}}
    return new {{mapOutputJsonPathPiece.camelCase}}(castProperties);
            {{else}}
    return castProperties;
            {{/if}}
}

@Override
public {{#if mapOutputJsonPathPiece}}{{mapOutputJsonPathPiece.camelCase}}{{else}}FrozenMap<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}>{{/if}} validate(Map<String, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}Object{{/with}}> arg, SchemaConfiguration configuration) throws ValidationException, InvalidTypeException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = new ArrayList<>();
    pathToItem.add("args[0]");
    Map<?, ?> castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone()));
    PathToSchemasMap validatedPathToSchemas = new PathToSchemasMap();
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, validatedPathToSchemas, new LinkedHashSet<>());
    PathToSchemasMap pathToSchemasMap = getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return getNewInstance(castArg, validationMetadata.pathToItem(), pathToSchemasMap);
}
{{/if}}