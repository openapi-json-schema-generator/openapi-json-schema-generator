{{#if types}}
    {{#each types}}
        {{#eq this "null"}}

@Override
public Void validate(Void arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    Void castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(new JsonSchemaKeywordFlags.Builder().build()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}
        {{/eq}}
        {{#eq this "object"}}

public {{#if ../mapOutputJsonPathPiece}}{{../mapOutputJsonPathPiece.pascalCase}}{{else}}FrozenMap<@Nullable Object>{{/if}} getNewInstance(Map<?, ?> arg, List<Object> pathToItem, PathToSchemasMap pathToSchemas) {
    LinkedHashMap<String, {{#with ../mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}> properties = new LinkedHashMap<>();
    for(Map.Entry<?, ?> entry: arg.entrySet()) {
        @Nullable Object entryKey = entry.getKey();
        if (!(entryKey instanceof String)) {
            throw new RuntimeException("Invalid non-string key value");
        }
        String propertyName = (String) entryKey;
        List<Object> propertyPathToItem = new ArrayList<>(pathToItem);
        propertyPathToItem.add(propertyName);
        Object value = entry.getValue();
        LinkedHashMap<JsonSchema<?>, Void> schemas = pathToSchemas.get(propertyPathToItem);
        if (schemas == null) {
            throw new RuntimeException("Validation result is invalid, schemas must exist for a pathToItem");
        }
        JsonSchema<?> propertySchema = schemas.entrySet().iterator().next().getKey();
        @Nullable Object propertyInstance = propertySchema.getNewInstance(value, propertyPathToItem, pathToSchemas);
        {{#if ../mapValueSchema}}
            {{#if ../mapValueSchema.isNullableObject }}
        properties.put(propertyName, propertyInstance);
            {{else}}
        if (!({{#contains ../mapValueSchema.types "null" }}propertyInstance == null || {{/contains}}propertyInstance instanceof {{#with ../mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true noAnnotations=true }}{{else}}Object{{/with}})) {
            throw new RuntimeException("Invalid instantiated value");
        }
        properties.put(propertyName, ({{#with ../mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}) propertyInstance);
            {{/if}}
        {{else}}
        properties.put(propertyName, propertyInstance);
        {{/if}}
    }
    FrozenMap<{{#with ../mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}> castProperties = new FrozenMap<>(properties);
            {{#if ../mapOutputJsonPathPiece}}
    return new {{mapOutputJsonPathPiece.pascalCase}}(castProperties);
            {{else}}
    return castProperties;
            {{/if}}
}

public {{#if ../mapOutputJsonPathPiece}}{{../mapOutputJsonPathPiece.pascalCase}}{{else}}FrozenMap<@Nullable Object>{{/if}} validate(Map<?, ?> arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    Map<?, ?> castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(new JsonSchemaKeywordFlags.Builder().build()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    PathToSchemasMap pathToSchemasMap = getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return getNewInstance(castArg, validationMetadata.pathToItem(), pathToSchemasMap);
}

        {{/eq}}
        {{#eq this "array"}}

@Override
public {{#if ../arrayOutputJsonPathPiece}}{{../arrayOutputJsonPathPiece.pascalCase}}{{else}}FrozenList<{{#with ../listItemSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}>{{/if}} getNewInstance(List<?> arg, List<Object> pathToItem, PathToSchemasMap pathToSchemas) {
    List<{{#with ../listItemSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}> items = new ArrayList<>();
    int i = 0;
    for (Object item: arg) {
        List<Object> itemPathToItem = new ArrayList<>(pathToItem);
        itemPathToItem.add(i);
        LinkedHashMap<JsonSchema<?>, Void> schemas = pathToSchemas.get(itemPathToItem);
        if (schemas == null) {
            throw new RuntimeException("Validation result is invalid, schemas must exist for a pathToItem");
        }
        JsonSchema<?> itemSchema = schemas.entrySet().iterator().next().getKey();
        @Nullable Object itemInstance = itemSchema.getNewInstance(item, itemPathToItem, pathToSchemas);
        {{#if ../listItemSchema}}
            {{#if ../listItemSchema.isNullableObject }}
        items.add(itemInstance);
            {{else}}
        if (!({{#contains ../listItemSchema.types "null" }}itemInstance == null || {{/contains}}itemInstance instanceof {{#with ../listItemSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true noAnnotations=true }}{{else}}Object{{/with}})) {
            throw new RuntimeException("Invalid instantiated value");
        }
        items.add(({{#with ../listItemSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}) itemInstance);
            {{/if}}
        {{else}}
        items.add(itemInstance);
        {{/if}}
        i += 1;
    }
    FrozenList<{{#with listItemSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}> newInstanceItems = new FrozenList<>(items);
            {{#if ../arrayOutputJsonPathPiece}}
    return new {{../arrayOutputJsonPathPiece.pascalCase}}(newInstanceItems);
            {{else}}
    return newInstanceItems;
            {{/if}}
}

public {{#if ../arrayOutputJsonPathPiece}}{{../arrayOutputJsonPathPiece.pascalCase}}{{else}}FrozenList<{{#with ../listItemSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}>{{/if}} validate(List<?> arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    List<?> castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(new JsonSchemaKeywordFlags.Builder().build()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    PathToSchemasMap pathToSchemasMap = getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return getNewInstance(castArg, validationMetadata.pathToItem(), pathToSchemasMap);
}
        {{/eq}}
        {{#eq this "string" }}
            {{#eq ../format "binary"}}
// FileIO,
// bytes,
            {{else}}

@Override
public String validate(String arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    String castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(new JsonSchemaKeywordFlags.Builder().build()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}
            {{/eq}}
        {{/eq}}
        {{#eq this "integer"}}

@Override
public Number validate(Number arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    Number castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(new JsonSchemaKeywordFlags.Builder().build()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}

public int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return (int) validate((Number) arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return (float) validate((Number) arg, configuration);
}
            {{#neq ../format "int32"}}

public long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return (long) validate((Number) arg, configuration);
}

public double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return (double) validate((Number) arg, configuration);
}
            {{/neq}}
        {{/eq}}
        {{#eq this "number"}}

@Override
public Number validate(Number arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    Number castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(new JsonSchemaKeywordFlags.Builder().build()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    PathToSchemasMap pathToSchemasMap = getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}
            {{#eq ../format null}}

public int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return (int) validate((Number) arg, configuration);
}

public long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return (long) validate((Number) arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return (float) validate((Number) arg, configuration);
}

public double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return (double) validate((Number) arg, configuration);
}
            {{else}}
                {{#eq ../format "int32"}}
public int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return (int) validate((Number) arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return (float) validate((Number) arg, configuration);
}
                {{else}}
                    {{#eq ../format "int64"}}
public int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return (int) validate((Number) arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return (float) validate((Number) arg, configuration);
}

public long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return (long) validate((Number) arg, configuration);
}

public double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return (double) validate((Number) arg, configuration);
}
                    {{else}}
                        {{#eq ../format "float"}}
public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return (float) validate((Number) arg, configuration);
}
                        {{else}}
                            {{#eq ../format "double"}}
public double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return (double) validate((Number) arg, configuration);
}
                            {{/eq}}
                        {{/eq}}
                    {{/eq}}
                {{/eq}}
            {{/eq}}
        {{/eq}}
        {{#eq this "boolean"}}

@Override
public boolean validate(boolean arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    boolean castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(new JsonSchemaKeywordFlags.Builder().build()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}
        {{/eq}}
    {{/each}}
{{else}}

@Override
public Void validate(Void arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0]");
    Void castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(new JsonSchemaKeywordFlags.Builder().build()));
    PathToSchemasMap validatedPathToSchemas = new PathToSchemasMap();
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, validatedPathToSchemas, new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}

@Override
public boolean validate(boolean arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0]");
    boolean castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(new JsonSchemaKeywordFlags.Builder().build()));
    PathToSchemasMap validatedPathToSchemas = new PathToSchemasMap();
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, validatedPathToSchemas, new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}

@Override
public Number validate(Number arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0]");
    Number castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(new JsonSchemaKeywordFlags.Builder().build()));
    PathToSchemasMap validatedPathToSchemas = new PathToSchemasMap();
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, validatedPathToSchemas, new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}

public int validate(int arg, SchemaConfiguration configuration) throws ValidationException {
    return (int) validate((Number) arg, configuration);
}

public long validate(long arg, SchemaConfiguration configuration) throws ValidationException {
    return (long) validate((Number) arg, configuration);
}

public float validate(float arg, SchemaConfiguration configuration) throws ValidationException {
    return (float) validate((Number) arg, configuration);
}

public double validate(double arg, SchemaConfiguration configuration) throws ValidationException {
    return (double) validate((Number) arg, configuration);
}

@Override
public String validate(String arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0]");
    String castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(new JsonSchemaKeywordFlags.Builder().build()));
    PathToSchemasMap validatedPathToSchemas = new PathToSchemasMap();
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, validatedPathToSchemas, new LinkedHashSet<>());
    getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return castArg;
}

public String validate(LocalDate arg, SchemaConfiguration configuration) throws ValidationException {
    return validate(arg.toString(), configuration);
}

public String validate(ZonedDateTime arg, SchemaConfiguration configuration) throws ValidationException {
    return validate(arg.toString(), configuration);
}

public String validate(UUID arg, SchemaConfiguration configuration) throws ValidationException {
    return validate(arg.toString(), configuration);
}

@Override
public {{#if arrayOutputJsonPathPiece}}{{arrayOutputJsonPathPiece.pascalCase}}{{else}}FrozenList<{{#with listItemSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}>{{/if}} getNewInstance(List<?> arg, List<Object> pathToItem, PathToSchemasMap pathToSchemas) {
    List<{{#with listItemSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}> items = new ArrayList<>();
    int i = 0;
    for (Object item: arg) {
        List<Object> itemPathToItem = new ArrayList<>(pathToItem);
        itemPathToItem.add(i);
        LinkedHashMap<JsonSchema<?>, Void> schemas = pathToSchemas.get(itemPathToItem);
        if (schemas == null) {
            throw new RuntimeException("Validation result is invalid, schemas must exist for a pathToItem");
        }
        JsonSchema<?> itemSchema = schemas.entrySet().iterator().next().getKey();
        @Nullable Object itemInstance = itemSchema.getNewInstance(item, itemPathToItem, pathToSchemas);
        {{#if listItemSchema}}
            {{#if listItemSchema.isNullableObject }}
        items.add(itemInstance);
            {{else}}
        if (!({{#contains listItemSchema.types "null" }}itemInstance == null || {{/contains}}itemInstance instanceof {{#with listItemSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true noAnnotations=true }}{{else}}Object{{/with}})) {
            throw new RuntimeException("Invalid instantiated value");
        }
        items.add(({{#with listItemSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}) itemInstance);
            {{/if}}
        {{else}}
        items.add(itemInstance);
        {{/if}}
        i += 1;
    }
    FrozenList<{{#with listItemSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}> newInstanceItems = new FrozenList<>(items);
            {{#if arrayOutputJsonPathPiece}}
    return new {{arrayOutputJsonPathPiece.pascalCase}}(newInstanceItems);
            {{else}}
    return newInstanceItems;
            {{/if}}
}

public {{#if arrayOutputJsonPathPiece}}{{arrayOutputJsonPathPiece.pascalCase}}{{else}}FrozenList<{{#with ../listItemSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}>{{/if}} validate(List<?> arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0");
    List<?> castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(new JsonSchemaKeywordFlags.Builder().build()));
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
    PathToSchemasMap pathToSchemasMap = getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return getNewInstance(castArg, validationMetadata.pathToItem(), pathToSchemasMap);
}

@Override
public {{#if mapOutputJsonPathPiece}}{{mapOutputJsonPathPiece.pascalCase}}{{else}}FrozenMap<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}>{{/if}} getNewInstance(Map<?, ?> arg, List<Object> pathToItem, PathToSchemasMap pathToSchemas) {
    LinkedHashMap<String, {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}> properties = new LinkedHashMap<>();
    for(Map.Entry<?, ?> entry: arg.entrySet()) {
        @Nullable Object entryKey = entry.getKey();
        if (!(entryKey instanceof String)) {
            throw new RuntimeException("Invalid non-string key value");
        }
        String propertyName = (String) entryKey;
        List<Object> propertyPathToItem = new ArrayList<>(pathToItem);
        propertyPathToItem.add(propertyName);
        Object value = entry.getValue();
        LinkedHashMap<JsonSchema<?>, Void> schemas = pathToSchemas.get(propertyPathToItem);
        if (schemas == null) {
            throw new RuntimeException("Validation result is invalid, schemas must exist for a pathToItem");
        }
        JsonSchema<?> propertySchema = schemas.entrySet().iterator().next().getKey();
        @Nullable Object propertyInstance = propertySchema.getNewInstance(value, propertyPathToItem, pathToSchemas);
        {{#if mapValueSchema}}
            {{#if mapValueSchema.isNullableObject }}
        properties.put(propertyName, propertyInstance);
            {{else}}
        if (!({{#contains mapValueSchema.types "null" }}propertyInstance == null || {{/contains}}propertyInstance instanceof {{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true noAnnotations=true }}{{else}}Object{{/with}})) {
            throw new RuntimeException("Invalid instantiated value");
        }
        properties.put(propertyName, ({{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}) propertyInstance);
            {{/if}}
        {{else}}
        properties.put(propertyName, propertyInstance);
        {{/if}}
    }
    FrozenMap<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}@Nullable Object{{/with}}> castProperties = new FrozenMap<>(properties);
            {{#if ../mapOutputJsonPathPiece}}
    return new {{mapOutputJsonPathPiece.pascalCase}}(castProperties);
            {{else}}
    return castProperties;
            {{/if}}
}

public {{#if mapOutputJsonPathPiece}}{{mapOutputJsonPathPiece.pascalCase}}{{else}}FrozenMap<{{#with mapValueSchema}}{{> src/main/java/packagename/components/schemas/types/schema_output_type sourceJsonPath=../jsonPath forceNull=true }}{{else}}? extends @Nullable Object{{/with}}>{{/if}} validate(Map<?, ?> arg, SchemaConfiguration configuration) throws ValidationException {
    Set<List<Object>> pathSet = new HashSet<>();
    List<Object> pathToItem = List.of("args[0]");
    Map<?, ?> castArg = castToAllowedTypes(arg, pathToItem, pathSet);
    SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(new JsonSchemaKeywordFlags.Builder().build()));
    PathToSchemasMap validatedPathToSchemas = new PathToSchemasMap();
    ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, validatedPathToSchemas, new LinkedHashSet<>());
    PathToSchemasMap pathToSchemasMap = getPathToSchemas(this, castArg, validationMetadata, pathSet);
    return getNewInstance(castArg, validationMetadata.pathToItem(), pathToSchemasMap);
}
{{/if}}
    {{#and enumInfo enumInfo.typeToValues.null}}

@Override
public Void validate(Null{{enumInfo.jsonPathPiece.pascalCase}} arg,SchemaConfiguration configuration) throws ValidationException {
    return validate(arg.value(), configuration);
}
    {{/and}}
    {{#and enumInfo enumInfo.typeToValues.boolean}}

@Override
public boolean validate(Boolean{{enumInfo.jsonPathPiece.pascalCase}} arg,SchemaConfiguration configuration) throws ValidationException {
    return validate(arg.value(), configuration);
}
    {{/and}}
    {{#and enumInfo enumInfo.typeToValues.string}}

@Override
public String validate(String{{enumInfo.jsonPathPiece.pascalCase}} arg,SchemaConfiguration configuration) throws ValidationException {
    return validate(arg.value(), configuration);
}
    {{/and}}
    {{#and enumInfo enumInfo.typeToValues.Integer}}

@Override
public int validate(Integer{{enumInfo.jsonPathPiece.pascalCase}} arg,SchemaConfiguration configuration) throws ValidationException {
    return (int) validate((Number) arg.value(), configuration);
}
    {{/and}}
    {{#and enumInfo enumInfo.typeToValues.Long}}

@Override
public long validate(Long{{enumInfo.jsonPathPiece.pascalCase}} arg,SchemaConfiguration configuration) throws ValidationException {
    return (long) validate((Number) arg.value(), configuration);
}
    {{/and}}
    {{#and enumInfo enumInfo.typeToValues.Float}}

@Override
public float validate(Float{{enumInfo.jsonPathPiece.pascalCase}} arg,SchemaConfiguration configuration) throws ValidationException {
    return (float) validate((Number) arg.value(), configuration);
}
    {{/and}}
    {{#and enumInfo enumInfo.typeToValues.Double}}

@Override
public double validate(Double{{enumInfo.jsonPathPiece.pascalCase}} arg,SchemaConfiguration configuration) throws ValidationException {
    return (double) validate((Number) arg.value(), configuration);
}
    {{/and}}

@Override
public @Nullable Object validate(@Nullable Object arg, SchemaConfiguration configuration) throws ValidationException {
{{#if types}}
    {{#each types}}
        {{#if @first}}
    if (arg {{#eq this "null"}}== null{{/eq}}{{#eq this "boolean"}}instanceof Boolean{{/eq}}{{#or (eq this "integer") (eq this "number")}}instanceof Number{{/or}}{{#eq this "string" }}instanceof String{{/eq}}{{#eq this "array"}}instanceof List{{/eq}}{{#eq this "object"}}instanceof Map{{/eq}}) {
        {{else}}
    } else if (arg {{#eq this "null"}}== null{{/eq}}{{#eq this "boolean"}}instanceof Boolean{{/eq}}{{#or (eq this "integer") (eq this "number")}}instanceof Number{{/or}}{{#eq this "string" }}instanceof String{{/eq}}{{#eq this "array"}}instanceof List{{/eq}}{{#eq this "object"}}instanceof Map{{/eq}}) {
        {{/if}}
        {{#eq this "null"}}
        return validate((Void) null, configuration);
        {{/eq}}
        {{#eq this "boolean"}}
        boolean boolArg = (Boolean) arg;
        return validate(boolArg, configuration);
        {{/eq}}
        {{#or (eq this "integer") (eq this "number")}}
        return validate((Number) arg, configuration);
        {{/or}}
        {{#eq this "string" }}
        return validate((String) arg, configuration);
        {{/eq}}
        {{#eq this "array"}}
        return validate((List<?>) arg, configuration);
        {{/eq}}
        {{#eq this "object"}}
        return validate((Map<?, ?>) arg, configuration);
        {{/eq}}
        {{#if @last}}
    }
        {{/if}}
    {{/each}}
{{else}}
    if (arg == null) {
        return validate((Void) null, configuration);
    } else if (arg instanceof Boolean) {
        boolean boolArg = (Boolean) arg;
        return validate(boolArg, configuration);
    } else if (arg instanceof Number) {
        return validate((Number) arg, configuration);
    } else if (arg instanceof String) {
        return validate((String) arg, configuration);
    } else if (arg instanceof List) {
        return validate((List<?>) arg, configuration);
    } else if (arg instanceof Map) {
        return validate((Map<?, ?>) arg, configuration);
    }
{{/if}}
    throw new ValidationException("Invalid input type="+getClass(arg)+". It can't be validated by this schema");
}