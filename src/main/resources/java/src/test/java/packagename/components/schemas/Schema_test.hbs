package {{{packageName}}}.components.schemas;

import org.junit.Assert;
import org.junit.Test;
import {{{packageName}}}.configurations.JsonSchemaKeywordFlags;
import {{{packageName}}}.configurations.SchemaConfiguration;
import {{{packageName}}}.exceptions.ValidationException;
import {{{packageName}}}.schemas.MapMaker;
import {{{packageName}}}.schemas.validation.JsonSchema;
import {{{packageName}}}.schemas.validation.FrozenMap;
import {{{packageName}}}.schemas.validation.FrozenList;
import {{{packageName}}}.schemas.validation.PathToSchemasMap;
import {{{packageName}}}.schemas.validation.ValidationMetadata;

import java.util.Arrays;
import java.util.List;
import java.util.AbstractMap;
import java.util.LinkedHashSet;

{{#with schema}}
public class {{containerJsonPathPiece.camelCase}}Test {
    static final SchemaConfiguration configuration = new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone());
    static final ValidationMetadata validationMetadata = new ValidationMetadata(
            List.of("args[0"),
            configuration,
            new PathToSchemasMap(),
            new LinkedHashSet<>()
    );
{{#each testCases}}
    {{#with this }}

    @Test
    public void test{{@key}}{{#if valid}}Passes{{else}}Fails{{/if}}() {
        // {{description.codeEscaped}}
        final var schema = {{containerJsonPathPiece.camelCase}}.{{jsonPathPiece.camelCase}}.getInstance();
        {{#if valid}}
        schema.validate(
            {{#with data}}
            {{> src/main/java/packagename/components/schemas/helpers/payload_renderer endChar="," }}
            {{/with}}
            configuration
        );
        {{else}}
        Assert.assertThrows(ValidationException.class, () -> JsonSchema.validate(
            schema,
            {{#with data}}
            {{> src/main/java/packagename/components/schemas/helpers/payload_renderer_failing_test any=true endChar="," }}
            {{/with}}
            validationMetadata
        ));
        {{/if}}
    }
    {{/with}}
{{/each}}
{{/with}}
}
