package {{{packageName}}}.components.schemas;

import org.junit.Assert;
import org.junit.Test;
import {{{packageName}}}.configurations.JsonSchemaKeywordFlags;
import {{{packageName}}}.configurations.SchemaConfiguration;
import {{{packageName}}}.exceptions.ValidationException;
import {{{packageName}}}.exceptions.InvalidTypeException;
import {{{packageName}}}.schemas.MapMaker;
import org.checkerframework.checker.nullness.qual.Nullable;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.AbstractMap;

{{#with schema}}
public class {{containerJsonPathPiece.camelCase}}Test {
    static final SchemaConfiguration configuration = new SchemaConfiguration(JsonSchemaKeywordFlags.ofNone());
{{#each testCases}}
    {{#with this }}

    @Test
    public void test{{@key}}{{#if valid}}Passes{{else}}Fails{{/if}}() {
        // {{description.codeEscaped}}
        final var schema = {{containerJsonPathPiece.camelCase}}.{{jsonPathPiece.camelCase}}.getInstance();
        {{#if valid}}
        schema.validate(
            {{#with data}}
                {{#and (eq type "array") ../arrayInputJsonPathPiece }}
            new {{../containerJsonPathPiece.camelCase}}.{{../arrayInputJsonPathPiece.camelCase}}(
                {{> src/main/java/packagename/components/schemas/helpers/payload_renderer endChar="" }}
            ).build(),
                {{else}}
            {{> src/main/java/packagename/components/schemas/helpers/payload_renderer endChar="," }}
                {{/and}}
            {{/with}}
            configuration
        );
        {{else}}
        try {
            schema.validate(
                {{#with data}}
                {{> src/main/java/packagename/components/schemas/helpers/payload_renderer endChar="," }}
                {{/with}}
                configuration
            );
            throw new RuntimeException("A different exception must be thrown");
        } catch (ValidationException | InvalidTypeException ignored) {
            ;
        }
        {{/if}}
    }
    {{/with}}
{{/each}}
{{/with}}
}
