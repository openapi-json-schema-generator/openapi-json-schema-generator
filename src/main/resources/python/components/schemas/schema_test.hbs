# coding: utf-8

{{> _helper_header }}

import unittest

import {{packageName}}
{{#with schema}}
from {{packageName}}.components.schema.{{jsonPathPiece.snakeCase}} import {{jsonPathPiece.pascalCase}}
from {{packageName}}.configurations import schema_configuration


class Test{{jsonPathPiece.pascalCase}}(unittest.TestCase):
    """{{jsonPathPiece.pascalCase}} unit test stubs"""
    configuration = schema_configuration.SchemaConfiguration(
        disabled_json_schema_keywords={'format'}
    )

{{#each testCases}}
{{#with this }}
    def test_{{@key}}_{{#if valid}}passes{{else}}fails{{/if}}(self):
        # {{description.codeEscaped}}
{{#if valid}}
        {{jsonPathPiece.pascalCase}}.validate(
{{#with data}}
            {{> components/schemas/helpers/payload_renderer endChar=',' }}
{{/with}}
            configuration=self.configuration
        )
{{else}}
        with self.assertRaises(({{packageName}}.ApiValueError, {{packageName}}.ApiTypeError)):
            {{jsonPathPiece.pascalCase}}.validate(
{{#with data}}
                {{> components/schemas/helpers/payload_renderer endChar=','}}
{{/with}}
                configuration=self.configuration
            )
{{/if}}
{{/with}}

{{/each}}
{{/with}}

if __name__ == '__main__':
    unittest.main()
