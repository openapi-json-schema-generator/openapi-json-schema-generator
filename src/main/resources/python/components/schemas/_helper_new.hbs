{{! array and object output classes need this new method to ensure that validation is run when making instances }}
{{#eq instanceType "arrayOutputType" }}
def __new__(cls, arg: {{arrayInputJsonPathPiece.camelCase}}, configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None):
    return {{jsonPathPiece.camelCase}}.validate(arg, configuration=configuration)
{{else}}
    {{#eq instanceType "propertiesOutputType" }}
        {{#or requiredProperties optionalProperties}}
@staticmethod
def from_dict_(
    arg: {{mapInputJsonPathPiece.camelCase}},
    configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
) -> {{mapOutputJsonPathPiece.camelCase}}:
    return {{jsonPathPiece.camelCase}}.validate(arg, configuration=configuration)

def __new__(
    cls,
    *,
            {{#each requiredProperties}}
                {{#if @key.isValid}}
    {{> components/schemas/_helper_schema_io_type paramName=@key.original fullRefModule="" endChar="," }}
                {{/if}}
            {{/each}}
            {{#each optionalProperties}}
                {{#if @key.isValid}}
    {{> components/schemas/_helper_schema_io_type paramName=@key.original fullRefModule="" endChar="," optional=true }}
                {{/if}}
            {{/each}}
    configuration_: typing.Optional[schema_configuration.SchemaConfiguration] = None,
            {{#if additionalProperties}}
                {{#if additionalProperties.isBooleanSchemaFalse}}
                {{else}}
                    {{#if additionalProperties.isBooleanSchemaTrue}}
    **kwargs: schemas.INPUT_TYPES_ALL,
                    {{else}}
                        {{#with additionalProperties}}
    {{> components/schemas/_helper_schema_io_type paramName="**kwargs" fullRefModule="" endChar="," }}
                        {{/with}}
                    {{/if}}
                {{/if}}
            {{else}}
    **kwargs: schemas.INPUT_TYPES_ALL,
            {{/if}}
):
            {{#if requiredProperties}}
    arg_: typing.Dict[str, typing.Any] = {
                {{#each requiredProperties}}
                    {{#if @key.isValid}}
        "{{@key.original}}": {{@key.original}},
                    {{/if}}
                {{/each}}
    }
            {{else}}
    arg_: typing.Dict[str, typing.Any] = {}
            {{/if}}
            {{#and optionalProperties optionalProperties.hasValidKey}}
    for key, val in (
                {{#each optionalProperties}}
                    {{#if @key.isValid}}
        ("{{@key.original}}", {{@key.original}}),
                    {{/if}}
                {{/each}}
    ):
        if isinstance(val, schemas.Unset):
            continue
        arg_[key] = val
            {{/and}}
            {{#if additionalProperties}}
                {{#unless additionalProperties.isBooleanSchemaFalse}}
    arg_.update(kwargs)
                {{/unless}}
            {{else}}
    arg_.update(kwargs)
            {{/if}}
    used_arg_ = typing.cast({{mapInputJsonPathPiece.camelCase}}, arg_)
    return {{jsonPathPiece.camelCase}}.validate(used_arg_, configuration=configuration_)
        {{else}}
            {{! only addProps}}
def __new__(
    cls,
            {{#and additionalProperties additionalProperties.isBooleanSchemaFalse}}
    arg: {{mapInputJsonPathPiece.camelCase}},
            {{/and}}
    configuration_: typing.Optional[schema_configuration.SchemaConfiguration] = None,
            {{#if additionalProperties}}
                {{#unless additionalProperties.isBooleanSchemaFalse}}
                    {{#if additionalProperties.isBooleanSchemaTrue}}
    **kwargs: schemas.INPUT_TYPES_ALL,
                    {{else}}
                        {{#with additionalProperties}}
    {{> components/schemas/_helper_schema_io_type paramName="**kwargs" fullRefModule="" endChar="," }}
                        {{/with}}
                    {{/if}}
                {{/unless}}
            {{else}}
    **kwargs: schemas.INPUT_TYPES_ALL,
            {{/if}}
):
    {{#if additionalProperties}}
        {{#if additionalProperties.isBooleanSchemaFalse}}
    return {{jsonPathPiece.camelCase}}.validate(arg, configuration=configuration_)
        {{else}}
    used_kwargs = typing.cast({{mapInputJsonPathPiece.camelCase}}, kwargs)
    return {{jsonPathPiece.camelCase}}.validate(used_kwargs, configuration=configuration_)
        {{/if}}
    {{else}}
    used_kwargs = typing.cast({{mapInputJsonPathPiece.camelCase}}, kwargs)
    return {{jsonPathPiece.camelCase}}.validate(used_kwargs, configuration=configuration_)
    {{/if}}

@staticmethod
def from_dict_(
    arg: {{mapInputJsonPathPiece.camelCase}},
    configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
) -> {{mapOutputJsonPathPiece.camelCase}}:
    return {{jsonPathPiece.camelCase}}.validate(arg, configuration=configuration)
        {{/or}}
    {{/eq}}
{{/eq}}