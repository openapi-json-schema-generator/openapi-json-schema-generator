{{#if enumInfo}}
    {{#if enumInfo.typeToValues.boolean}}
        {{#each enumInfo.typeToValues.boolean}}
@typing.overload
@classmethod
def validate(
    cls,
    arg: typing_extensions.Literal[{{#if value}}True{{else}}False{{/if}}],
    configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
) -> typing_extensions.Literal[{{#if value}}True{{else}}False{{/if}}]: ...
        {{/each}}
@typing.overload
@classmethod
def validate(
    cls,
    arg: bool,
    configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
) -> typing_extensions.Literal[{{#each enumInfo.typeToValues.boolean}}{{#if value}}True{{else}}False{{/if}},{{/each}}]: ...
    {{else}}
        {{! enum is not bool type }}
        {{#if includeNonEnum}}
@typing.overload
@classmethod
def validate(
    cls,
    arg: bool,
    configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
) -> bool: ...
        {{/if}}
    {{/if}}
{{else}}
    {{! no enum }}
    {{#if includeNonEnum}}
@typing.overload
@classmethod
def validate(
    cls,
    arg: bool,
    configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
) -> bool: ...
    {{/if}}
{{/if}}