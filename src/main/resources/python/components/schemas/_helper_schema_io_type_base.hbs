{{#if types}}
    {{#each types}}
        {{#eq this "boolean"}}
            {{#and ../enumInfo ../enumInfo.typeToValues.boolean}}
                {{#if optional}}
{{#if paramName}}{{paramName}}: {{/if}}typing.Union[typing_extensions.Literal[{{#each ../enumInfo.typeToValues.boolean}}{{#if value}}True{{else}}False{{/if}}{{#unless @last}}, {{/unless}}{{/each}}], schemas.Unset] = schemas.unset{{endChar}}
                {{else}}
{{#if paramName}}{{paramName}}: {{/if}}typing_extensions.Literal[{{#each ../enumInfo.typeToValues.boolean}}{{#if value}}True{{else}}False{{/if}}{{#unless @last}}, {{/unless}}{{/each}}]{{endChar}}
                {{/if}}
            {{else}}
{{#if paramName}}{{paramName}}: {{/if}}{{#if optional}}typing.Union[bool, schemas.Unset] = schemas.unset{{else}}bool{{/if}}{{endChar}}
            {{/and}}
        {{else}}
            {{#eq this "null"}}
{{#if paramName}}{{paramName}}: {{/if}}{{#if optional}}typing.Union[None, schemas.Unset] = schemas.unset{{else}}None{{/if}}{{endChar}}
            {{else}}
                {{#eq this "string"}}
                    {{#eq format "binary"}}
{{#if paramName}}{{paramName}}: {{/if}}typing.Union[bytes, schemas.FileIO{{#if optional}}, schemas.Unset{{/if}}]{{endChar}}
                    {{else}}
                        {{#and ../enumInfo ../enumInfo.typeToValues.string}}
                            {{#if optional}}
{{#if paramName}}{{paramName}}: {{/if}}typing.Union[typing_extensions.Literal[{{#each ../enumInfo.typeToValues.string}}"{{{value}}}"{{#unless @last}}, {{/unless}}{{/each}}], schemas.Unset] = schemas.unset{{endChar}}
                            {{else}}
{{#if paramName}}{{paramName}}: {{/if}}typing_extensions.Literal[{{#each ../enumInfo.typeToValues.string}}"{{{value}}}"{{#unless @last}}, {{/unless}}{{/each}}]{{endChar}}
                            {{/if}}
                        {{else}}
{{#if paramName}}{{paramName}}: {{/if}}{{#if optional}}typing.Union[str, schemas.Unset] = schemas.unset{{else}}str{{/if}}{{endChar}}
                        {{/and}}
                    {{/eq}}
                {{else}}
                    {{#eq this "number"}}
{{#if paramName}}{{paramName}}: {{/if}}typing.Union[int, float{{#if optional}}, schemas.Unset] = schemas.unset{{else}}]{{/if}}{{endChar}}
                    {{else}}
                        {{#eq this "integer"}}
                            {{#and ../enumInfo ../enumInfo.typeToValues.integer}}
                                {{#if optional}}
{{#if paramName}}{{paramName}}: {{/if}}typing.Union[typing_extensions.Literal[{{#each ../enumInfo.typeToValues.integer}}{{value}}{{#unless @last}}, {{/unless}}{{/each}}], schemas.Unset] = schemas.unset{{endChar}}
                                {{else}}
{{#if paramName}}{{paramName}}: {{/if}}typing_extensions.Literal[{{#each ../enumInfo.typeToValues.integer}}{{value}}{{#unless @last}}, {{/unless}}{{/each}}]{{endChar}}
                                {{/if}}
                            {{else}}
{{#if paramName}}{{paramName}}: {{/if}}{{#if optional}}typing.Union[int, schemas.Unset] = schemas.unset{{else}}int{{/if}}{{endChar}}
                            {{/and}}
                        {{else}}
                            {{#eq this "array"}}
                                {{#if arrayOutputJsonPathPiece}}
                                    {{#if fullRefModule}}
                                        {{#if optional}}
{{#if paramName}}{{paramName}}: {{/if}}typing.Union[{{fullRefModule}}.{{arrayOutputJsonPathPiece.camelCase}}, schemas.Unset] = schemas.unset{{endChar}}
                                        {{else}}
{{#if paramName}}{{paramName}}: {{/if}}{{fullRefModule}}.{{arrayOutputJsonPathPiece.camelCase}}{{endChar}}
                                        {{/if}}
                                    {{else}}
                                        {{#if selfReference}}
                                            {{#if optional}}
{{#if paramName}}{{paramName}}: {{/if}}typing.Union['{{arrayOutputJsonPathPiece.camelCase}}', schemas.Unset] = schemas.unset{{endChar}}
                                            {{else}}
{{#if paramName}}{{paramName}}: {{/if}}'{{arrayOutputJsonPathPiece.camelCase}}'{{endChar}}
                                            {{/if}}
                                        {{else}}
                                            {{#if optional}}
{{#if paramName}}{{paramName}}: {{/if}}typing.Union[{{arrayOutputJsonPathPiece.camelCase}}, schemas.Unset] = schemas.unset{{endChar}}
                                            {{else}}
{{#if paramName}}{{paramName}}: {{/if}}{{arrayOutputJsonPathPiece.camelCase}}{{endChar}}
                                            {{/if}}
                                        {{/if}}
                                    {{/if}}
                                {{else}}
                                    {{#if optional}}
{{#if paramName}}{{paramName}}: {{/if}}typing.Union[typing.Tuple[schemas.OUTPUT_BASE_TYPES], schemas.Unset] = schemas.unset{{endChar}}
                                    {{else}}
{{#if paramName}}{{paramName}}: {{/if}}typing.Tuple[schemas.OUTPUT_BASE_TYPES]{{endChar}}
                                    {{/if}}
                                {{/if}}
                            {{else}}
                                {{#eq this "object"}}
                                    {{#if mapOutputJsonPathPiece}}
                                        {{#if optional}}
{{#if paramName}}{{paramName}}: {{/if}}typing.Union[{{#if fullRefModule}}{{fullRefModule}}.{{/if}}{{mapOutputJsonPathPiece.camelCase}}, schemas.Unset] = schemas.unset{{endChar}}
                                        {{else}}
{{#if paramName}}{{paramName}}: {{/if}}{{#if fullRefModule}}{{fullRefModule}}.{{/if}}{{mapOutputJsonPathPiece.camelCase}}{{endChar}}
                                        {{/if}}
                                    {{else}}
                                        {{#if optional}}
{{#if paramName}}{{paramName}}: {{/if}}typing.Union[schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES], schemas.Unset] = schemas.unset{{endChar}}
                                        {{else}}
{{#if paramName}}{{paramName}}: {{/if}}schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]{{endChar}}
                                        {{/if}}
                                    {{/if}}
                                {{/eq}}
                            {{/eq}}
                        {{/eq}}
                    {{/eq}}
                {{/eq}}
            {{/eq}}
        {{/eq}}
    {{/each}}
{{else}}
    {{#if optional}}
{{#if paramName}}{{paramName}}: {{/if}}typing.Union[schemas.OUTPUT_BASE_TYPES, schemas.Unset] = schemas.unset{{endChar}}
    {{else}}
{{#if paramName}}{{paramName}}: {{/if}}schemas.OUTPUT_BASE_TYPES{{endChar}}
    {{/if}}
{{/if}}
