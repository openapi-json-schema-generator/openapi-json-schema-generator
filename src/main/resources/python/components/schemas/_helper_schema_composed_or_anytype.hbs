

@dataclasses.dataclass(frozen=True)
class {{jsonPathPiece.camelCase}}(
{{#eq types null}}
    schemas.AnyTypeSchema[{{#if mapOutputJsonPathPiece}}{{mapOutputJsonPathPiece.camelCase}}{{else}}schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]{{/if}}, {{#if arrayOutputJsonPathPiece}}{{arrayOutputJsonPathPiece.camelCase}}{{else}}typing.Tuple[schemas.OUTPUT_BASE_TYPES, ...]{{/if}}],
{{else}}
    {{#eq types.size 1}}
    {{> components/schemas/_helper_xbase_one_type }}
    {{else}}
    schemas.Schema[{{#if mapOutputJsonPathPiece}}{{mapOutputJsonPathPiece.camelCase}}{{else}}schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]{{/if}}, {{#if arrayOutputJsonPathPiece}}{{arrayOutputJsonPathPiece.camelCase}}{{else}}typing.Tuple[schemas.OUTPUT_BASE_TYPES, ...]{{/if}}],
    {{/eq}}
{{/eq}}
):
{{#if componentModule}}
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
{{#if description}}

    {{{unescapedDescription}}}
{{/if}}
    """
{{/if}}
{{#eq types null}}
    # any type
{{/eq}}
    {{> components/schemas/_helper_types }}
{{#if format}}
    format: str = '{{format}}'
{{/if}}
{{#if enumInfo}}
    {{> components/schemas/_helper_schema_enum }}
    enums = {{enumInfo.valueToName.jsonPathPiece.camelCase}}
{{/if}}
{{#if items}}
    {{> components/schemas/_helper_list_partial }}
{{/if}}
{{#or additionalProperties requiredProperties hasDiscriminatorWithNonEmptyMapping properties}}
    {{> components/schemas/_helper_dict_partial }}
{{/or}}
{{#if hasValidation}}
    {{> components/schemas/_helper_validations }}
{{/if}}
{{#or allOf anyOf oneOf not}}
    {{> components/schemas/_helper_composed_schemas }}
{{/or}}
{{#or mapOutputJsonPathPiece arrayOutputJsonPathPiece}}
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
    {{#if mapOutputJsonPathPiece}}
            schemas.immutabledict: {{mapOutputJsonPathPiece.camelCase}},
    {{/if}}
    {{#if arrayOutputJsonPathPiece}}
            tuple: {{arrayOutputJsonPathPiece.camelCase}},
    {{/if}}
        }
    )
{{/or}}

{{#neq types null}}
    {{#eq types.size 1}}
        {{#contains types "array"}}
    {{> components/schemas/_helper_validate }}

        {{else}}
            {{#contains types "object" }}
    {{> components/schemas/_helper_validate }}

            {{else}}
                {{#if enumInfo}}
    {{> components/schemas/_helper_validate }}

                {{/if}}
            {{/contains}}
        {{/contains}}
    {{else}}
    {{> components/schemas/_helper_validate }}

    {{/eq}}
{{/neq}}