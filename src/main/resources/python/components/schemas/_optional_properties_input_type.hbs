{{#if additionalProperties}}
    {{#if additionalProperties.isBooleanSchemaFalse}}
        {{! TypedDict use case }}
{{optionalProperties.jsonPathPiece.pascalCase}} = typing.TypedDict(
    '{{optionalProperties.jsonPathPiece.pascalCase}}',
    {
        {{#each optionalProperties}}
        {{> components/schemas/types/schema_io_type paramName=@key.original quote=true fullRefModule="" endChar="," rootClass=../optionalProperties.jsonPathPiece.pascalCase }}
        {{/each}}
    },
    total=False
)
    {{else}}
        {{! additionalProperties True/schema }}
        {{#if additionalProperties.isBooleanSchemaTrue }}
            {{! addProps True, does not matter what properties are because they are always covered by base types }}
{{optionalProperties.jsonPathPiece.pascalCase}} = typing.Mapping[str, schemas.INPUT_TYPES_ALL]
        {{else}}
            {{! addProps schema }}
{{optionalProperties.jsonPathPiece.pascalCase}} = typing.Mapping[
    str,
    typing.Union[
        {{#each optionalProperties}}
        {{> components/schemas/types/schema_io_type paramName=false fullRefModule="" endChar="," rootClass=../optionalProperties.jsonPathPiece.pascalCase }}
        {{/each}}
        {{#with additionalProperties}}
        {{> components/schemas/types/schema_io_type paramName=false fullRefModule="" endChar="," rootClass=../optionalProperties.jsonPathPiece.pascalCase }}
        {{/with}}
    ]
]
        {{/if}}
    {{/if}}
{{else}}
    {{! addProps unset, does not matter what required props are }}
{{optionalProperties.jsonPathPiece.pascalCase}} = typing.Mapping[str, schemas.INPUT_TYPES_ALL]
{{/if}}
