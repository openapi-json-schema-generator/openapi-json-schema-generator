{{#if additionalProperties}}
    {{#if additionalProperties.isBooleanSchemaFalse}}
        {{! TypedDict use case }}
        {{#and requiredProperties optionalProperties}}


class {{mapInputJsonPathPiece.camelCase}}({{requiredProperties.jsonPathPiece.camelCase}}, {{optionalProperties.jsonPathPiece.camelCase}}):
    pass
        {{else}}
            {{! empty mapping }}
{{mapInputJsonPathPiece.camelCase}} = typing.Mapping # mapping must be empty
        {{/and}}
    {{else}}
        {{! addProps True/schema }}
        {{#if additionalProperties.isBooleanSchemaTrue }}
            {{! addProps True, does not matter what properties are because they are always covered by base types }}
{{mapInputJsonPathPiece.camelCase}} = typing.Mapping[str, schemas.INPUT_TYPES_ALL]
        {{else}}
            {{! addProps schema }}
            {{#and requiredProperties optionalProperties}}
{{mapInputJsonPathPiece.camelCase}} = typing.Mapping[
    str,
    typing.Union[
                {{#each requiredProperties}}
        {{> components/schemas/types/schema_io_type paramName=false fullRefModule="" endChar="," rootClass=../mapInputJsonPathPiece.camelCase }}
                {{/each}}
                {{#each optionalProperties}}
        {{> components/schemas/types/schema_io_type paramName=false fullRefModule="" endChar="," rootClass=../mapInputJsonPathPiece.camelCase }}
                {{/each}}
                {{#with additionalProperties}}
        {{> components/schemas/types/schema_io_type paramName=false fullRefModule="" endChar="," rootClass=../mapInputJsonPathPiece.camelCase }}
                {{/with}}
    ]
]
            {{else}}
                {{! no requiredProperties or optionalProperties or just one of them }}
                {{#if requiredProperties}}
                    {{! requiredProperties + addProp }}
{{mapInputJsonPathPiece.camelCase}} = typing.Mapping[
    str,
    typing.Union[
                    {{#each requiredProperties}}
        {{> components/schemas/types/schema_io_type paramName=false fullRefModule="" endChar="," rootClass=../mapInputJsonPathPiece.camelCase }}
                    {{/each}}
                    {{#with additionalProperties}}
        {{> components/schemas/types/schema_io_type paramName=false fullRefModule="" endChar="," rootClass=../mapInputJsonPathPiece.camelCase }}
                    {{/with}}
    ]
]
                {{else}}
                    {{#if optionalProperties}}
                        {{! optionalProperties + addProp }}
{{mapInputJsonPathPiece.camelCase}} = typing.Mapping[
    str,
    typing.Union[
                        {{#each optionalProperties}}
        {{> components/schemas/types/schema_io_type paramName=false fullRefModule="" endChar="," rootClass=../mapInputJsonPathPiece.camelCase }}
                        {{/each}}
                        {{#with additionalProperties}}
        {{> components/schemas/types/schema_io_type paramName=false fullRefModule="" endChar="," rootClass=../mapInputJsonPathPiece.camelCase }}
                        {{/with}}
    ]
]
                    {{else}}
                        {{! only addProp }}
{{mapInputJsonPathPiece.camelCase}} = typing.Mapping[
    str,
                        {{#with additionalProperties}}
    {{> components/schemas/types/schema_io_type paramName=false fullRefModule="" endChar="," rootClass=../mapInputJsonPathPiece.camelCase }}
                        {{/with}}
]
                    {{/if}}
                {{/if}}
            {{/and}}
        {{/if}}
    {{/if}}
{{else}}
    {{! addProps unset, does not matter what required and optional props are }}
{{mapInputJsonPathPiece.camelCase}} = typing.Mapping[str, schemas.INPUT_TYPES_ALL]
{{/if}}