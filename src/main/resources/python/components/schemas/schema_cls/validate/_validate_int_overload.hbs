{{#if constInfo}}
    {{#if constInfo.typeToValues.integer}}
        {{#each constInfo.typeToValues.integer}}
@typing.overload
@classmethod
def validate(
    cls,
    arg: typing.Literal[{{@key.value}}],
    configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
) -> typing.Literal[{{@key.value}}]: ...
        {{/each}}
@typing.overload
@classmethod
def validate(
    cls,
    arg: int,
    configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
) -> typing.Literal[{{#each constInfo.typeToValues.integer}}{{@key.value}},{{/each}}]: ...
    {{else}}
        {{! enum is not int type }}
        {{#if includeNonEnum}}
@typing.overload
@classmethod
def validate(
    cls,
    arg: int,
    configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
) -> int: ...
        {{/if}}
    {{/if}}
{{else}}
    {{#if enumInfo}}
        {{#if enumInfo.typeToValues.integer}}
            {{#each enumInfo.typeToValues.integer}}
@typing.overload
@classmethod
def validate(
    cls,
    arg: typing.Literal[{{@key.value}}],
    configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
) -> typing.Literal[{{@key.value}}]: ...
            {{/each}}
@typing.overload
@classmethod
def validate(
    cls,
    arg: int,
    configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
) -> typing.Literal[{{#each enumInfo.typeToValues.integer}}{{@key.value}},{{/each}}]: ...
        {{else}}
            {{! enum is not int type }}
            {{#if includeNonEnum}}
@typing.overload
@classmethod
def validate(
    cls,
    arg: int,
    configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
) -> int: ...
            {{/if}}
        {{/if}}
    {{else}}
        {{! no enum }}
        {{#if includeNonEnum}}
@typing.overload
@classmethod
def validate(
    cls,
    arg: int,
    configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
) -> int: ...
        {{/if}}
    {{/if}}
{{/if}}