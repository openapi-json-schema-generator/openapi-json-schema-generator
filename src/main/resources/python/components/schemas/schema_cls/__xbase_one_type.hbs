{{#each types}}
    {{#eq this "array"}}
schemas.ListSchema[{{#if arrayOutputJsonPathPiece}}{{arrayOutputJsonPathPiece.camelCase}}{{else}}tuple{{/if}}]
    {{/eq}}
    {{#eq this "object"}}
schemas.Schema[{{#if mapOutputJsonPathPiece}}{{mapOutputJsonPathPiece.camelCase}}{{else}}schemas.immutabledict{{/if}}, tuple]
    {{/eq}}
    {{#eq this "string"}}
        {{#eq ../format "date"}}
schemas.DateSchema
        {{/eq}}
        {{#eq ../format "date-time"}}
schemas.DateTimeSchema
        {{/eq}}
        {{#eq ../format "uuid"}}
schemas.UUIDSchema
        {{/eq}}
        {{#eq ../format "number"}}
schemas.DecimalSchema
        {{/eq}}
        {{#eq ../format "binary"}}
schemas.BinarySchema
        {{/eq}}
        {{#neq ../format "date"}}
        {{#neq ../format "date-time"}}
        {{#neq ../format "uuid"}}
        {{#neq ../format "number"}}
        {{#neq ../format "binary"}}
            {{#or ../constInfo.typeToValues.string ../enumInfo.typeToValues.string}}
                {{! use Schema so validate is not overwritten }}
schemas.Schema
            {{else}}
schemas.StrSchema
            {{/or}}
        {{/neq}}
        {{/neq}}
        {{/neq}}
        {{/neq}}
        {{/neq}}
    {{/eq}}
    {{#eq this "number"}}
        {{#and ../enumInfo.typeToValues.number}}
            {{! use Schema so validate is not overwritten }}
schemas.Schema
        {{else}}
            {{#eq ../format "float"}}
schemas.Float32Schema
            {{/eq}}
            {{#eq ../format "double"}}
schemas.Float64Schema
            {{/eq}}
            {{#neq ../format "float"}}
                {{#neq ../format "double"}}
schemas.NumberSchema
                {{/neq}}
            {{/neq}}
        {{/and}}
    {{/eq}}
    {{#eq this "integer"}}
        {{#or ../constInfo.typeToValues.integer ../enumInfo.typeToValues.integer}}
            {{! use Schema so validate is not overwritten }}
schemas.Schema
        {{else}}
            {{#eq ../format "int32"}}
schemas.Int32Schema
            {{/eq}}
            {{#eq ../format "int64"}}
schemas.Int64Schema
            {{/eq}}
            {{#neq ../format "int32"}}
                {{#neq ../format "int64"}}
schemas.IntSchema
                {{/neq}}
            {{/neq}}
        {{/or}}
    {{/eq}}
    {{#eq this "boolean"}}
        {{#or ../constInfo.typeToValues.boolean ../enumInfo.typeToValues.boolean}}
            {{! use Schema so validate is not overwritten }}
schemas.Schema
        {{else}}
schemas.BoolSchema
        {{/or}}
    {{/eq}}
    {{#eq this "null"}}
schemas.NoneSchema
    {{/eq}}
{{/each}}
