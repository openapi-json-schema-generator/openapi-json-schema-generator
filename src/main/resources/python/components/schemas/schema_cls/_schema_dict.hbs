

@dataclasses.dataclass(frozen=True)
class {{jsonPathPiece.camelCase}}(
    schemas.Schema[{{#if mapOutputJsonPathPiece}}{{mapOutputJsonPathPiece.camelCase}}{{else}}schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]{{/if}}, tuple]
):
{{#if componentModule}}
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
{{#if description}}

    {{{unescapedDescription}}}
{{/if}}
    """
{{/if}}
{{#or additionalProperties requiredProperties hasDiscriminatorWithNonEmptyMapping properties hasValidation dependentRequired dependentSchemas }}
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    {{> components/schemas/schema_cls/_dict_partial }}
    {{> components/schemas/schema_cls/_validations }}
    {{#if dependentRequired}}
    {{> components/schemas/schema_cls/_dependent_required }}
    {{/if}}
    {{#if dependentSchemas}}
    {{> components/schemas/schema_cls/_dependent_schemas }}
    {{/if}}
    {{#if mapOutputJsonPathPiece}}
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: {{mapOutputJsonPathPiece.camelCase}}
        }
    )
    {{/if}}
{{/or}}

    {{> components/schemas/schema_cls/validate/validate }}

