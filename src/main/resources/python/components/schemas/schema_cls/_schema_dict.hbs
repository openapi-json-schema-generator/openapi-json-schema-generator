

@dataclasses.dataclass(frozen=True)
class {{jsonPathPiece.camelCase}}(
    schemas.Schema[{{#if mapOutputJsonPathPiece}}{{mapOutputJsonPathPiece.camelCase}}{{else}}schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]{{/if}}, tuple]
):
{{#if componentModule}}
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    {{#if description}}

    {{{unescapedDescription}}}
    {{/if}}
    """
{{/if}}
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    {{#if requiredProperties}}
    {{> components/schemas/schema_cls/_required }}
    {{/if}}
    {{#if hasDiscriminatorWithNonEmptyMapping}}
    {{> components/schemas/schema_cls/_discriminator }}
    {{/if}}
    {{#if properties}}
    {{> components/schemas/schema_cls/_properties }}
    {{/if}}
    {{#neq maxProperties null}}
    {{> components/schemas/schema_cls/_max_properties }}
    {{/neq}}
    {{#neq minProperties null}}
    {{> components/schemas/schema_cls/_min_properties }}
    {{/neq}}
    {{#if allOf}}
    {{> components/schemas/schema_cls/_all_of }}
    {{/if}}
    {{#if anyOf}}
    {{> components/schemas/schema_cls/_any_of }}
    {{/if}}
    {{#if oneOf}}
    {{> components/schemas/schema_cls/_one_of }}
    {{/if}}
    {{#if not}}
    {{> components/schemas/schema_cls/_not }}
    {{/if}}
    {{#if dependentRequired}}
    {{> components/schemas/schema_cls/_dependent_required }}
    {{/if}}
    {{#if dependentSchemas}}
    {{> components/schemas/schema_cls/_dependent_schemas }}
    {{/if}}
    {{#if propertyNames}}
    {{> components/schemas/schema_cls/_property_names }}
    {{/if}}
    {{#if patternProperties}}
    {{> components/schemas/schema_cls/_pattern_properties }}
    {{/if}}
    {{#if additionalProperties}}
    {{> components/schemas/schema_cls/_additional_properties }}
    {{/if}}
    {{#if unevaluatedProperties}}
    {{> components/schemas/schema_cls/_unevaluated_properties }}
    {{/if}}
    {{#if mapOutputJsonPathPiece}}
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: {{mapOutputJsonPathPiece.camelCase}}
        }
    )
    {{/if}}

    {{> components/schemas/schema_cls/validate/validate }}

