

@dataclasses.dataclass(frozen=True)
class {{jsonPathPiece.camelCase}}(
{{#eq types null}}
    schemas.AnyTypeSchema[{{#if mapOutputJsonPathPiece}}{{mapOutputJsonPathPiece.camelCase}}{{else}}schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]{{/if}}, {{#if arrayOutputJsonPathPiece}}{{arrayOutputJsonPathPiece.camelCase}}{{else}}typing.Tuple[schemas.OUTPUT_BASE_TYPES, ...]{{/if}}],
{{else}}
    {{#eq types.size 1}}
    {{> components/schemas/schema_cls/__xbase_one_type }}
    {{else}}
    schemas.Schema[{{#if mapOutputJsonPathPiece}}{{mapOutputJsonPathPiece.camelCase}}{{else}}schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]{{/if}}, {{#if arrayOutputJsonPathPiece}}{{arrayOutputJsonPathPiece.camelCase}}{{else}}typing.Tuple[schemas.OUTPUT_BASE_TYPES, ...]{{/if}}],
    {{/eq}}
{{/eq}}
):
{{#if componentModule}}
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    {{#if description}}

    {{{unescapedDescription}}}
    {{/if}}
    """
{{/if}}
{{#eq types null}}
    # any type
{{/eq}}
    {{> components/schemas/schema_cls/_types }}
{{#if format}}
    format: str = '{{format}}'
{{/if}}
{{#if enumInfo}}
    {{> components/schemas/schema_cls/_enum }}
{{/if}}
{{#if constInfo}}
    {{> components/schemas/schema_cls/_const }}
{{/if}}
{{#if prefixItems}}
    {{> components/schemas/schema_cls/_prefix_items }}
{{/if}}
{{#if items}}
    {{> components/schemas/schema_cls/_items }}
{{/if}}
{{#if contains}}
    {{> components/schemas/schema_cls/_contains }}
{{/if}}
{{#if requiredProperties}}
    {{> components/schemas/schema_cls/_required }}
{{/if}}
{{#if hasDiscriminatorWithNonEmptyMapping}}
    {{> components/schemas/schema_cls/_discriminator }}
{{/if}}
{{#if properties}}
    {{> components/schemas/schema_cls/_properties }}
{{/if}}
{{#if uniqueItems}}
    {{> components/schemas/schema_cls/_unique_items }}
{{/if}}
{{#neq maxLength null}}
    {{> components/schemas/schema_cls/_max_length }}
{{/neq}}
{{#neq minLength null}}
    {{> components/schemas/schema_cls/_min_length }}
{{/neq}}
{{#neq maxItems null}}
    {{> components/schemas/schema_cls/_max_items }}
{{/neq}}
{{#neq minItems null}}
    {{> components/schemas/schema_cls/_min_items }}
{{/neq}}
{{#neq maxProperties null}}
    {{> components/schemas/schema_cls/_max_properties }}
{{/neq}}
{{#neq minProperties null}}
    {{> components/schemas/schema_cls/_min_properties }}
{{/neq}}
{{#if maximum}}
    {{> components/schemas/schema_cls/_maximum }}
{{/if}}
{{#if minimum}}
    {{> components/schemas/schema_cls/_minimum }}
{{/if}}
{{#if multipleOf}}
    {{> components/schemas/schema_cls/_multiple_of }}
{{/if}}
{{#if patternInfo}}
    {{> components/schemas/schema_cls/_pattern }}
{{/if}}
{{#if allOf}}
    {{> components/schemas/schema_cls/_all_of }}
{{/if}}
{{#if anyOf}}
    {{> components/schemas/schema_cls/_any_of }}
{{/if}}
{{#if oneOf}}
    {{> components/schemas/schema_cls/_one_of }}
{{/if}}
{{#if not}}
    {{> components/schemas/schema_cls/_not }}
{{/if}}
{{#if if_}}
    {{> components/schemas/schema_cls/_if }}
{{/if}}
{{#if then}}
    {{> components/schemas/schema_cls/_then }}
{{/if}}
{{#if else_}}
    {{> components/schemas/schema_cls/_else }}
{{/if}}
{{#if dependentRequired}}
    {{> components/schemas/schema_cls/_dependent_required }}
{{/if}}
{{#if dependentSchemas}}
    {{> components/schemas/schema_cls/_dependent_schemas }}
{{/if}}
{{#if propertyNames}}
    {{> components/schemas/schema_cls/_property_names }}
{{/if}}
{{#if patternProperties}}
    {{> components/schemas/schema_cls/_pattern_properties }}
{{/if}}
{{#if additionalProperties}}
    {{> components/schemas/schema_cls/_additional_properties }}
{{/if}}
{{#if unevaluatedProperties}}
    {{> components/schemas/schema_cls/_unevaluated_properties }}
{{/if}}
{{#if unevaluatedItems}}
    {{> components/schemas/schema_cls/_unevaluated_items }}
{{/if}}
{{#or mapOutputJsonPathPiece arrayOutputJsonPathPiece}}
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
    {{#if mapOutputJsonPathPiece}}
            schemas.immutabledict: {{mapOutputJsonPathPiece.camelCase}},
    {{/if}}
    {{#if arrayOutputJsonPathPiece}}
            tuple: {{arrayOutputJsonPathPiece.camelCase}},
    {{/if}}
        }
    )
{{/or}}

{{#neq types null}}
    {{#eq types.size 1}}
        {{#contains types "array"}}
    {{> components/schemas/schema_cls/validate/validate }}

        {{else}}
            {{#contains types "object" }}
    {{> components/schemas/schema_cls/validate/validate }}

            {{else}}
                {{#or enumInfo constInfo}}
    {{> components/schemas/schema_cls/validate/validate }}

                {{/or}}
            {{/contains}}
        {{/contains}}
    {{else}}
        {{! more than one type }}
    {{> components/schemas/schema_cls/validate/validate }}

    {{/eq}}
{{/neq}}