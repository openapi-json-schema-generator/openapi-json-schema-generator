{{#if types}}
    {{#each types}}
        {{#eq this "boolean"}}
            {{#and ../enumInfo ../enumInfo.typeToValues.boolean}}
                {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    typing.Literal[
        {{#each ../enumInfo.typeToValues.boolean}}
        {{#if @key.value}}True{{else}}False{{/if}}{{#unless @last}},{{/unless}}
        {{/each}}
    ],
    schemas.Unset
] = schemas.unset{{endChar}}
                {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Literal[
    {{#each ../enumInfo.typeToValues.boolean}}
    {{#if @key.value}}True{{else}}False{{/if}}{{#unless @last}},{{/unless}}
    {{/each}}
]{{endChar}}
                {{/if}}
            {{else}}
                {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    bool,
    schemas.Unset
] = schemas.unset{{endChar}}
                {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}bool{{endChar}}
                {{/if}}
            {{/and}}
        {{else}}
            {{#eq this "null"}}
                {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    None,
    schemas.Unset
] = schemas.unset{{endChar}}
                {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}None{{endChar}}
                {{/if}}
            {{else}}
                {{#eq this "string"}}
                    {{#eq format "binary"}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    bytes,
    io.FileIO,
    io.BufferedReader,
    schemas.FileIO{{#if optional}},{{/if}}
                        {{#if optional}}
    schemas.Unset
                        {{/if}}
]{{#if optional}} = schemas.unset{{/if}}{{endChar}}
                    {{else}}
                        {{#and ../enumInfo ../enumInfo.typeToValues.string}}
                            {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    typing.Literal[
        {{#each ../enumInfo.typeToValues.string}}
        "{{{@key.value}}}"{{#unless @last}},{{/unless}}
        {{/each}}
    ],
    schemas.Unset
] = schemas.unset{{endChar}}
                            {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Literal[
    {{#each ../enumInfo.typeToValues.string}}
    "{{{@key.value}}}"{{#unless @last}},{{/unless}}
    {{/each}}
]{{endChar}}
                            {{/if}}
                        {{else}}
                            {{#and format (or (eq format "date") (eq format "date-time") (eq format "uuid"))}}
                                {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    str,
    {{#eq format "date"}}
    datetime.date,
    {{else}}
        {{#eq format "date-time"}}
    datetime.datetime,
        {{else}}
    uuid.UUID,
        {{/eq}}
    {{/eq}}
    schemas.Unset
] = schemas.unset{{endChar}}
                                {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    str,
    {{#eq format "date"}}
    datetime.date
    {{else}}
        {{#eq format "date-time"}}
    datetime.datetime
        {{else}}
    uuid.UUID
        {{/eq}}
    {{/eq}}
]{{endChar}}
                                {{/if}}
                            {{else}}
                                {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    str,
    schemas.Unset
] = schemas.unset{{endChar}}
                                {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}str{{endChar}}
                                {{/if}}
                            {{/and}}
                        {{/and}}
                    {{/eq}}
                {{else}}
                    {{#eq this "number"}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    int,
    float{{#if optional}},{{/if}}
                        {{#if optional}}
    schemas.Unset
                        {{/if}}
]{{#if optional}} = schemas.unset{{/if}}{{endChar}}
                    {{else}}
                        {{#eq this "integer"}}
                            {{#and ../enumInfo ../enumInfo.typeToValues.integer}}
                                {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    typing.Literal[
        {{#each ../enumInfo.typeToValues.integer}}
        {{@key.value}}{{#unless @last}},{{/unless}}
        {{/each}}
    ],
    schemas.Unset
] = schemas.unset{{endChar}}
                                {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Literal[
    {{#each ../enumInfo.typeToValues.integer}}
    {{@key.value}}{{#unless @last}},{{/unless}}
    {{/each}}
]{{endChar}}
                                {{/if}}
                            {{else}}
                                {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    int,
    schemas.Unset
] = schemas.unset{{endChar}}
                                {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}int{{endChar}}
                                {{/if}}
                            {{/and}}
                        {{else}}
                            {{#eq this "array"}}
                                {{#if arrayOutputJsonPathPiece}}
                                    {{#if fullRefModule}}
                                        {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    {{fullRefModule}}.{{arrayInputJsonPathPiece.pascalCase}},
    {{fullRefModule}}.{{arrayOutputJsonPathPiece.pascalCase}},
    schemas.Unset
] = schemas.unset{{endChar}}
                                        {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    {{fullRefModule}}.{{arrayInputJsonPathPiece.pascalCase}},
    {{fullRefModule}}.{{arrayOutputJsonPathPiece.pascalCase}}
]{{endChar}}
                                        {{/if}}
                                    {{else}}
                                        {{#eq rootClass arrayInputJsonPathPiece.pascalCase}}
                                            {{! self reference }}
                                            {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    '{{arrayInputJsonPathPiece.pascalCase}}',
    {{arrayOutputJsonPathPiece.pascalCase}},
    schemas.Unset
] = schemas.unset{{endChar}}
                                            {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    '{{arrayInputJsonPathPiece.pascalCase}}',
    {{arrayOutputJsonPathPiece.pascalCase}}
]{{endChar}}
                                            {{/if}}
                                        {{else}}
                                            {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    {{arrayInputJsonPathPiece.pascalCase}},
    {{arrayOutputJsonPathPiece.pascalCase}},
    schemas.Unset
] = schemas.unset{{endChar}}
                                            {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    {{arrayInputJsonPathPiece.pascalCase}},
    {{arrayOutputJsonPathPiece.pascalCase}}
]{{endChar}}
                                            {{/if}}
                                        {{/eq}}
                                    {{/if}}
                                {{else}}
                                    {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    typing.Tuple[schemas.INPUT_TYPES_ALL, ...],
    typing.Tuple[schemas.OUTPUT_BASE_TYPES, ...],
    schemas.Unset
] = schemas.unset{{endChar}}
                                    {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    typing.Tuple[schemas.INPUT_TYPES_ALL, ...],
    typing.Tuple[schemas.OUTPUT_BASE_TYPES, ...],
]{{endChar}}
                                    {{/if}}
                                {{/if}}
                            {{else}}
                                {{#eq this "object"}}
                                    {{#if mapOutputJsonPathPiece}}
                                        {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    {{#if rootClass}}
        {{#if fullRefModule}}
    {{fullRefModule}}.{{mapInputJsonPathPiece.pascalCase}},
        {{else}}
            {{#eq rootClass mapInputJsonPathPiece.pascalCase}}
                {{! self reference }}
    '{{mapInputJsonPathPiece.pascalCase}}',
            {{else}}
    {{mapInputJsonPathPiece.pascalCase}},
            {{/eq}}
        {{/if}}
    {{else}}
    {{#if fullRefModule}}{{fullRefModule}}.{{/if}}{{mapInputJsonPathPiece.pascalCase}},
    {{/if}}
    {{#if fullRefModule}}{{fullRefModule}}.{{/if}}{{mapOutputJsonPathPiece.pascalCase}},
    schemas.Unset
] = schemas.unset{{endChar}}
                                        {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    {{#if rootClass}}
        {{#if fullRefModule}}
    {{fullRefModule}}.{{mapInputJsonPathPiece.pascalCase}},
        {{else}}
            {{#eq rootClass mapInputJsonPathPiece.pascalCase}}
                {{! self reference }}
    '{{mapInputJsonPathPiece.pascalCase}}',
            {{else}}
    {{mapInputJsonPathPiece.pascalCase}},
            {{/eq}}
        {{/if}}
    {{else}}
    {{#if fullRefModule}}{{fullRefModule}}.{{/if}}{{mapInputJsonPathPiece.pascalCase}},
    {{/if}}
    {{#if fullRefModule}}{{fullRefModule}}.{{/if}}{{mapOutputJsonPathPiece.pascalCase}},
]{{endChar}}
                                        {{/if}}
                                    {{else}}
                                        {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    typing.Mapping[str, schemas.INPUT_TYPES_ALL],
    schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES],
    schemas.Unset
] = schemas.unset{{endChar}}
                                        {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    typing.Mapping[str, schemas.INPUT_TYPES_ALL],
    schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES],
]{{endChar}}
                                        {{/if}}
                                    {{/if}}
                                {{/eq}}
                            {{/eq}}
                        {{/eq}}
                    {{/eq}}
                {{/eq}}
            {{/eq}}
        {{/eq}}
    {{/each}}
{{else}}
    {{#if optional}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    schemas.INPUT_TYPES_ALL,
    schemas.OUTPUT_BASE_TYPES,
    schemas.Unset
] = schemas.unset{{endChar}}
    {{else}}
{{#if paramName}}{{#if quote}}"{{/if}}{{paramName}}{{#if quote}}"{{/if}}: {{/if}}typing.Union[
    schemas.INPUT_TYPES_ALL,
    schemas.OUTPUT_BASE_TYPES
]{{endChar}}
    {{/if}}
{{/if}}
