{{#if types}}{{#each types}}{{#eq this "boolean"}}{{#and ../enumInfo ../enumInfo.typeToValues.boolean}}{{#if optional}}typing.Union[typing.Literal[{{#each ../enumInfo.typeToValues.boolean}}{{#if value}}True{{else}}False{{/if}}{{#unless @last}}, {{/unless}}{{/each}}], schemas.Unset]{{endChar}}{{else}}typing.Literal[{{#each ../enumInfo.typeToValues.boolean}}{{#if value}}True{{else}}False{{/if}}{{#unless @last}}, {{/unless}}{{/each}}]{{endChar}}{{/if}}{{else}}{{#if optional}}typing.Union[bool, schemas.Unset]{{else}}bool{{/if}}{{endChar}}{{/and}}{{else}}{{#eq this "null"}}{{#if optional}}typing.Union[None, schemas.Unset]{{else}}None{{/if}}{{endChar}}{{else}}{{#eq this "string"}}{{#eq format "binary"}}typing.Union[bytes, schemas.FileIO{{#if optional}}, schemas.Unset{{/if}}]{{endChar}}{{else}}{{#and ../enumInfo ../enumInfo.typeToValues.string}}{{#if optional}}typing.Union[typing.Literal[{{#each ../enumInfo.typeToValues.string}}"{{{value}}}"{{#unless @last}}, {{/unless}}{{/each}}], schemas.Unset]{{endChar}}{{else}}typing.Literal[{{#each ../enumInfo.typeToValues.string}}"{{{value}}}"{{#unless @last}}, {{/unless}}{{/each}}]{{endChar}}{{/if}}{{else}}{{#if optional}}typing.Union[str, schemas.Unset]{{else}}str{{/if}}{{endChar}}{{/and}}{{/eq}}{{else}}{{#eq this "number"}}typing.Union[int, float{{#if optional}}, schemas.Unset{{/if}}]{{endChar}}{{else}}{{#eq this "integer"}}{{#and ../enumInfo ../enumInfo.typeToValues.integer}}{{#if optional}}typing.Union[typing.Literal[{{#each ../enumInfo.typeToValues.integer}}{{value}}{{#unless @last}}, {{/unless}}{{/each}}], schemas.Unset]{{endChar}}{{else}}typing.Literal[{{#each ../enumInfo.typeToValues.integer}}{{value}}{{#unless @last}}, {{/unless}}{{/each}}]{{endChar}}{{/if}}{{else}}{{#if optional}}typing.Union[int, schemas.Unset]{{else}}int{{/if}}{{endChar}}{{/and}}{{else}}{{#eq this "array"}}{{#if arrayOutputJsonPathPiece}}{{#if fullRefModule}}{{#if optional}}typing.Union[{{fullRefModule}}.{{arrayOutputJsonPathPiece.pascalCase}}, schemas.Unset]{{endChar}}{{else}}{{fullRefModule}}.{{arrayOutputJsonPathPiece.pascalCase}}{{endChar}}{{/if}}{{else}}{{#if selfReference}}{{#if optional}}typing.Union['{{arrayOutputJsonPathPiece.pascalCase}}', schemas.Unset]{{endChar}}{{else}}'{{arrayOutputJsonPathPiece.pascalCase}}'{{endChar}}{{/if}}{{else}}{{#if optional}}typing.Union[{{arrayOutputJsonPathPiece.pascalCase}}, schemas.Unset]{{endChar}}{{else}}{{arrayOutputJsonPathPiece.pascalCase}}{{endChar}}{{/if}}{{/if}}{{/if}}{{else}}{{#if optional}}typing.Union[typing.Tuple[schemas.OUTPUT_BASE_TYPES], schemas.Unset]{{endChar}}{{else}}typing.Tuple[schemas.OUTPUT_BASE_TYPES]{{endChar}}{{/if}}{{/if}}{{else}}{{#eq this "object"}}{{#if mapOutputJsonPathPiece}}{{#if optional}}typing.Union[{{#if fullRefModule}}{{fullRefModule}}.{{/if}}{{mapOutputJsonPathPiece.pascalCase}}, schemas.Unset]{{endChar}}{{else}}{{#if fullRefModule}}{{fullRefModule}}.{{/if}}{{mapOutputJsonPathPiece.pascalCase}}{{endChar}}{{/if}}{{else}}{{#if optional}}typing.Union[schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES], schemas.Unset]{{endChar}}{{else}}schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]{{endChar}}{{/if}}{{/if}}{{/eq}}{{/eq}}{{/eq}}{{/eq}}{{/eq}}{{/eq}}{{/eq}}{{/each}}{{else}}{{#if optional}}typing.Union[schemas.OUTPUT_BASE_TYPES, schemas.Unset]{{endChar}}{{else}}schemas.OUTPUT_BASE_TYPES{{endChar}}{{/if}}{{/if}}