# coding: utf-8

{{> _helper_header }}

{{#with requestBody}}
{{#if refInfo}}
    {{#if imports}}

    {{/if}}
{{> _helper_imports }}
{{jsonPathPiece.camelCase}} = {{refInfo.refModule}}.{{refInfo.refClass}}
RequestBodyInfo = {{refInfo.refModule}}.RequestBodyInfo
{{else}}
from {{packageName}}.shared_imports.header_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]

    {{#each content}}
        {{#with schema}}
from .content.{{../@key.snakeCase}} import {{jsonPathPiece.snakeCase}} as {{../@key.snakeCase}}_{{jsonPathPiece.snakeCase}}
        {{/with}}
    {{/each}}


class {{jsonPathPiece.camelCase}}(api_client.RequestBody):
    {{#each content}}


    class {{@key.camelCase}}MediaType(api_client.MediaType):
        {{#with this}}
            {{#with schema}}
        {{> components/_helper_content_schema_type paramName="schema" contentTypeModule=../@key.snakeCase }}
            {{/with}}
        {{/with}}
    {{/each}}
    content = {
    {{#each content}}
        '{{{@key.original}}}': {{@key.camelCase}}MediaType,
    {{/each}}
    }
    {{#if required}}
    required = True
    {{/if}}
{{#each content}}


class RequestBodyInfoFor{{@key.camelCase}}(typing.NamedTuple):
    {{#with this}}
            {{#with schema}}
    body: typing.Union[
        {{> components/schemas/_helper_schema_input_type fullRefModule=(join ../@key.snakeCase jsonPathPiece.snakeCase "_") endChar="," }}
        {{> components/schemas/_helper_schema_output_type mode="unprefixed" fullRefModule=(join ../@key.snakeCase jsonPathPiece.snakeCase "_") endChar="," }}
    ]
            {{/with}}
    {{else}}
    body: schemas.Unset = schemas.unset
    {{/with}}
    content_type: str = '{{{@key.original}}}'
{{/each}}
{{#eq content.size 1}}
    {{#each content}}
RequestBodyInfo = RequestBodyInfoFor{{@key.camelCase}}
    {{/each}}
{{else}}
RequestBodyInfo = typing.Union[
    {{#each content}}
    RequestBodyInfoFor{{@key.camelCase}},
    {{/each}}
]
{{/eq}}
{{/if}}
{{/with}}