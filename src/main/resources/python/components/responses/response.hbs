# coding: utf-8

{{> _helper_header }}

{{#with response}}
{{#if refInfo}}
    {{#if imports}}

    {{/if}}
{{> _helper_imports }}
{{jsonPathPiece.camelCase}} = {{refInfo.refModule}}.{{refInfo.refClass}}
ApiResponse = {{refInfo.refModule}}.ApiResponse
{{else}}
    {{#if headersObjectSchema}}
from __future__ import annotations
from {{packageName}}.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]
    {{/if}}
from {{packageName}}.shared_imports.response_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]
    {{#if content}}

        {{#each content}}
            {{#with schema}}
from .content.{{../@key.snakeCase}} import {{jsonPathPiece.snakeCase}} as {{../@key.snakeCase}}_{{jsonPathPiece.snakeCase}}
            {{/with}}
        {{/each}}
    {{/if}}
    {{#if headers}}
        {{#unless content}}

        {{/unless}}
        {{#each headers}}
from .headers import {{jsonPathPiece.snakeCase}}
        {{/each}}
parameters: typing.Dict[str, typing.Type[api_client.HeaderParameterWithoutName]] = {
{{#each headers}}
    '{{@key}}': {{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}},
{{/each}}
}
    {{/if}}
{{#with headersObjectSchema}}

{{> components/schemas/_helper_getschemas }}
{{/with}}


@dataclasses.dataclass
class ApiResponse(api_response.ApiResponse):
    response: urllib3.HTTPResponse
    {{#and headers content}}
        {{#if hasContentSchema}}
            {{#gt content.size 1}}
    body: typing.Union[
                {{#each content}}
                    {{#if this.schema}}
                        {{#with this.schema}}
        {{> components/_helper_content_schema_output_type paramName=null modulePrefix=../@key.snakeCase }}
                        {{/with}}
                    {{else}}
        schemas.Unset,
                    {{/if}}
                {{/each}}
    ]
            {{else}}
                {{#each content}}
                    {{#if this.schema}}
                        {{#with this.schema}}
    {{> components/_helper_content_schema_output_type paramName="body" modulePrefix=../@key.snakeCase endChar="" }}
                        {{/with}}
                    {{else}}
    body: schemas.Unset
                    {{/if}}
                {{/each}}
            {{/gt}}
        {{else}}
    body: schemas.Unset = schemas.unset
        {{/if}}
    headers: {{headersObjectSchema.mapOutputJsonPathPiece.camelCase}}
    {{else}}
        {{#or headers content}}
            {{#if headers}}
    headers: {{headersObjectSchema.mapOutputJsonPathPiece.camelCase}}
    body: schemas.Unset = schemas.unset
            {{else}}
                {{#if hasContentSchema}}
                    {{#gt content.size 1}}
    body: typing.Union[
                        {{#each content}}
                            {{#if this.schema}}
                                {{#with this.schema}}
        {{> components/_helper_content_schema_output_type paramName=null modulePrefix=../@key.snakeCase }}
                                {{/with}}
                            {{else}}
        schemas.Unset,
                            {{/if}}
                        {{/each}}
    ]
                    {{else}}
                        {{#each content}}
                            {{#if this.schema}}
                                {{#with this.schema}}
    {{> components/_helper_content_schema_output_type paramName="body" modulePrefix=../@key.snakeCase endChar="" }}
                                {{/with}}
                            {{else}}
    body: schemas.Unset
                            {{/if}}
                        {{/each}}
                    {{/gt}}
                {{else}}
    body: schemas.Unset = schemas.unset
                {{/if}}
    headers: schemas.Unset = schemas.unset
            {{/if}}
        {{/or}}
    {{/and}}
    {{#unless headers}}
    {{#unless content}}
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset
    {{/unless}}
    {{/unless}}


class {{jsonPathPiece.camelCase}}(api_client.OpenApiResponse[ApiResponse]):
    @classmethod
    def get_response(cls, response, headers, body) -> ApiResponse:
        return ApiResponse(response=response, body=body, headers=headers)
    {{#each content}}


    class {{@key.camelCase}}MediaType(api_client.MediaType):
        {{#with this}}
            {{#with schema}}
        {{> components/_helper_content_schema_type paramName="schema" contentTypeModule=../@key.snakeCase }}
            {{else}}
        pass
            {{/with}}
        {{/with}}
    {{/each}}
    {{#if content}}
    content = {
        {{#each content}}
        '{{{@key.original}}}': {{@key.camelCase}}MediaType,
        {{/each}}
    }
    {{/if}}
    {{#if headers}}
    headers=parameters
    headers_schema = {{headersObjectSchema.jsonPathPiece.camelCase}}
    {{/if}}
{{/if}}
{{/with}}