{{#if content}}
{{#each content}}
    {{#if schema}}
response_body_schema = {{httpMethod.original}}.{{responseModuleName}}.{{responseClassName}}.content["{{{@key.original}}}"].schema
assert response_body_schema is not None
    {{/if}}
{{#if this.testCases}}
{{#each testCases}}
{{#with this }}

def test_{{@key}}_{{#if valid}}passes{{else}}fails{{/if}}(self):
    # {{description}}
    accept_content_type = '{{{../@key.original}}}'

    with patch.object(urllib3.PoolManager, 'request') as mock_request:
        payload = (
    {{#with data}}
            {{> components/schemas/helpers/payload_renderer endChar='' }}
    {{/with}}
        )
        mock_request.return_value = self.response(
            self.json_bytes(payload),
            status=self.response_status
        )
    {{#if valid}}
        {{> paths/path/verb/_helper_operation_test_partial }}

        assert isinstance(api_response.response, urllib3.HTTPResponse)
        deserialized_response_body = self.response_body_schema.validate(
            payload,
            configuration=self.schema_config
        )
        assert api_response.body == deserialized_response_body
    {{else}}
        with self.assertRaises(({{packageName}}.ApiValueError, {{packageName}}.ApiTypeError)):
            self.api.{{httpMethod.original}}(
                accept_content_types=(accept_content_type,)
            )
        self.assert_pool_manager_request_called_with(
            mock_request,
            self.api_config.get_server_url('servers', None) + "{{{path.original}}}",
            method='{{httpMethod.original}}'.upper(),
            content_type=None,
            accept_content_type=accept_content_type,
        )
    {{/if}}
{{/with}}
{{/each}}
{{/if}}
{{/each}}
{{else}}
response_body = ''
{{/if}}