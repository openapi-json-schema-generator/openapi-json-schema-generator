# coding: utf-8

{{> _helper_header }}

from {{packageName}} import api_client{{#or operation.errorStatusCodes operation.errorWildcardStatusCodes}}, exceptions{{/or}}{{#neq operation.security null}}{{#gt operation.security.size 0}}, security_schemes{{/gt}}{{else}}{{#neq security null}}{{#gt security.size 0}}, security_schemes{{/gt}}{{/neq}}{{/neq}}
{{#eq operation.security null}}
    {{#neq security null}}
        {{#gt security.size 0}}
            {{#eq security.size 1}}
                {{#each security}}
from {{packageName}}.security import security_requirement_object_{{@key}}
                {{/each}}
            {{else}}
from {{packageName}}.security import (
                {{#each security}}
    security_requirement_object_{{@key}},
                {{/each}}
)
            {{/eq}}
        {{/gt}}
    {{/neq}}
{{/eq}}
from {{packageName}}.shared_imports.operation_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]
{{#if imports}}

{{/if}}
{{> _helper_imports }}
{{#with operation}}
    {{#with requestBodySchema}}
{{> _helper_imports }}
    {{/with}}

from .. import path
{{#if responses}}
    {{#eq responses.size 1}}
        {{#each responses}}
from .responses import response_{{@key}}
        {{/each}}
    {{else}}
from .responses import (
        {{#each responses}}
    {{jsonPathPiece.snakeCase}},
        {{/each}}
)
    {{/eq}}
{{/if}}
{{#if requestBody}}
from . import request_body
{{/if}}
{{#if parameters}}
    {{#gt parameters.allParameters.size 0}}
        {{#eq parameters.allParameters.size 1}}
            {{#each parameters.allParameters}}
from .parameters import {{jsonPathPiece.snakeCase}}
            {{/each}}
        {{else}}
from .parameters import (
            {{#each parameters.allParameters}}
    {{jsonPathPiece.snakeCase}},
            {{/each}}
)
        {{/eq}}
    {{/gt}}
{{/if}}
{{#if pathItemParameters}}
    {{#gt pathItemParameters.allParameters.size 0}}
        {{#eq pathItemParameters.allParameters.size 1}}
            {{#each pathItemParameters.allParameters}}
from ..parameters import {{jsonPathPiece.snakeCase}} as path_item_{{jsonPathPiece.snakeCase}}
            {{/each}}
        {{else}}
from ..parameters import (
            {{#each pathItemParameters.allParameters}}
    {{jsonPathPiece.snakeCase}} as path_item_{{jsonPathPiece.snakeCase}},
            {{/each}}
)
        {{/eq}}
    {{/gt}}
{{/if}}
{{#neq security null}}
    {{#gt security.size 0}}
        {{#eq security.size 1}}
            {{#each security}}
from .security import security_requirement_object_{{@key}}
            {{/each}}
        {{else}}
from .security import (
            {{#each security}}
    security_requirement_object_{{@key}},
            {{/each}}
)
        {{/eq}}
    {{/gt}}
{{/neq}}
{{#with pathParametersSchema}}
from .path_parameters import {{jsonPathPiece.camelCase}}, {{mapInputJsonPathPiece.camelCase}}, {{mapOutputJsonPathPiece.camelCase}}
{{/with}}
{{#with queryParametersSchema}}
from .query_parameters import {{jsonPathPiece.camelCase}}, {{mapInputJsonPathPiece.camelCase}}, {{mapOutputJsonPathPiece.camelCase}}
{{/with}}
{{#with headerParametersSchema}}
from .header_parameters import {{jsonPathPiece.camelCase}}, {{mapInputJsonPathPiece.camelCase}}, {{mapOutputJsonPathPiece.camelCase}}
{{/with}}
{{#with cookieParametersSchema}}
from .cookie_parameters import {{jsonPathPiece.camelCase}}, {{mapInputJsonPathPiece.camelCase}}, {{mapOutputJsonPathPiece.camelCase}}
{{/with}}
{{#or parameters pathItemParameters}}
    {{#or parameters.queryParameters pathItemParameters.queryParameters}}
query_parameter_classes = (
{{#each parameters.queryParameters}}
    {{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}},
{{/each}}
{{#each pathItemParameters.queryParameters}}
    path_item_{{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}},
{{/each}}
)
    {{/or}}
    {{#or parameters.headerParameters pathItemParameters.headerParameters}}
header_parameter_classes = (
{{#each parameters.headerParameters}}
    {{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}},
{{/each}}
{{#each pathItemParameters.headerParameters}}
    path_item_{{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}},
{{/each}}
)
    {{/or}}
    {{#or parameters.pathParameters pathItemParameters.pathParameters}}
path_parameter_classes = (
{{#each parameters.pathParameters}}
    {{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}},
{{/each}}
{{#each pathItemParameters.pathParameters}}
    path_item_{{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}},
{{/each}}
)
    {{/or}}
    {{#or parameters.cookieParameters pathItemParameters.cookieParameters}}
cookie_parameter_classes = (
{{#each parameters.pathParameters}}
    {{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}},
{{/each}}
{{#each pathItemParameters.cookieParameters}}
    path_item_{{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}},
{{/each}}
)
    {{/or}}
{{/or}}
{{#neq security null}}
    {{#gt security.size 0}}

_security: typing.List[security_schemes.SecurityRequirementObject] = [
        {{#each security}}
    security_requirement_object_{{@key}}.security_requirement_object,
        {{/each}}
]
    {{/gt}}
{{else}}
    {{#neq ../security null}}
        {{#gt ../security.size 0}}

_security: typing.List[security_schemes.SecurityRequirementObject] = [
            {{#each ../security}}
    security_requirement_object_{{@key}}.security_requirement_object,
            {{/each}}
]
        {{/gt}}
    {{/neq}}
{{/neq}}


    {{#if defaultResponse}}
        {{#with defaultResponse}}
default_response = response_default.{{jsonPathPiece.camelCase}}
        {{/with}}
    {{/if}}
    {{#if statusCodeResponses}}
__StatusCodeToResponse = typing.TypedDict(
    '__StatusCodeToResponse',
    {
        {{#each statusCodeResponses}}
        '{{@key}}': typing.Type[{{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}}],
        {{/each}}
    }
)
_status_code_to_response: __StatusCodeToResponse = {
        {{#each statusCodeResponses}}
    '{{@key}}': {{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}},
        {{/each}}
}
    {{/if}}
    {{#if wildcardCodeResponses}}
__RangedStatusCodeToResponse = typing.TypedDict(
    '__RangedStatusCodeToResponse',
    {
        {{#each wildcardCodeResponses}}
        '{{@key}}': typing.Type[{{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}}],
        {{/each}}
    }
)
_ranged_status_code_to_response: __RangedStatusCodeToResponse = {
        {{#each wildcardCodeResponses}}
    '{{@key}}': {{jsonPathPiece.snakeCase}}.{{jsonPathPiece.camelCase}},
        {{/each}}
}
    {{/if}}
    {{#if nonErrorStatusCodes}}
_non_error_status_codes = frozenset({
        {{#each nonErrorStatusCodes}}
    '{{this}}',
        {{/each}}
})
    {{/if}}
    {{#if errorStatusCodes}}
_error_status_codes = frozenset({
        {{#each errorStatusCodes}}
    '{{this}}',
        {{/each}}
})
    {{/if}}
    {{#if nonErrorWildcardStatusCodes}}
_non_error_ranged_status_codes = frozenset({
        {{#each nonErrorWildcardStatusCodes}}
    '{{this}}',
        {{/each}}
})
    {{/if}}
    {{#if errorWildcardStatusCodes}}
_error_ranged_status_codes = frozenset({
        {{#each errorWildcardStatusCodes}}
    '{{this}}',
        {{/each}}
})
    {{/if}}
{{#each produces}}
    {{#if @first}}

_all_accept_content_types = (
    {{/if}}
    "{{{.}}}",
    {{#if @last}}
)
    {{/if}}
{{/each}}


class BaseApi(api_client.Api):
    {{#if requestBodySchema}}
        {{! to handle specific content types}}
        {{#each requestBodySchema.properties}}
            {{#if @first}}
    @typing.overload
    def _{{operationId.snakeCase}}(
    {{> paths/path/verb/_helper_operation_args ../this contentType=@key.original bodyRefSchema=this isDefaultContentType=true rootSecurity=../../security isOverload=true skipDeserialization=false}}

    @typing.overload
    def _{{operationId.snakeCase}}(
    {{> paths/path/verb/_helper_operation_args ../this contentType=@key.original bodyRefSchema=this isDefaultContentType=true rootSecurity=../../security isOverload=true skipDeserialization=true}}

            {{else}}
    @typing.overload
    def _{{operationId.snakeCase}}(
    {{> paths/path/verb/_helper_operation_args ../this contentType=@key.original bodyRefSchema=this isDefaultContentType=false rootSecurity=../../security isOverload=true skipDeserialization=false}}

    @typing.overload
    def _{{operationId.snakeCase}}(
    {{> paths/path/verb/_helper_operation_args ../this contentType=@key.original bodyRefSchema=this isDefaultContentType=false rootSecurity=../../security isOverload=true skipDeserialization=true}}

            {{/if}}
        {{/each}}
    {{else}}
    @typing.overload
    def _{{operationId.snakeCase}}(
    {{> paths/path/verb/_helper_operation_args rootSecurity=../security isOverload=true skipDeserialization=false}}

    @typing.overload
    def _{{operationId.snakeCase}}(
    {{> paths/path/verb/_helper_operation_args rootSecurity=../security isOverload=true skipDeserialization=true}}

    {{/if}}
    def _{{operationId.snakeCase}}(
    {{> paths/path/verb/_helper_operation_args rootSecurity=../security isOverload=false skipDeserialization=null}}
        """
    {{#if summary}}
        {{{summary.codeEscaped}}}
    {{/if}}
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
    {{#if pathParametersSchema}}
        {{#if pathParametersSchema.requiredProperties}}
        path_params = {{pathParametersSchema.jsonPathPiece.camelCase}}.validate(
            path_params,
            configuration=self.api_client.schema_configuration
        )
        {{else}}
        if path_params is not None:
            path_params = {{pathParametersSchema.jsonPathPiece.camelCase}}.validate(
                path_params,
                configuration=self.api_client.schema_configuration
            )
        {{/if}}
    {{/if}}
    {{#if queryParametersSchema}}
        {{#if queryParametersSchema.requiredProperties}}
        query_params = {{queryParametersSchema.jsonPathPiece.camelCase}}.validate(
            query_params,
            configuration=self.api_client.schema_configuration
        )
        {{else}}
        if query_params is not None:
            query_params = {{queryParametersSchema.jsonPathPiece.camelCase}}.validate(
                query_params,
                configuration=self.api_client.schema_configuration
            )
        {{/if}}
    {{/if}}
    {{#if headerParametersSchema}}
        {{#if headerParametersSchema.requiredProperties}}
        header_params = {{headerParametersSchema.jsonPathPiece.camelCase}}.validate(
            header_params,
            configuration=self.api_client.schema_configuration
        )
        {{else}}
        if header_params is not None:
            header_params = {{headerParametersSchema.jsonPathPiece.camelCase}}.validate(
                header_params,
                configuration=self.api_client.schema_configuration
            )
        {{/if}}
    {{/if}}
    {{#if cookieParametersSchema}}
        {{#if cookieParametersSchema.requiredProperties}}
        cookie_params = {{cookieParametersSchema.jsonPathPiece.camelCase}}.validate(
            cookie_params,
            configuration=self.api_client.schema_configuration
        )
        {{else}}
        if cookie_params is not None:
            cookie_params = {{cookieParametersSchema.jsonPathPiece.camelCase}}.validate(
                cookie_params,
                configuration=self.api_client.schema_configuration
            )
        {{/if}}
    {{/if}}
    {{#or pathParametersSchema queryParametersSchema}}
        used_path, query_params_suffix = self._get_used_path(
            path,
        {{#if pathParametersSchema}}
            path_parameters=path_parameter_classes,
            path_params=path_params,
        {{/if}}
        {{#if queryParametersSchema}}
            query_parameters=query_parameter_classes,
            query_params=query_params,
        {{/if}}
            skip_validation=True
        )
    {{else}}
        used_path = path
    {{/or}}
    {{#or headerParametersSchema requestBody produces}}
        {{#if headerParametersSchema}}
        headers = self._get_headers(
            header_parameters=header_parameter_classes,
            header_params=header_params,
            {{#if produces}}
            accept_content_types=accept_content_types,
            {{/if}}
            skip_validation=True
        )
        {{else}}
            {{#or produces requestBody}}
        headers = self._get_headers({{#if produces}}accept_content_types=accept_content_types{{/if}})
            {{/or}}
        {{/if}}
    {{/or}}
        # TODO add cookie handling
    {{#if requestBodySchema}}

        fields, serialized_body = self._get_fields_and_body(
            request_body=request_body.{{requestBody.jsonPathPiece.camelCase}},
            body=body,
            content_type=content_type,
            headers=headers
        )
    {{/if}}
    {{#if servers}}
        host = self.api_client.configuration.get_server_url(
            "paths/{{{path.original}}}/{{httpMethod.original}}/servers", server_index
        )
    {{else}}
        {{#if pathItem.servers}}
        host = self.api_client.configuration.get_server_url(
            "paths/{{{path.original}}}/servers", server_index
        )
        {{else}}
        host = self.api_client.configuration.get_server_url(
            "servers", server_index
        )
        {{/if}}
    {{/if}}
    {{#neq security null}}
        {{#gt security.size 0}}
        security_requirement_object = self.api_client.configuration.get_security_requirement_object(
            "paths/{{{path.original}}}/{{httpMethod.original}}/security",
            _security,
            security_index
        )
        {{/gt}}
    {{else}}
        {{#neq ../security null}}
            {{#gt ../security.size 0}}
        security_requirement_object = self.api_client.configuration.get_security_requirement_object(
            "security",
            _security,
            security_index
        )
            {{/gt}}
        {{/neq}}
    {{/neq}}

        raw_response = self.api_client.call_api(
            resource_path=used_path,
    {{#if queryParametersSchema}}
            query_params_suffix=query_params_suffix,
    {{/if}}
            method='{{httpMethod.original}}',
            host=host,
    {{#or headerParametersSchema requestBodySchema produces}}
            headers=headers,
    {{/or}}
    {{#if requestBodySchema}}
            fields=fields,
            body=serialized_body,
    {{/if}}
    {{#neq security null}}
        {{#gt security.size 0}}
            security_requirement_object=security_requirement_object,
        {{/gt}}
    {{else}}
        {{#neq ../security null}}
            {{#gt ../security.size 0}}
            security_requirement_object=security_requirement_object,
            {{/gt}}
        {{/neq}}
    {{/neq}}
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            skip_deser_response = api_response.ApiResponseWithoutDeserialization(response=raw_response)
            self._verify_response_status(skip_deser_response)
            return skip_deser_response

{{#if nonDefaultResponses}}
    {{#if statusCodeResponses}}
        {{! use cases }}
        {{! 1 nonError + error }}
        {{! 2 nonError }}
        {{! 3 error }}
        status = str(raw_response.status)
            {{#and nonErrorStatusCodes errorStatusCodes}}
        if status in _non_error_status_codes:
            status_code = typing.cast(
                typing.Literal[
                    {{#each nonErrorStatusCodes}}
                    '{{this}}',
                    {{/each}}
                ],
                status
            )
            return _status_code_to_response[status_code].deserialize(
                raw_response, self.api_client.schema_configuration)
        elif status in _error_status_codes:
            error_status_code = typing.cast(
                typing.Literal[
                    {{#each errorStatusCodes}}
                    '{{this}}',
                    {{/each}}
                ],
                status
            )
            error_response = _status_code_to_response[error_status_code].deserialize(
                raw_response, self.api_client.schema_configuration)
            raise exceptions.ApiException(
                status=error_response.response.status,
                reason=error_response.response.reason,
                api_response=error_response
            )
            {{else}}
                {{#or nonErrorStatusCodes errorStatusCodes}}
                    {{#if nonErrorStatusCodes}}
        if status in _non_error_status_codes:
            status_code = typing.cast(
                typing.Literal[
                    {{#each nonErrorStatusCodes}}
                    '{{this}}',
                    {{/each}}
                ],
                status
            )
            return _status_code_to_response[status_code].deserialize(
                raw_response, self.api_client.schema_configuration)
                    {{/if}}
                    {{#if errorStatusCodes}}
        if status in _error_status_codes:
            error_status_code = typing.cast(
                typing.Literal[
                    {{#each errorStatusCodes}}
                    '{{this}}',
                    {{/each}}
                ],
                status
            )
            error_response = _status_code_to_response[error_status_code].deserialize(
                raw_response, self.api_client.schema_configuration)
            raise exceptions.ApiException(
                status=error_response.response.status,
                reason=error_response.response.reason,
                api_response=error_response
            )
                    {{/if}}
                {{/or}}
            {{/and}}
    {{/if}}
    {{#if wildcardCodeResponses}}

        ranged_response_status_code = str(raw_response.status)[0]
        {{! use cases }}
        {{! 1 nonError + error }}
        {{! 2 nonError }}
        {{! 3 error }}
        {{#and nonErrorWildcardStatusCodes errorWildcardStatusCodes}}
        if ranged_response_status_code in _non_error_ranged_status_codes:
            ranged_status_code = typing.cast(
                typing.Literal[
                {{#each nonErrorWildcardStatusCodes}}
                    '{{this}}',
                {{/each}}
                ],
                ranged_response_status_code
            )
            return _ranged_status_code_to_response[ranged_status_code].deserialize(
                raw_response, self.api_client.schema_configuration)
        elif ranged_response_status_code in _error_ranged_status_codes:
            error_ranged_status_code = typing.cast(
                typing.Literal[
                {{#each errorWildcardStatusCodes}}
                    '{{this}}',
                {{/each}}
                ],
                ranged_response_status_code
            )
            error_response = _ranged_status_code_to_response[error_ranged_status_code].deserialize(
                raw_response, self.api_client.schema_configuration)
            raise exceptions.ApiException(
                status=error_response.response.status,
                reason=error_response.response.reason,
                api_response=error_response
            )
        {{else}}
            {{#or nonErrorWildcardStatusCodes errorWildcardStatusCodes}}
                {{#if nonErrorWildcardStatusCodes}}
        if ranged_response_status_code in _non_error_ranged_status_codes:
            ranged_status_code = typing.cast(
                typing.Literal[
                        {{#each nonErrorWildcardStatusCodes}}
                    '{{this}}',
                        {{/each}}
                ],
                ranged_response_status_code
            )
            return _ranged_status_code_to_response[ranged_status_code].deserialize(
                raw_response, self.api_client.schema_configuration)
                {{/if}}
                {{#if errorWildcardStatusCodes}}
        if ranged_response_status_code in _error_ranged_status_codes:
            error_ranged_status_code = typing.cast(
                typing.Literal[
                        {{#each errorWildcardStatusCodes}}
                    '{{this}}',
                        {{/each}}
                ],
                ranged_response_status_code
            )
            error_response = _ranged_status_code_to_response[error_ranged_status_code].deserialize(
                raw_response, self.api_client.schema_configuration)
            raise exceptions.ApiException(
                status=error_response.response.status,
                reason=error_response.response.reason,
                api_response=error_response
            )
                {{/if}}
            {{/or}}
        {{/and}}
    {{/if}}

    {{#if defaultResponse}}
        response = default_response.deserialize(raw_response, self.api_client.schema_configuration)
    {{else}}
        response = api_response.ApiResponseWithoutDeserialization(response=raw_response)
    {{/if}}
        self._verify_response_status(response)
        return response
{{else}}
    {{#if defaultResponse}}
        response = default_response.deserialize(raw_response, self.api_client.schema_configuration)
    {{else}}
        response = api_response.ApiResponseWithoutDeserialization(response=raw_response)
    {{/if}}
        self._verify_response_status(response)
        return response
{{/if}}


class {{operationId.camelCase}}(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId.snakeCase fn names
    {{operationId.snakeCase}} = BaseApi._{{operationId.snakeCase}}


class ApiFor{{httpMethod.camelCase}}(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names
    {{httpMethod.original}} = BaseApi._{{operationId.snakeCase}}
{{/with}}
