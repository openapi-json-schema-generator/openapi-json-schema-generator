# coding: utf-8
{{> _helper_header }}

{{#with server}}
    {{#if variables}}
from __future__ import annotations
from {{packageName}}.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]
    {{/if}}
from {{packageName}}.shared_imports.server_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]
    {{#if variables}}
        {{#with variables}}
{{> components/schemas/schema_getschemas identifierPieces=(append identifierPieces jsonPathPiece.pascalCase) }}
        {{/with}}
    {{/if}}


@dataclasses.dataclass
class {{jsonPathPiece.pascalCase}}(server.Server{{#if variables}}With{{else}}Without{{/if}}Variables):
    {{#if description}}
    '''
    {{description.original}}
    '''
    {{/if}}
    {{#if variables}}
    variables: {{variables.mapOutputJsonPathPiece.pascalCase}} = dataclasses.field(
        default_factory=lambda: {{variables.jsonPathPiece.pascalCase}}.validate({
            {{#with variables}}
                {{#each properties}}
            "{{{@key.original}}}": {{jsonPathPiece.pascalCase}}.default,
                {{/each}}
            {{/with}}
        })
    )
    variables_schema: typing.Type[{{variables.jsonPathPiece.pascalCase}}] = {{variables.jsonPathPiece.pascalCase}}
    _url: str = "{{url}}"
    {{else}}
    url: str = "{{url}}"
    {{/if}}
{{/with}}