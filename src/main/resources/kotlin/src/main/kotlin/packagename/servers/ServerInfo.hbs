{{#if servers.subpackage}}
package {{{packageName}}}.{{servers.subpackage}};
{{else}}
package {{{packageName}}};
{{/if}}

{{#each servers}}
import {{{packageName}}}.{{subpackage}}.{{jsonPathPiece.pascalCase}};
{{/each}}
import {{{packageName}}}.servers.Server;
import {{{packageName}}}.servers.ServerProvider;
import org.checkerframework.checker.nullness.qual.Nullable;

import java.util.Objects;

public class {{servers.jsonPathPiece.pascalCase}} {
    public static class {{servers.jsonPathPiece.pascalCase}}1 implements ServerProvider<ServerIndex> {
    {{#each servers}}
        private final {{jsonPathPiece.pascalCase}} server{{@index}};
    {{/each}}

        {{servers.jsonPathPiece.pascalCase}}1(
        {{#each servers}}
            @Nullable {{jsonPathPiece.pascalCase}} server{{@index}}{{#unless @last}},{{/unless}}
        {{/each}}
        ) {
    {{#each servers}}
            this.server{{@index}} = Objects.requireNonNullElseGet(server{{@index}}, {{jsonPathPiece.pascalCase}}::new);
    {{/each}}
        }

        @Override
        public Server getServer(ServerIndex serverIndex) {
    {{#eq servers.size 1}}
            return server0;
    {{else}}
            switch (serverIndex) {
        {{#each servers}}
            {{#if @last}}
                default:
                    return server{{@index}};
            {{else}}
                case SERVER_{{@index}}:
                    return server{{@index}};
            {{/if}}
        {{/each}}
            }
    {{/eq}}
        }
    }

    public static class {{servers.jsonPathPiece.pascalCase}}Builder {
    {{#each servers}}
        private @Nullable {{jsonPathPiece.pascalCase}} server{{@index}};
    {{/each}}

        public {{servers.jsonPathPiece.pascalCase}}Builder() {}
    {{#each servers}}

        public {{../servers.jsonPathPiece.pascalCase}}Builder {{jsonPathPiece.camelCase}}({{jsonPathPiece.pascalCase}} server{{@index}}) {
            this.server{{@index}} = server{{@index}};
            return this;
        }
    {{/each}}

        public {{servers.jsonPathPiece.pascalCase}}1 build() {
            return new {{servers.jsonPathPiece.pascalCase}}1(
    {{#each servers}}
                server{{@index}}{{#unless @last}},{{/unless}}
    {{/each}}
            );
        }
    }

    public enum ServerIndex {
        {{#each servers}}
        SERVER_{{@index}}{{#unless @last}},{{/unless}}
        {{/each}}
    }
}