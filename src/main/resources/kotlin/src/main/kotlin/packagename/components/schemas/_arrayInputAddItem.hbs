{{#each types}}
    {{#eq this "null"}}
        {{#if forDocs }}
| {{builderClass}} | add(item: Nothing?) |
        {{else}}

fun add(item: Nothing?): {{builderClass}} {
    list.add(null)
    return this
}
        {{/if}}
    {{else}}
        {{#eq this "boolean"}}
            {{#if forDocs }}
| {{builderClass}} | add(item: Boolean) |
            {{else}}

fun add(item: Boolean): {{builderClass}} {
    list.add(item)
    return this
}
            {{/if}}
        {{else}}
            {{#eq this "string"}}
                {{#if forDocs }}
| {{builderClass}} | add(item: String) |
                {{else}}

fun add(item: String): {{builderClass}} {
    list.add(item)
    return this
}
                {{/if}}
            {{else}}
                {{#or (eq this "integer") (eq this "number") }}
                    {{#if forDocs }}
| {{builderClass}} | add(item: Int) |
| {{builderClass}} | add(item: Float) |
                        {{#neq ../format "int32"}}
| {{builderClass}} | add(item: Long) |
| {{builderClass}} | add(item: Double) |
                        {{/neq}}
                    {{else}}

fun add(item: Int): {{builderClass}} {
    list.add(item)
    return this
}

fun add(item: Float): {{builderClass}} {
    list.add(item)
    return this
}
                        {{#neq ../format "int32"}}

fun add(item: Long): {{builderClass}} {
    list.add(item)
    return this
}

fun add(item: Double): {{builderClass}} {
    list.add(item)
    return this
}
                        {{/neq}}
                    {{/if}}
                {{else}}
                    {{#eq this "array"}}
                        {{#if forDocs }}
| {{builderClass}} | add(item: List<{{#with listItemSchema}}{{> src/main/kotlin/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true noExtends=true }}{{else}}Any?{{/with}}>) |
                        {{else}}

fun add(item: List<{{#with listItemSchema}}{{> src/main/kotlin/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true noExtends=true }}{{else}}Any?{{/with}}>): {{builderClass}} {
    list.add(item)
    return this
}
                        {{/if}}
                    {{else}}
                        {{#eq this "object"}}
                            {{#if forDocs }}
| {{builderClass}} | add(item: Map<String, {{#with mapValueSchema}}{{> src/main/kotlin/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true noExtends=true }}{{else}}Any?{{/with}}>) |
                            {{else}}

fun add(item: Map<String, {{#with mapValueSchema}}{{> src/main/kotlin/packagename/components/schemas/types/schema_input_type sourceJsonPath=../jsonPath forceNull=true noExtends=true }}{{else}}Any?{{/with}}>): {{builderClass}} {
    list.add(item)
    return this
}
                            {{/if}}
                        {{/eq}}
                    {{/eq}}
                {{/or}}
            {{/eq}}
        {{/eq}}
    {{/eq}}
{{else}}
    {{! no type defined }}
    {{#if forDocs }}
| {{builderClass}} | add(item: Nothing?) |
| {{builderClass}} | add(item: Boolean) |
| {{builderClass}} | add(item: String) |
| {{builderClass}} | add(item: Int) |
| {{builderClass}} | add(item: Float) |
| {{builderClass}} | add(item: Long) |
| {{builderClass}} | add(item: Double) |
| {{builderClass}} | add(item: List<Any?>) |
| {{builderClass}} | add(item: Map<String, Any?>) |
    {{else}}

fun add(item: Nothing?): {{builderClass}} {
    list.add(null)
    return this
}

fun add(item: Boolean): {{builderClass}} {
    list.add(item)
    return this
}

fun add(item: String): {{builderClass}} {
    list.add(item)
    return this
}

fun add(item: Int): {{builderClass}} {
    list.add(item)
    return this
}

fun add(item: Float): {{builderClass}} {
    list.add(item)
    return this
}

fun add(item: Long): {{builderClass}} {
    list.add(item)
    return this
}

fun add(item: Double): {{builderClass}} {
    list.add(item)
    return this
}

fun add(item: List<*>): {{builderClass}} {
    list.add(item)
    return this
}

fun add(item: Map<String, Any?>): {{builderClass}} {
    list.add(item)
    return this
}
    {{/if}}
{{/each}}
{{#with enumInfo}}
    {{#each typeToValues }}
        {{#eq @key "null"}}
            {{#if forDocs }}
                {{#if useContainer }}
| {{builderClass}} | add(item: [{{../../containerJsonPathPiece.pascalCase}}.Null{{../jsonPathPiece.pascalCase}}]({{docRoot}}{{pathFromDocRoot}}.md#null{{../jsonPathPiece.kebabCase}})) |
                {{else}}
| {{builderClass}} | add(item: [Null{{../jsonPathPiece.pascalCase}}](#null{{../jsonPathPiece.kebabCase}})) |
                {{/if}}
            {{else}}

fun add(item: {{#if useContainer}}{{../../containerJsonPathPiece.pascalCase}}.{{/if}}Null{{../jsonPathPiece.pascalCase}}): {{builderClass}} {
    list.add(null)
    return this
}
            {{/if}}
        {{else}}
            {{#eq @key "boolean"}}
                {{#if forDocs }}
                    {{#if useContainer }}
| {{builderClass}} | add(item: [{{../../containerJsonPathPiece.pascalCase}}.Boolean{{../jsonPathPiece.pascalCase}}]({{docRoot}}{{pathFromDocRoot}}.md#boolean{{../jsonPathPiece.kebabCase}})) |
                    {{else}}
| {{builderClass}} | add(item: [Boolean{{../jsonPathPiece.pascalCase}}](#boolean{{../jsonPathPiece.kebabCase}})) |
                    {{/if}}
                {{else}}

fun add(item: {{#if useContainer}}{{../../containerJsonPathPiece.pascalCase}}.{{/if}}Boolean{{../jsonPathPiece.pascalCase}}): {{builderClass}} {
    list.add(item.value())
    return this
}
                {{/if}}
            {{else}}
                {{#eq @key "string"}}
                    {{#if forDocs }}
                        {{#if useContainer }}
| {{builderClass}} | add(item: [{{../../containerJsonPathPiece.pascalCase}}.String{{../jsonPathPiece.pascalCase}}]({{docRoot}}{{pathFromDocRoot}}.md#string{{../jsonPathPiece.kebabCase}})) |
                        {{else}}
| {{builderClass}} | add(item: [String{{../jsonPathPiece.pascalCase}}](#string{{../jsonPathPiece.kebabCase}})) |
                        {{/if}}
                    {{else}}

fun add(item: {{#if useContainer}}{{../../containerJsonPathPiece.pascalCase}}.{{/if}}String{{../jsonPathPiece.pascalCase}}): {{builderClass}} {
    list.add(item.value())
    return this
}
                    {{/if}}
                {{else}}
                    {{#eq @key "Integer"}}
                        {{#if forDocs }}
                            {{#if useContainer }}
| {{builderClass}} | add(item: [{{../../containerJsonPathPiece.pascalCase}}.Integer{{../jsonPathPiece.pascalCase}}]({{docRoot}}{{pathFromDocRoot}}.md#integer{{../jsonPathPiece.kebabCase}})) |
                            {{else}}
| {{builderClass}} | add(item: [Integer{{../jsonPathPiece.pascalCase}}](#integer{{../jsonPathPiece.kebabCase}})) |
                            {{/if}}
                        {{else}}

fun add(item: {{#if useContainer}}{{../../containerJsonPathPiece.pascalCase}}.{{/if}}Integer{{../jsonPathPiece.pascalCase}}): {{builderClass}} {
    list.add(item.value())
    return this
}
                        {{/if}}
                    {{else}}
                        {{#eq @key "Long"}}
                            {{#if forDocs }}
                                {{#if useContainer }}
| {{builderClass}} | add(item: [{{../../containerJsonPathPiece.pascalCase}}.Long{{../jsonPathPiece.pascalCase}}]({{docRoot}}{{pathFromDocRoot}}.md#long{{../jsonPathPiece.kebabCase}})) |
                                {{else}}
| {{builderClass}} | add(item: [Long{{../jsonPathPiece.pascalCase}}](#long{{../jsonPathPiece.kebabCase}})) |
                                {{/if}}
                            {{else}}

fun add(item: {{#if useContainer}}{{../../containerJsonPathPiece.pascalCase}}.{{/if}}Long{{../jsonPathPiece.pascalCase}}): {{builderClass}} {
    list.add(item.value())
    return this
}
                            {{/if}}
                        {{else}}
                            {{#eq @key "Float"}}
                                {{#if forDocs }}
                                    {{#if useContainer }}
| {{builderClass}} | add(item: [{{../../containerJsonPathPiece.pascalCase}}.Float{{../jsonPathPiece.pascalCase}}]({{docRoot}}{{pathFromDocRoot}}.md#float{{../jsonPathPiece.kebabCase}})) |
                                    {{else}}
| {{builderClass}} | add(item: [Float{{../jsonPathPiece.pascalCase}}](#float{{../jsonPathPiece.kebabCase}})) |
                                    {{/if}}
                                {{else}}

fun add(item: {{#if useContainer}}{{../../containerJsonPathPiece.pascalCase}}.{{/if}}Float{{../jsonPathPiece.pascalCase}}): {{builderClass}} {
    list.add(item.value())
    return this
}
                                {{/if}}
                            {{else}}
                                {{#eq @key "Double"}}
                                    {{#if forDocs }}
                                        {{#if useContainer }}
| {{builderClass}} | add(item: [{{../../containerJsonPathPiece.pascalCase}}.Double{{../jsonPathPiece.pascalCase}}]({{docRoot}}{{pathFromDocRoot}}.md#double{{../jsonPathPiece.kebabCase}})) |
                                        {{else}}
| {{builderClass}} | add(item: [Double{{../jsonPathPiece.pascalCase}}](#double{{../jsonPathPiece.kebabCase}})) |
                                        {{/if}}
                                    {{else}}

fun add(item: {{#if useContainer}}{{../../containerJsonPathPiece.pascalCase}}.{{/if}}Double{{../jsonPathPiece.pascalCase}}): {{builderClass}} {
    list.add(item.value())
    return this
}
                                    {{/if}}
                                {{/eq}}
                            {{/eq}}
                        {{/eq}}
                    {{/eq}}
                {{/eq}}
            {{/eq}}
        {{/eq}}
    {{/each}}
{{/with}}
