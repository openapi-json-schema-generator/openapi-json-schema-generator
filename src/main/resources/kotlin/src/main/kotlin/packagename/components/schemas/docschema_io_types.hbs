{{#eq types null}}
| String | validate(arg: String, configuration: SchemaConfiguration) |
    {{#and enumInfo enumInfo.typeToValues.string}}
| String | validate(arg: [String{{enumInfo.jsonPathPiece.pascalCase}}](#string{{enumInfo.jsonPathPiece.kebabCase}}), configuration: SchemaConfiguration) |
    {{/and}}
| Nothing? | validate(arg: Nothing?, configuration: SchemaConfiguration) |
    {{#and enumInfo enumInfo.typeToValues.null}}
| Nothing? | validate(arg: [Null{{enumInfo.jsonPathPiece.pascalCase}}](#null{{enumInfo.jsonPathPiece.kebabCase}}), configuration: SchemaConfiguration) |
    {{/and}}
| int | validate(arg: int, configuration: SchemaConfiguration) |
| long | validate(arg: long, configuration: SchemaConfiguration) |
| float | validate(arg: float, configuration: SchemaConfiguration) |
| double | validate(arg: double, configuration: SchemaConfiguration) |
| Number | validate(arg: Number, configuration: SchemaConfiguration) |
| boolean | validate(arg: boolean, configuration: SchemaConfiguration) |
    {{#and enumInfo enumInfo.typeToValues.boolean}}
| boolean | validate(arg: [Boolean{{enumInfo.jsonPathPiece.pascalCase}}](#boolean{{enumInfo.jsonPathPiece.kebabCase}}), configuration: SchemaConfiguration) |
    {{/and}}
    {{#if mapOutputJsonPathPiece }}
| [{{mapOutputJsonPathPiece.pascalCase}}](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces mapOutputJsonPathPiece) }}) | validate(arg: [Map&lt;?, ?&gt;](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces mapInputJsonPathPiece) }}), configuration: SchemaConfiguration) |
    {{else}}
| FrozenMap<Any?> | validate(arg: Map&lt;?, ?&gt;, configuration: SchemaConfiguration) |
    {{/if}}
    {{#if arrayOutputJsonPathPiece}}
| [{{arrayOutputJsonPathPiece.pascalCase}}](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces arrayOutputJsonPathPiece) }}) | validate(arg: [List<*>](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces arrayInputJsonPathPiece) }}), configuration: SchemaConfiguration) |
    {{else}}
| FrozenList<Any?> | validate(arg: List<*>, configuration: SchemaConfiguration) |
    {{/if}}
| [{{jsonPathPiece.pascalCase}}BoxedString](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces (join jsonPathPiece.kebabCase "boxedstring" ""))}}) | validateAndBox(String, configuration: SchemaConfiguration) |
| [{{jsonPathPiece.pascalCase}}BoxedVoid](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces (join jsonPathPiece.kebabCase "boxedvoid" ""))}}) | validateAndBox(Nothing?, configuration: SchemaConfiguration) |
| [{{jsonPathPiece.pascalCase}}BoxedNumber](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces (join jsonPathPiece.kebabCase "boxednumber" ""))}}) | validateAndBox(Number, configuration: SchemaConfiguration) |
| [{{jsonPathPiece.pascalCase}}BoxedBoolean](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces (join jsonPathPiece.kebabCase "boxedboolean" ""))}}) | validateAndBox(boolean, configuration: SchemaConfiguration) |
| [{{jsonPathPiece.pascalCase}}BoxedMap](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces (join jsonPathPiece.kebabCase "boxedmap" ""))}}) | validateAndBox({{#if mapInputJsonPathPiece}}[Map&lt;?, ?&gt;](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces mapInputJsonPathPiece) }}){{else}}Map&lt;?, ?&gt;{{/if}}, configuration: SchemaConfiguration) |
| [{{jsonPathPiece.pascalCase}}BoxedList](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces (join jsonPathPiece.kebabCase "boxedlist" ""))}}) | validateAndBox({{#if arrayInputJsonPathPiece}}[List<*>](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces arrayInputJsonPathPiece) }}){{else}}List<*>{{/if}}, configuration: SchemaConfiguration) |
{{else}}
    {{#each types}}
        {{#eq this "boolean"}}
| boolean | validate(arg: boolean, configuration: SchemaConfiguration) |
            {{#and ../enumInfo enumInfo.typeToValues.boolean}}
| boolean | validate(arg: [Boolean{{../enumInfo.jsonPathPiece.pascalCase}}](#boolean{{../enumInfo.jsonPathPiece.kebabCase}}), configuration: SchemaConfiguration) |
            {{/and}}
| [{{jsonPathPiece.pascalCase}}BoxedBoolean](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces (join jsonPathPiece.kebabCase "boxedboolean" ""))}}) | validateAndBox(boolean, configuration: SchemaConfiguration) |
        {{else}}
            {{#eq this "null"}}
| Nothing? | validate(arg: Nothing?, configuration: SchemaConfiguration) |
                {{#and ../enumInfo ../enumInfo.typeToValues.null}}
| Nothing? | validate(arg: [Null{{../enumInfo.jsonPathPiece.pascalCase}}](#null{{../enumInfo.jsonPathPiece.kebabCase}}), configuration: SchemaConfiguration) |
                {{/and}}
| [{{jsonPathPiece.pascalCase}}BoxedVoid](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces (join jsonPathPiece.kebabCase "boxedvoid" ""))}}) | validateAndBox(Nothing?, configuration: SchemaConfiguration) |
            {{else}}
                {{#eq this "string"}}
                    {{#eq format "binary"}}
{{! todo binary types}}
| BinaryString | validate(arg: BinaryString, configuration: SchemaConfiguration) |
                    {{else}}
| String | validate(arg: String, configuration: SchemaConfiguration) |
                        {{#and ../enumInfo ../enumInfo.typeToValues.string}}
| String | validate(arg: [String{{../enumInfo.jsonPathPiece.pascalCase}}](#string{{../enumInfo.jsonPathPiece.kebabCase}}), configuration: SchemaConfiguration) |
                        {{/and}}
| [{{jsonPathPiece.pascalCase}}BoxedString](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces (join jsonPathPiece.kebabCase "boxedstring" ""))}}) | validateAndBox(String, configuration: SchemaConfiguration) |
                    {{/eq}}
                {{else}}
                    {{#eq this "number"}}
                        {{#eq ../format null}}
| Number | validate(arg: Number, configuration: SchemaConfiguration) |
                        {{else}}
                            {{#eq ../format "float"}}
| float | validate(arg: float, configuration: SchemaConfiguration) |
                            {{else}}
                                {{#eq ../format "double"}}
| double | validate(arg: double, configuration: SchemaConfiguration) |
                                {{else}}
                                    {{#eq ../format "int32"}}
| int | validate(arg: int, configuration: SchemaConfiguration) |
                                    {{else}}
                                        {{#eq ../format "int64"}}
| long | validate(arg: long, configuration: SchemaConfiguration) |
                                        {{/eq}}
                                    {{/eq}}
                                {{/eq}}
                            {{/eq}}
                        {{/eq}}
| [{{jsonPathPiece.pascalCase}}BoxedNumber](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces (join jsonPathPiece.kebabCase "boxednumber" ""))}}) | validateAndBox(Number, configuration: SchemaConfiguration) |
                    {{else}}
                        {{#eq this "integer"}}
                            {{#eq ../format null}}
| long | validate(arg: long, configuration: SchemaConfiguration) |
                            {{else}}
                                {{#eq ../format "int32"}}
| int | validate(arg: int, configuration: SchemaConfiguration) |
                                {{else}}
| long | validate(arg: long, configuration: SchemaConfiguration) |
                                {{/eq}}
                            {{/eq}}
| [{{jsonPathPiece.pascalCase}}BoxedNumber](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces (join jsonPathPiece.kebabCase "boxednumber" ""))}}) | validateAndBox(Number, configuration: SchemaConfiguration) |
                        {{else}}
                            {{#eq this "array"}}
                                {{#if ../arrayOutputJsonPathPiece}}
| [{{../arrayOutputJsonPathPiece.pascalCase}}](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces ../arrayOutputJsonPathPiece) }}) | validate(arg: [List<*>](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces arrayInputJsonPathPiece) }}), configuration: SchemaConfiguration) |
                                {{else}}
| FrozenList<Any?> | validate(arg: List<*>, configuration: SchemaConfiguration) |
                                {{/if}}
| [{{jsonPathPiece.pascalCase}}BoxedList](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces (join jsonPathPiece.kebabCase "boxedlist" ""))}}) | validateAndBox({{#if arrayInputJsonPathPiece}}[List<*>](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces arrayInputJsonPathPiece) }}){{else}}List<*>{{/if}}, configuration: SchemaConfiguration) |
                            {{else}}
                                {{#eq this "object"}}
                                    {{#if ../mapOutputJsonPathPiece}}
| [{{../mapOutputJsonPathPiece.pascalCase}}](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces ../mapOutputJsonPathPiece) }}) | validate(arg: [Map&lt;?, ?&gt;](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces ../mapInputJsonPathPiece) }}), configuration: SchemaConfiguration) |
                                    {{else}}
| FrozenMap<String, Any?> | validate(arg: Map&lt;?, ?&gt;, configuration: SchemaConfiguration) |
                                    {{/if}}
| [{{jsonPathPiece.pascalCase}}BoxedMap](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces (join jsonPathPiece.kebabCase "boxedmap" ""))}}) | validateAndBox({{#if mapInputJsonPathPiece}}[Map&lt;?, ?&gt;](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces mapInputJsonPathPiece) }}){{else}}Map&lt;?, ?&gt;{{/if}}, configuration: SchemaConfiguration) |
                                {{/eq}}
                            {{/eq}}
                        {{/eq}}
                    {{/eq}}
                {{/eq}}
            {{/eq}}
        {{/eq}}
    {{/each}}
{{/eq}}
| [{{jsonPathPiece.pascalCase}}Boxed](#{{> src/main/kotlin/packagename/components/_helper_anchor_id identifierPieces=(append identifierPieces (join jsonPathPiece.kebabCase "boxed" ""))}}) | validateAndBox(Any?, configuration: SchemaConfiguration) |
| Any? | validate(arg: Any?, configuration: SchemaConfiguration) |
