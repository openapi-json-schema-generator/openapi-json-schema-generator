
override fun getNewInstance(arg: Any?, pathToItem: List<Any>, pathToSchemas: PathToSchemasMap): Any? {
{{#if types}}
    {{#each types}}
        {{#if @first}}
    if (arg {{#eq this "null"}}== null{{/eq}}{{#eq this "boolean"}}is Boolean{{/eq}}{{#or (eq this "integer") (eq this "number")}}is Number{{/or}}{{#eq this "string" }}is String{{/eq}}{{#eq this "array"}}is List<*>{{/eq}}{{#eq this "object"}}is Map<*, *>{{/eq}}) {
        {{else}}
    } else if (arg {{#eq this "null"}}== null{{/eq}}{{#eq this "boolean"}}is Boolean{{/eq}}{{#or (eq this "integer") (eq this "number")}}is Number{{/or}}{{#eq this "string" }}is String{{/eq}}{{#eq this "array"}}is List<*>{{/eq}}{{#eq this "object"}}is Map<*, *>{{/eq}}) {
        {{/if}}
        {{#eq this "null"}}
        return arg
        {{/eq}}
        {{#eq this "boolean"}}
        return arg
        {{/eq}}
        {{#or (eq this "integer") (eq this "number")}}
        return arg
        {{/or}}
        {{#eq this "string" }}
        return arg
        {{/eq}}
        {{#eq this "array"}}
        return getNewInstance(arg, pathToItem, pathToSchemas)
        {{/eq}}
        {{#eq this "object"}}
        return getNewInstance(arg, pathToItem, pathToSchemas)
        {{/eq}}
        {{#if @last}}
    }
        {{/if}}
    {{/each}}
{{else}}
    if (arg == null) {
        return arg
    } else if (arg is Boolean) {
        return arg
    } else if (arg is Number) {
        return arg
    } else if (arg is String) {
        return arg
    } else if (arg is List<*>) {
        return getNewInstance(arg, pathToItem, pathToSchemas)
    } else if (arg is Map<*, *>) {
        return getNewInstance(arg, pathToItem, pathToSchemas)
    }
{{/if}}
    throw RuntimeException("Invalid input type="+getClass(arg)+". It can't be instantiated by this schema")
}
