{{#if required}}
    {{#and ../../mapValueSchema (eq typeSchema ../../mapValueSchema.typeSchema) }}
        {{#contains ../../mapValueSchema "null"}}
return get("{{{@key.original}}}")
        {{else}}
try {
    return getOrThrow("version")
} catch (e: UnsetPropertyException) {
    throw RuntimeException(e)
}
        {{/contains}}
    {{else}}
val value: {{#with ../../mapValueSchema}}{{> src/main/kotlin/packagename/components/schemas/types/schema_output_type fullRefModule="" }}{{/with}} = get("{{{@key.original}}}")
if (!({{#contains types "null" }}value == null || {{/contains}}value is {{> src/main/kotlin/packagename/components/schemas/types/schema_output_type fullRefModule="" forceNull=true noAnnotations=true }})) {
    throw RuntimeException("Invalid value stored for {{{@key.original}}}")
}
return value
    {{/and}}
{{else}}
    {{#and ../../mapValueSchema (eq typeSchema ../../mapValueSchema.typeSchema) }}
return getOrThrow("{{{@key.original}}}")
    {{else}}
val key = "{{{@key.original}}}"
throwIfKeyNotPresent(key)
val value: {{#with ../../mapValueSchema}}{{> src/main/kotlin/packagename/components/schemas/types/schema_output_type fullRefModule="" }}{{/with}} = get(key)
if (!({{#contains types "null" }}value == null || {{/contains}}value is {{> src/main/kotlin/packagename/components/schemas/types/schema_output_type fullRefModule="" forceNull=true noAnnotations=true }})) {
    throw RuntimeException("Invalid value stored for {{{@key.original}}}")
}
return value
    {{/and}}
{{/if}}
