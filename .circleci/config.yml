version: 2.1
commands: # a reusable command with parameters
  command_build_and_test:
    parameters:
      jobId:
        default: "unset"
        type: string
    steps:
      # The following `checkout` command checks out your code to your working directory. In 1.0 we did this implicitly. In 2.0 you can choose where in the course of a job your code should be checked out.
      - checkout
      # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
      # In many cases you can simplify this from what is generated here.
      # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
      - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
      # This is based on your 1.0 configuration file or project settings
      - run:
          command: java -version
      # Test
      - run:
          name: "Setup custom environment variables"
          command: echo 'export CIRCLE_JOB_ID="<<parameters.jobId>>"' >> $BASH_ENV
      - run: ./.circleci/parallel.sh
      # Teardown
      #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
      # Save test results
      - store_test_results:
          path: /tmp/circleci-test-results
      # Save artifacts
      - store_artifacts:
          path: /tmp/circleci-artifacts
      - store_artifacts:
          path: /tmp/circleci-test-results
  command_docker_build_and_test:
    parameters:
      jobId:
        default: "unset"
        type: string
    steps:
      # Machine Setup
      #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
      # The following `checkout` command checks out your code to your working directory. In 1.0 we did this implicitly. In 2.0 you can choose where in the course of a job your code should be checked out.
      - checkout
      # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
      # In many cases you can simplify this from what is generated here.
      # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
      - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
      - run:
          name: "Setup custom environment variables"
          command: echo 'export CIRCLE_JOB_ID="<<parameters.jobId>>"' >> $BASH_ENV
      - run: ./.circleci/parallel.sh
      # Teardown
      #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
      # Save test results
      - store_test_results:
          path: /tmp/circleci-test-results
      # Save artifacts
      - store_artifacts:
          path: /tmp/circleci-artifacts
      - store_artifacts:
          path: /tmp/circleci-test-results
jobs:
  ensureSamplesAndGeneratorDocsUpToDate:
    docker:
      - image: cimg/openjdk:11.0.22
    working_directory: ~/OpenAPITools/openapi-json-schema-generator
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    steps:
      - restore_cache:
          keys:
            - buildCommandLineTool
      - command_build_and_test:
          jobId: "ensureSamplesAndGeneratorDocsUpToDate"
      - save_cache:
          key: buildCommandLineTool
          paths:
            - ~/.m2
  mvnCleanInstall:
    docker:
      - image: cimg/openjdk:11.0.22
    working_directory: ~/OpenAPITools/openapi-json-schema-generator
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    steps:
      - restore_cache:
          keys:
            - buildCommandLineTool
      - command_build_and_test:
          jobId: "mvnCleanInstall"
      - save_cache:
          key: buildCommandLineTool
          paths:
            - ~/.m2
  testPython38ClientSamples:
    docker:
      - image: python:3.8
    working_directory: ~/OpenAPITools/openapi-json-schema-generator
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    steps:
      - checkout
      - command_docker_build_and_test:
          jobId: "testPythonClientSamples"
  testPython39ClientSamples:
    docker:
      - image: python:3.9
    working_directory: ~/OpenAPITools/openapi-json-schema-generator
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    steps:
      - checkout
      - command_docker_build_and_test:
          jobId: "testPythonClientSamples"
  testJava17ClientSamples:
    docker:
      - image: cimg/openjdk:17.0.9
    working_directory: ~/OpenAPITools/openapi-json-schema-generator
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    steps:
      - restore_cache:
          keys:
            - javaClientMavenCache
      - command_build_and_test:
          jobId: "testJava17ClientSamples"
      - save_cache:
          key: javaClientMavenCache
          paths:
            - ~/.m2
workflows:
  version: 2
  build:
    jobs:
      - ensureSamplesAndGeneratorDocsUpToDate
      - mvnCleanInstall
      - testPython38ClientSamples
      - testPython39ClientSamples
      - testJava17ClientSamples
